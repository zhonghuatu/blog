[{"title":"hexo 移植相关","date":"2021-05-31T10:17:15.000Z","url":"/2021/05/31/hexo-%E7%A7%BB%E6%A4%8D%E7%9B%B8%E5%85%B3/","categories":[["生活百态","/categories/%E7%94%9F%E6%B4%BB%E7%99%BE%E6%80%81/"]],"content":"即将进入高三，从7月开始暂停续费服务器，站点将会转移到hexo上。 目前的Debug地址： 转移完成后主域名将重定向至github.io 如果有时间的话OJ的转移也会做，尽管OJ已经停止维护了。"},{"title":"重新维护博客的瞎扯","date":"2020-09-15T07:40:50.000Z","url":"/2020/09/15/refreshing-xiache/","categories":[["生活百态","/categories/%E7%94%9F%E6%B4%BB%E7%99%BE%E6%80%81/"]],"content":"好久没维护博客了……更新了wp和主题，可能会出锅。还有最近可能会整理文章，把一些初中写的没啥用的或者过于稚嫩的文章封存。 学习压力上来了（或者说是自己变懒了）……以后可能不会写很多，也不一定是跟信竞相关的内容了。"},{"title":"刷题与ZZ错误记录15","date":"2020-05-11T11:04:45.000Z","url":"/2020/05/11/zzerror15/","categories":[["OIer之路","/categories/OIer%E4%B9%8B%E8%B7%AF/"],["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"又是写代码的一天…… [collapse title=”隐藏内容”] 这篇文章其实已经鸽了半个月了……自从初一之后就一直写作业+各种颓……新学期继续奋斗吧…… [/collapse] POJ-2456 Aggressive cows CodeForces-551C GukiZ hates Boxes POJ-3685 Matrix LightOJ-1240 Point Segment Distance (3D) POJ-3111 K Best POJ-2456 Aggressive cows题面【VJudge】 【POJ】 农夫约翰搭建了一间有N间牛舍的小屋。牛舍排在一条线上，第i号牛舍在Xi的位置。但是他的M头牛对小屋很不满意，因此经常相互攻击。约翰为了防止牛之间相互伤害，因此决定把每头牛都放在离其他牛尽可能远的牛舍。求最近的两头牛之间距离的最大值。 总结二分答案，选中第一个牛棚，然后按照至少相隔$x$距离放牛，判断能不能放下这么多头牛。 槽点 (CE) POJ不支持万能头！ (TLE) 误将最远的那个点设成$n$（实际上应为$a[n]$），且因为选中了指定数量的牛棚之后就不需要继续选了可以直接跳出判定。 AC代码 CodeForces-551C GukiZ hates Boxes题面【VJudge】 【CodeForces】 一条直线上 有n堆盒子, 第i堆盒子有ai个盒子 有m个学生要去移走所有的盒子, m个学生是同时行动的, 一开始所有的学生站在第一堆盒子的左边,他们移动到第一堆盒子需要花费1时间 接下来每个学生都可以有两种选择 1: 移动到下一堆,花费1的时间 2: 移走当前堆的一个盒子(如果还有盒子的话), 花费1的时间 请问最少需要多少时间能移走所有的盒子 n,m &lt;= 10^5 ai &lt;= 10^9 总结今天做的都是二分专题，这题也是使用二分来做，二分所用时间，但如何来检查呢？我的话就是使用一个简单的贪心：让这个人移动到距离最远的有箱子的点，然后在剩下的时间内尽可能的从后往前搬箱子。 槽点 (WA) 这题需要开Long Long！ AC代码 POJ-3685 Matrix题面【VJudge】 【POJ】 给你一个n * n的矩阵 第i行第j列的值为i *i + 100000 * i + j * j - 100000 * j + i * j 求矩阵中第M小的数 N &lt;= 50000 总结我们可以稍微改写一下这个求值函数： $$ f(x) = i \\times i + (100000+j) \\times i + j \\times (j - 100000) $$ LightOJ-1240 Point Segment Distance (3D)AC代码 POJ-3111 K Best咕咕咕咕"},{"title":"写一个OIerLinux——如何自定义一个LiveCD","date":"2020-03-29T08:59:39.000Z","url":"/2020/03/29/custom-livecd/","tags":[["NOIP","/tags/NOIP/"],["arbiter","/tags/arbiter/"],["GUIDE","/tags/GUIDE/"],["Linux","/tags/Linux/"],["livecd","/tags/livecd/"],["NOILinux","/tags/NOILinux/"],["Ubuntu","/tags/Ubuntu/"]],"categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"],["OIer之路","/categories/OIer%E4%B9%8B%E8%B7%AF/"]],"content":"之前在学校就喜欢拿U盘里的LiveCD装逼写程序，现在想想好久没搞OI了，该让自己去适应OI的环境了。然后就萌生了自己制作LiveCD的想法。正好之前用的LiveCD (Kali持久化) 不是持久性差（大BUG小BUG出不停）就是稳定性差（经常装完一个软件之后剩余空间就没了）就是不合心意（没有自己想要的程序）。趁现在自己先去试试。然而试试就逝世踩了很多坑。现在网上教程也少就在这分享给大家。 选择模板LiveCD这个没什么好说的，一开始我就是想在CCF官方的NOILinux上直接改（作为一个OIer还要比赛最好能有一个跟比赛环境差不多的），不过马上就望而却步……因为年代久远（就跟相关的LiveCD教程一样），系统内核是32位，导致包括VSCode在内的一众应用都装不上去（它们只支持amd64），况且32位的淘汰是一种必然的趋势……于是折衷了一下，选了个跟NOILinux版本相同的ubuntu 14.04.2（可以去官网Old Releases找）。 选择制作LiveCD的工具一开始我是按照官方的路子走的，一堆英文稀里糊涂的然后走着走着就进了死胡同——Live启动的时候就卡在了启动Cups服务不动了…… 看来像我这样的蒟蒻还是用现成的工具最好了！ 于是就找到了一个好用的：Cubic： （其实一开始我就看到了这个工具，但是看到慢成蜗牛的ppa源就望而却步了，然后绕了一圈又绕回来了……） 安装代码如下： （说实话我安装这东西的时候其实还不慢的……） 然后内容简洁明了： 把这堆东西填完之后就进入到了chroot界面： 对镜像内容的DIY这里应该就是一个自定义LiveCD的核心了。按照在正常情况下的安装步骤就可以了。 在开始之前有一些小的点需要注意： DNS的设置（域名无法解析之类的）因为是14.04，所以/etc/resolv.conf默认是一个不可用的链接。担心这个文件可能会影响，于是就这么走了： 然后里面填上nameserver 8.8.8.8即可。 chroot的图形界面可能你看着命令行的时候会非常渴望看到图形窗口（操作方便），或者有必要调出图形界面调试一下效果，一直输出太麻烦了，可以考虑用系统自带的x服务（以下步骤二选一）： 将图形界面显示到当前系统： bash # 系统shell xhost + # chroot (cubic) shell export DISPLAY=:0.0 firefox #如果不行可以考虑前面加个DISPLAY=:0.0 创建自己独立的display： bash # 系统shell sudo apt-get install xserver-xephyr Xephyr -ac -screen 800x600 :1 #(其中800x600为你要设置的窗口大小) # chroot (cubic) shell export DISPLAY=:1 firefox apt源的设置这一段感觉像废话： 修改/etc/apt/sources.list如下： 然后apt update即可。 安装GNome桌面现在我用的是19.04，unity的界面还可以，但是14.04的unity看着就有亿点丑了，再加上模仿NOI Linux的需求，所以我选择安装GNome。 安装输入法输入法没啥好说的，直接 走起。（有兴趣的可以尝试搜狗输入法，不过LiveCD运行可能会有问题） 安装上古的NOI Linux自带程序粗粗一看NOILinux上面也没啥东西： 别的都好说…… （Lazarus需要去SourceForge下载） 就是Arbiter和GUIDE这两难兄难弟…… （这都2020年了……还在用qt3写的GUIDE和arbiter） 一开始我毫无头绪…… 直到看到了这篇文章：执行应用程序出现： No such file or directory_运维_温故而知新-CSDN博客 执行程序命令： ./test 出现错误： bash: test : No such file or directory 确定执行的命令没有错，路径没有问题，另外通过 ls -l 查看，权限足够。 执行： ldd test 返回：not a dynamic executable 跟我的情况不是一样的马！ 接着看： readelf -l test grep interpreter #查看该程序的加载程序 返回：[Requesting program interpreter: /lib/ld-linux.so.3] 由这该程序由/lib/ld-linux.so.3 但在/lib/下没有发现ld-linux.so.3 所以，问题应该就是出在这个test程序的加载上了，执行./test 返回的 No such file or directory 并不是指找不着test这个文件而是指的/lib/ld-linux.so.3这个文件或者其它的test所依赖的动态库。 又看了一篇文章：执行程序出现：bash: ./xxx : No such file or directory_运维_LshuangCC的博客-CSDN博客 程序启动时，就需要把ld-linux.so.2加载器将所有的动态库加载后然后再将控制权交给程序的入口。 关于动态库的工作原理，参考： 在Ubuntu下是找不到/lib/ld-linux.so.2，于是我就从debian的lib中把ld-linux.so.2拷贝到ubuntu中（由于ld-linux.so.2是一个软连接，实际 拷贝的文件是ld-2.11.2.so，然后再ubuntu中手动建立ld-2.11.2.so软连接） 恍然大悟！原来是这样的！从NOILinux带走ld-linux.so.2！ 然后的错误是这样的： 这总比那个没头没脑的No such file or directory好太多了！只要去/usr/lib或者/lib把他提示给你的东西从NOILinux里面复制出来然后粘进去就可以了（建议还是哪里来的对应塞哪里，不过你一股脑地全塞进/usr/lib好像也没多大问题），大概会有二三十个文件吧。之后就可以了！ 当界面出来的时候…… Guide同理，不过需要去NOI官网下载tar包，里面有install.sh自动配置。 日常清理作为一个OIer，怎么能容忍开始菜单里一大堆没用的东西呢？ 或者就挂着一键搞定： 附录：我也不是光靠自己就能写出这么一篇文章的，感谢一下下面这些文章及他们的作者，感谢它们对我制作LiveCD和写这篇文章的帮助。 LiveCDCustomization - Community Help Wiki 如何使用Cubic创建自定义Ubuntu ISO镜像 （好像不是我开始看到的那篇，先放着把） chroot 简介 - 优麒麟论坛 Ubuntu 14.04更新为国内阿里源解决apt-get install无法执行的问题 - bug_killer - 博客园 Ubuntu 14.04 安装配置GNOME经典界面_Linux教程_Linux公社-Linux系统门户网站 Ubuntu 14.04 LTS 设置默认启动桌面_运维_极客点儿-CSDN博客 anjuta的安装、配置以及第一个hello程序_Java_郭大侠的专栏-CSDN博客 执行应用程序出现： No such file or directory_运维_温故而知新-CSDN博客 执行程序出现：bash: ./xxx : No such file or directory_运维_LshuangCC的博客-CSDN博客 Ubuntu 16.04卸载LibreOffice等不常用软件_运维_colin_lisicong的博客-CSDN博客 Ubuntu 16.04 LTS 删除不常用的软件_运维_qq_32600929的博客-CSDN博客 "},{"title":"偷偷换掉Live2D小人……","date":"2020-03-22T10:01:16.000Z","url":"/2020/03/22/h14z-live2d/","categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"]],"content":"[infobox title=”偷懒警告”]容我日后补齐[/infobox] 首先，我闲的蛋疼去了一趟学生会的空间，然后看到了这个…… 于是就有了一些想法…… 然后就有了这个东西…… 如果日后有时间的话我可能会尝试着补齐这篇教程，不过现在我还是把一些主要步骤列出来以供留念： 先去尝试一下waifu2x吧！然后去一趟bilibili苦逼的Photoshop抠图更苦逼的live2d导入最终成品虽然个人觉得这玩意儿还是瑕疵蛮多的，比如摇头晃脑过于剧烈，表情单一，变形有些鬼畜……算了先用着吧，毕竟是第一次做……"},{"title":"成功部署VJudge","date":"2020-03-08T08:09:20.000Z","url":"/2020/03/08/%E6%88%90%E5%8A%9F%E9%83%A8%E7%BD%B2vjudge/","categories":[["后山特遣队","/categories/%E5%90%8E%E5%B1%B1%E7%89%B9%E9%81%A3%E9%98%9F/"]],"content":"经过了将近一周的摸索和练习和两天左右的部署（其实是不停地备份重置还原失败循环），总算是把Virtual Judge部署好了。 :[2233娘_喝水]: 大家可以去  体验一下，不过未来后山OJ也会将VJudge功能综合到主OJ里去的。"},{"title":"彩虹课堂文件下载","date":"2020-02-09T04:56:37.000Z","url":"/2020/02/09/caihong-download/","categories":[["好好学习","/categories/%E5%A5%BD%E5%A5%BD%E5%AD%A6%E4%B9%A0/"],["菊落凤起","/categories/%E8%8F%8A%E8%90%BD%E5%87%A4%E8%B5%B7/"]],"content":"[infobox title=”置顶注解”] 考虑到这些天还是要以学习为主，所以将不再更新“文件变化”内容； 考虑到彩虹课堂之后也应该不会发生什么大的变故，接下来我不会也不支持在各种平台上发小广告， 望各位周知。 文件的最后检查时间：2.18 17:07 检查时间以此为准 [/infobox] 注意： 1. 我会按照顺序下载彩虹学堂上的所有凤起校区的文件，大家可以按照“修改时间”排序，快速找到没有下载的文件。 2. 我会固定地在 下午课程结束后 或 晚上 检查是否有更新，也会把最后的检查时间标注在这个页面上。 3. 欢迎催更，不过最好私信QQ或在班级QQ群@我，我会尽量去看的（不一定）。 4. “本地下载”按钮指向OneDrive，“云盘下载”指向百度网盘，提取码一般附在按钮的后面。 5. 不要在意账号的名字，这些都是我脑子一热想出来的而已…… [collapse title=”折叠内容”] 新的学期开始了（尽管是在网上），作业什么的都发在了彩虹学堂上。然鹅？！找不到PDF插件？！下载还贼慢？！ 好了，我每从彩虹课堂上爬下一个作业或是啥啥的文件我都会尽量放在我的OneDrive和百度云上。 [dangerbox title=”突发事件”] 来自班班的通知：各位家长非常抱歉，由于系统升级的原因，2月13日全天暂停 彩虹学堂的使用，请同学们及时下载好相关资料，2 月14日恢复使用。谢谢！【！！注意只是彩虹学堂暂停，腾讯课堂仍然正常授课！！】 我这边会全力保证大家2.13的下载需求！大家也可以去下载那个综合包一次性搞定！ [/dangerbox] [successbox title=”好消息，好消息！”] 现在我已经写好了爬虫程序，所以检查一遍将会变得特别的快！ 我也会在更新时附上爬虫给出的输出以方便大家查看现有文件！ [/successbox] [/collapse] 综合下载 给那些第一次下载但是不想一个个点开链接的人一个偷懒的理由…… （以压缩包格式）一次性下完所有文件！ （不过所有的更新内容都写在科目里，相比上一次没有更改的会标注“（无）”） [bdbtn]\\_ma-il\\_vip/Ed861GzIB61ChvCRV7Y\\_YdEB1V7wkkPmRsH-nXZgZD18Mg?e=KATOJh\\[/bdbtn\\] [ypbtn]\\[/ypbtn\\] 提取码：yo6j 语文[bdbtn]\\_ma-il\\_vip/Ekhgi2inbK5GjZW6RZy4e8sBgst3-GUeUZNGmFER2acwzg?e=JAncY5\\[/bdbtn\\] [ypbtn]\\[/ypbtn\\] 提取码：iv2j 数学[bdbtn]\\_ma-il\\_vip/EtGH5pWNTRBLo9eAdcmfLoABKcr7AL1maVjBK3V\\_7c7wCQ?e=58SqCd\\[/bdbtn\\] [ypbtn]\\[/ypbtn\\] 提取码：hqnx 英语[bdbtn]\\_ma-il\\_vip/EtYfIUp36ANOjHFUE1ROnhkBNjCKFZTXHjLYxPHjvwxDGQ?e=lsLqh7\\[/bdbtn\\] [ypbtn]\\[/ypbtn\\] 提取码：h54b 物理[bdbtn]\\_ma-il\\_vip/EtYfIUp36ANOjHFUE1ROnhkBNjCKFZTXHjLYxPHjvwxDGQ?e=lsLqh7\\[/bdbtn\\] [ypbtn]\\[/ypbtn\\] 提取码：a9x1 化学[bdbtn]\\_ma-il\\_vip/EsdgaS2ybxhNlOuS8GRix9EBIAFCxRIEvmM\\_Jta5RiuNbw?e=5zf6OA\\[/bdbtn\\] [ypbtn]\\[/ypbtn\\] 提取码：dsk4 生物[bdbtn]\\_ma-il\\_vip/ErSFHXQ2KXtNuf15rcr3eZQBlUxm-oWAeaYFUSCVnNXJSA?e=QAtor0\\[/bdbtn\\] [ypbtn]\\[/ypbtn\\] 提取码：bchi 历史[bdbtn]\\_ma-il\\_vip/EkbwKK\\_cLyJBrvdthgs2TuMBa5Ov9xcN0fRErXLGG0j0Qw?e=VWdTR6\\[/bdbtn\\] [ypbtn]\\_zlJy68tZK3x1qdOqlibA\\[/ypbtn\\] 提取码：ay8y 政治[bdbtn]\\_ma-il\\_vip/Emsfgw1J5FhAvLmAh9slraEB1jb93y1nchhIvAYOEorEhA?e=tt570J\\[/bdbtn\\] [ypbtn]\\[/ypbtn\\] 提取码：6b4y 地理[bdbtn]\\_ma-il\\_vip/EgvlJKXa9qFHpAB3017vlckBelA7lFGB2KipOP2XmzP04g?e=d5lM8N\\[/bdbtn\\] [ypbtn]\\_-tvCmbJiQDcBd7ug\\[/ypbtn\\] 提取码：hhuh 技术[bdbtn]\\_ma-il\\_vip/En9FHgPUQi1EinR7fJPAjfABuPkEkk2tg5eWODXi0WwHFA?e=4n13bp\\[/bdbtn\\] [ypbtn]\\[/ypbtn\\] 提取码：ot1b 以下内容自2.17起不再更新： 没必要去登陆来查看隐藏内容的，反正也不更新了。 [hide] **综合下载的最后检查**：2/12 15:13 [infobox title=”语文”] **最后检查**：2/14 14:38 [collapse title=”更新内容”] （2.14）【新建文档】 214日词语学案 2月14日词语作业 2月14日词语专题复习PPT （2.11）【新建文档】 2月11日字形作业 2月11日字形专题复习PPT 2月11日字形学案 （2.10）【新建文档】 2月10日字音复习专题PPT [/collapse] [collapse title=”详细信息”] 【忽略】 空中课堂答疑三步走 └───【忽略】 空中课堂答疑三步走 【忽略】 杭十四中康桥校区高一年级直播网课语文学科教材 ├───【忽略】 杭十四中康桥校区高一年级直播网课语文学科教材+学案（季氏将伐颛臾 ） ├───【忽略】 杭十四中康桥校区高一年级直播网课语文学科教材+学案（烛之武退秦师） ├───【忽略】 作业1（烛之武退秦师1） ├───【忽略】 作业2（烛之武退秦师2） └───【忽略】 作业3、4（季氏将伐颛臾） 【追加】 杭十四中凤起校区高一年级直播网课语文学科教材 ├───【存在】 2月10日字音作业 ├───【存在】 2月10日字音复习专题PPT ├───【存在】 2月11日字形作业 ├───【存在】 2月11日字形专题复习PPT ├───【存在】 2月11日字形学案 ├───【新增】 2月14日词语学案 ├───【新增】 2月14日词语作业 └───【新增】 2月14日词语专题复习PPT [/collapse] [/infobox] [infobox title=”数学”] **最后检查**：2/14 14:38 [collapse title=”更新内容（无）”] （2.12）【新建文档】 2月12日数形结合解决向量问题《学案》 2月12日数形结合解决向量问题《学案》答案 2月13日极化恒等式及应用 2月12日拓展题答案三角形四心与向量 （2.11）【新建文档】 2.4.1全品解答 （2.10）【新建文档】 2月10日作业《全品》2.4.1 2月11日作业《全品》2.4.2 [/collapse] [collapse title=”详细信息”] 【忽略】 空中课堂答疑三步走 └───【忽略】 空中课堂答疑三步走 【忽略】 杭十四中康桥校区高一年级直播网课数学学科教材 ├───【忽略】 杭十四中康桥校区高一年级直播网课数学学科教材2.4.1数量积(1) ├───【忽略】 杭十四中康桥校区高一年级直播网课数学学科教材2.4.2数量积的坐标表示 ├───【忽略】 杭十四中康桥校区高一年级直播网课数学学科教材3.1.1两角差的余弦公式 【忽略】 空中课堂答疑三步走 └───【忽略】 空中课堂答疑三步走 【忽略】 杭十四中康桥校区高一年级直播网课数学学科教材 ├───【忽略】 杭十四中康桥校区高一年级直播网课数学学科教材2.4.1数量积(1) ├───【忽略】 杭十四中康桥校区高一年级直播网课数学学科教材2.4.2数量积的坐标表示 ├───【忽略】 杭十四中康桥校区高一年级直播网课数学学科教材3.1.1两角差的余弦公式 ├───【忽略】 杭十四中康桥校区高一年级直播网课数学学科教材3.1.2两角和与差的正弦、余弦、正切公式 ├───【忽略】 作业-数量积（1） ├───【忽略】 作业-数量积（2） ├───【忽略】 作业3-两角差的余弦公式 └───【忽略】 作业4-两角和与差的正弦、余弦和正切公式 【存在】 杭十四中凤起校区高一年级直播网课数学学科教材 ├───【存在】 2月10日凤起高一数学导学案 ├───【存在】 向量数量积电子教材 ├───【存在】 2月10日向量数量积1 ├───【存在】 2月11日向量数量积2 ├───【存在】 2月10日作业《全品》2.4.1 ├───【存在】 2月11日作业《全品》2.4.2 ├───【存在】 2.4.1全品解答 ├───【存在】 2月12日数形结合解决向量问题《学案》 ├───【存在】 2月12日数形结合解决向量问题《学案》答案 ├───【存在】 2月13日极化恒等式及应用 └───【存在】 2月12日拓展题答案三角形四心与向量 [/collapse] [/infobox] [infobox title=”英语”] **最后检查**：2/14 14:38 [collapse title=”更新内容”] （2.14）【新建文档】 必修二 Unit 3 练习答案 必修二 Unit 4 练习 （2.11）【新建文档】 必修二 Unit 3 练习 [/collapse] [collapse title=”详细信息”] 【忽略】 空中课堂答疑三步走 └───【忽略】 空中课堂答疑三步走 【忽略】 杭十四中康桥校区高一年级直播网课英语学科教材 ├───【忽略】 U2 电子书（词汇语言点）+语法学案 ├───【忽略】 2020.2.6 被动语态讲解与运用 ├───【忽略】 M2U2 词汇及语言点练习1 ├───【忽略】 M2U2 词汇及语言点练习2 ├───【忽略】 高一英语 被动语态讲解与运用1作业与解析 └───【忽略】 高一英语：被动语态讲解与运用2作业与解析 【追加】 杭十四中凤起校区高一英语直播网课材料 ├───【存在】 必修二 Unit 3 和 Unit 4 课文及单词 ├───【存在】 必修二 Unit 3 课文录音 ├───【存在】 必修二 Unit 3 单词录音 ├───【存在】 必修二 Unit 3 导学案 ├───【存在】 必修二 Unit 3 练习 ├───【新增】 必修二 Unit 3 练习答案 ├───【存在】 必修二 Unit 4 课文录音 ├───【存在】 必修二 Unit 4 单词录音 ├───【存在】 必修二 Unit 4 导学案 └───【新增】 必修二 Unit 4 练习 [/collapse] [/infobox] [infobox title=”物理”] **最后检查**：2/14 14:38 [collapse title=”更新内容”] （2.14）【新建文档】 2.13宇宙航行 作业题 （2.12）【新建文档】 2月11号高一物理答案 （2.10）【新建文档】 学案第六章 万有引力与航天 人教版 超清电子课本必修2 2.10高一物理作业答案 [/collapse] [collapse title=”详细信息”] 【忽略】 空中课堂答疑三步走 ├───【忽略】 空中课堂答疑三步走 ├───【存在】 课本高中物理必修2 ├───【存在】 课本物理必修二第六章-万有引力 └───【存在】 学案第六章 万有引力与航天 【忽略】 杭十四中康桥校区高一年级直播网课康桥学科教材 ├───【忽略】 课本高中物理必修2.pdf ├───【忽略】 课本物理必修二第六章-万有引力 ├───【忽略】 学案第六章 万有引力与航天 └───【忽略】 作业-物理必修二第六章万有引力正文 【追加】 凤起校区高一空中课堂资料 ├───【存在】 人教版 超清电子课本必修2 ├───【存在】 6.4万有引力理论的成就学案（1） ├───【存在】 2月10号高一物理作业 ├───【存在】 2.10高一物理作业答案 ├───【存在】 6.4万有引力理论的成就学案（2） ├───【存在】 2月11号高一物理作业 ├───【存在】 2月11号高一物理答案 ├───【新增】 2.13宇宙航行 作业题 └───【存在】 2.13宇宙航行 作业题 [/collapse] [/infobox] [infobox title=”化学”] **最后检查**：2/14 14:38 [collapse title=”更新内容（无）”] （2.12）【新建文档】 2月11日课件 2月11日同素异形和同分异构-科普答疑 2月12日化学作业答案 2月12日课件 （2.11）【新建文档】 2月11日化学作业答案 2.11课件 同素异形和同分异构-科普答疑 [/collapse] [collapse title=”详细信息”] 【忽略】 空中课堂答疑三步走 └───【忽略】 空中课堂答疑三步走 【忽略】 杭十四中康桥校区高一年级直播网课化学学科教材 ├───【忽略】 杭十四中康桥校区高一年级直播网课化学学科教材 ├───【忽略】 化学作业1 ├───【忽略】 化学作业2 ├───【忽略】 化学作业3 └───【忽略】 化学作业4 【存在】 杭十四中凤起校区高一年级直播网课化学学科资料（2.10-2.15） ├───【存在】 杭十四中凤起校区网络授课电子课本-高一化学 ├───【存在】 2月11日化学作业 ├───【存在】 2月11日化学作业答案 ├───【存在】 2月11日课件 ├───【存在】 2月11日同素异形和同分异构-科普答疑 ├───【存在】 2月12日化学作业 ├───【存在】 2月12日化学作业答案 ├───【存在】 2月12日课件 ├───【存在】 2月14日化学作业 └───【存在】 2月15日化学作业 【忽略】 杭十四中康桥校区高一年级直播网课化学学科教材（第二周） ├───【忽略】 康桥校区高一网课直播第二周（17-22号）化学教材 ├───【忽略】 康桥校区高一直播网课第二周化学学案1（17号、19号） ├───【忽略】 康桥校区高一直播网课第二周化学学案2（20号） ├───【忽略】 康桥校区高一直播网课第二周化学学案3（22号） ├───【忽略】 康桥校区高一直播网课第二周化学作业1（17号） ├───【忽略】 康桥校区高一直播网课第二周化学作业2（19号） ├───【忽略】 康桥校区高一直播网课第二周化学作业3（20号） └───【忽略】 康桥校区高一直播网课第二周化学作业4（22号） 【忽略】 康桥校区高一直播网课第一周化学周末作业（16号） └───【忽略】 康桥校区高一直播网课第一周化学周末作业（16号） [/collapse] [/infobox] [infobox title=”生物”] **最后检查**：2/14 14:38 [collapse title=”更新内容”] （2.14）【新建文档】 《 DNA的分子结构和特点》电子教材 （2.12）【新建文档】 2月17日预习学案 2月18日课后作业 2月18日作业答案 2月21日课后作业 （2.11）【新建文档】 《核酸是遗传物质的证据》电子教材 [/collapse] [collapse title=”详细信息”] 【忽略】 空中课堂答疑三步走 └───【忽略】 空中课堂答疑三步走 【追加】 杭十四中凤起校区高一年级直播网课生物学科 ├───【存在】 《细胞的分化、衰老和凋亡》电子教材 ├───【存在】 2月10日预习学案 ├───【存在】 2月11日课后作业 ├───【存在】 2月14日课后作业 ├───【存在】 《核酸是遗传物质的证据》电子教材 ├───【存在】 2月17日预习学案 ├───【存在】 2月18日课后作业 ├───【存在】 2月18日作业答案 ├───【新增】 《 DNA的分子结构和特点》电子教材 └───【存在】 2月21日课后作业 【忽略】 杭十四中康桥校区高一年级直播网课生物学科 ├───【忽略】 康桥校区生物学科2月11、14日教材（细胞的分化、衰老和凋亡） ├───【忽略】 康桥校区生物学科2月11日作业 ├───【忽略】 康桥校区生物学科2月11作业答案 ├───【忽略】 康桥校区生物学科2月14日作业 ├───【忽略】 康桥校区生物学科2月14日作业答案 ├───【忽略】 康桥校区生物学科2月18日教材（核酸是遗传物质的证据） ├───【忽略】 康桥校区生物学科2月18日作业 ├───【忽略】 康桥校区生物学科2月18日作业答案 ├───【忽略】 康桥校区生物学科2月21日教材（DNA的分子结构） ├───【忽略】 康桥校区生物学科2月21日作业 └───【忽略】 康桥校区生物学科2月21日作业答案 [/collapse] [/infobox] [infobox title=”历史”] **最后检查**：2/14 14:38 [collapse title=”更新内容（无）”] （2.11）【新建文档】 必修三专题二1 中国古代的科学技术成就 必修三专题二2 中国的古代艺术 必修三专题二3 中国古典文学的时代特色 （2.10）【新建文档】 必修二教材 必修三教材 [/collapse] [collapse title=”详细信息”] 【忽略】 空中课堂答疑三步走 └───【忽略】 空中课堂答疑三步走 【存在】 凤起校区 【存在】 杭十四中凤起校区网上教学内容 ├───【存在】 必修二教材 └───【存在】 必修三教材 【存在】 凤起校区高一历史网上教学作业（I） ├───【存在】 高一历史练习三十一 ├───【存在】 高一历史练习三十二 └───【存在】 高一历史练习三十三 【存在】 杭十四中凤起校区网上教学作业（2） ├───【存在】 必修三专题二1 中国古代的科学技术成就 ├───【存在】 必修三专题二2 中国的古代艺术 └───【存在】 必修三专题二3 中国古典文学的时代特色 【忽略】 康桥校区 【忽略】 杭十四中康桥校区高一年级直播网课历史学科教材 ├───【忽略】 8-1 二战后资本主义世界经济体系的形成[人民版] ├───【忽略】 8-2 当今世界经济区域集团化的发展[人民版] ├───【忽略】 8-3 经济全球化的世界[人民版] └───【忽略】 专题二 古代中国的科学技术与文化（人民版） 【忽略】 康桥校区作业 ├───【忽略】 历史作业1当今世界经济区域集团化的发展 ├───【忽略】 历史作业2经济全球化的世界 ├───【忽略】 历史作业3中国古代的科学技术成就 ├───【忽略】 历史作业4中国的古代艺术和文学的时代特色 └───【忽略】 周末作业 [/collapse] [/infobox] [infobox title=”政治”] **最后检查**：2/14 14:38 [collapse title=”更新内容（无）”] [/collapse] [collapse title=”详细信息”] 【忽略】 空中课堂答疑三步走 └───【忽略】 空中课堂答疑三步走 【忽略】 杭十四中康桥校区高一年级直播网课政治学科教材（学案） ├───【忽略】 杭十四中康桥校区高一年级直播网课政治学科教材（学案） ├───【忽略】 课时1作业 ├───【忽略】 课时2作业 └───【忽略】 周练过关作业(一) 【存在】 杭十四中凤起校区高一年级直播网课政治学科教材（学案） ├───【存在】 杭十四中凤起校区高一年级直播网课政治学科教材（学案） ├───【存在】 2月10日政治课后作业（1.1人民民主专政） └───【存在】 2月13日政治课后作业（1.2政治权利与义务） [/collapse] [/infobox] [infobox title=”地理”] **最后检查**：2/14 14:38 [collapse title=”更新内容（无）”] [/collapse] [collapse title=”详细信息”] 【忽略】 空中课堂答疑三步走 └───【忽略】 空中课堂答疑三步走 【忽略】 杭十四中康桥校区高一年级直播网课地理学科教材（必修二第1、2章） ├───【忽略】 教材（必修二第1章） ├───【忽略】 教材（必修二第2章） ├───【忽略】 作业1 ├───【忽略】 作业2 ├───【忽略】 作业3 ├───【忽略】 作业4 └───【忽略】 周末检测试题 【存在】 杭十四中凤起校区高一年级直播网课地理相关资料 ├───【存在】 01电子教材（必修二第1章） ├───【存在】 02学案（必修二 第1章） └───【存在】 03作业（必修二 第1章） [/collapse] [/infobox] [infobox title=”技术”] **最后检查**：2/14 14:38 [collapse title=”更新内容（无）”] （2.11）【新建文档】 《技术与设计1》—教材电子版 《技术与设计1》—作业本电子版 [/collapse] [collapse title=”详细信息”] 【详细数据】 【忽略】 空中课堂答疑三步走 └───【忽略】 空中课堂答疑三步走 【追加】 杭十四中高一年级直播网课技术学科教材(凤起和康桥共用) ├───【新增】 《技术与设计1》—教材电子版 └───【新增】 《技术与设计1》—作业本电子版 [/collapse] [/infobox] [/hide]"},{"title":"换了新主题的感受","date":"2020-02-04T14:40:25.000Z","url":"/2020/02/04/new-theme/","categories":[["杂文","/categories/%E6%9D%82%E6%96%87/"]],"content":"回忆我在使用WordPress博客中的一年半的包括换主题以来的艰辛历程，结合新换上的KRATOS（还得感谢一下原作者VTROIS和魔改主题的MOEDOG，你们可以去网站的最下面找到他们）就瞎扯些什么东西吧。 我是不会告诉你我是在测试新主题的一些专用格式的，所以以后换主题可能会惹出一堆的麻烦…… [title]我是如何找到这个主题的[/title] [collapse title=”换主题的历程”] 一开始我就对WordPress的默认主题不爽了。我这种人就喜欢把重点放在一处写，所以不喜欢给界面留白这么多的默认主题。 当时也是一个小萌新加上初中二年级的直板，也是在WordPress的主题搜索里找到的SpicePress（一直都在用的写博文的主题）和NewsWords（本来打算写了什么项目把这玩意儿当首页结果连拿得出手的项目都没有……）。 选中了SpicePress还是因为这个主题大部分地方都是红的……当时我从那兔开始，就十分的执着于一些红色的思想和红色的历史，当然现在对于红色的执念还是十分深刻的。于是这个主题我就一直在用，从使用可视化编辑器开始，到区块编辑器，再到Markdown；从“免费云主机”搬到初中学校机房电脑，再到Vultr和现在用的阿里云…… 不过上高中之后，整个人就开始颓，而且我看那兔和领风者啥的都是在那个B……站上看的，于是整个人的品位就开始……呃……像是被二向箔二向化了一样…… 不过我倒是发现，日渐消沉于二次元之后，找主题的历程就变得顺畅多了！直到2019年的年底，我遇上了Memory主题（[传送门]()）。这个主题虽然没有该作者的另一个付费主题那么高大上，但是还是蛮紧凑（符合我对博客的审美）还兼有了一些无聊的功能，并且代码不是那么复杂，自己日后可以再魔改。 [/collapse] 直到最近，我发现自己的看板娘不见了（自从我换上了https之后就没了，反正有一段时间了），在寻找Live2d模型的时候我发现了MOEDOG的这个插件，然后就愉快地装进了博客里，然后愉快地发现这位作者的2233的live2d模型竟然有包括不适合我的品位的奇怪模型在内的二十个左右的皮肤。正当我把玩研究这个插件的用法时，我注意到了这位博主的博客的主题——竟然支持pjax加载，背景音乐，自带看板娘等我可能永远都用不到但是我又反悔了一堆的功能！配色还这么的清新！ 最重要的是，这位博主的主题是可以白嫖免费获取的！于是我就愉快地装上了它！ [title]体验和感受[/title] 我一开始还以为博主提供的这些东西我都用不上，我就喜欢这个pjax，配色，不松不紧的紧凑程度，还有看板娘…… 然后就手痒痒…… 先是花了一个晚上的时间，将我QQ音乐上的适合当bgm的和喜欢的歌都转到了网易云（为了配合APlayer），然后又花了一小时上B站搞来了一些表情包（侵删）……然后又想试试这个主题的一些特别功能，于是闲着蛋疼写了这篇博文 [title]一些尝试[/title] 先扪心自问一下，寒假作业写了多少了？答曰：22.33%（瞎扯的，反正没写完……） [striped]22.33[/striped] 然后皮一下 [hide reply_to_this=”true”] 我就是皮了一下而已…… :[2233娘_卖萌]: 好吧我随便在网盘搜索上找了一些关于2233的东西，让我试试那个下载按键！ 云盘下载按钮的提取码: R8mQ（说实话用一些网盘下载器自带搜索和解锁的功能……） [/hide] 这个主题的下载地址： [bdbtn]\\[/bdbtn\\]\\[ypbtn\\]\\[/ypbtn\\]（提取码见隐藏内容） 哎呀要睡觉了，先放个视频吧，以后接着写…… [bilibili cid=”143682285” page=”1”]83991222[/bilibili]"},{"title":"更换新主题：KRATOS","date":"2020-02-02T08:50:32.000Z","url":"/2020/02/02/%E6%9B%B4%E6%8D%A2%E6%96%B0%E4%B8%BB%E9%A2%98%EF%BC%9Akratos/","categories":[["uncategorized","/categories/uncategorized/"]],"content":"更换新主题：KRATOS"},{"title":"刷题与ZZ错误记录14","date":"2020-01-18T07:06:59.000Z","url":"/2020/01/18/%E5%88%B7%E9%A2%98%E4%B8%8Ezz%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%9514/","tags":[["区间","/tags/%E5%8C%BA%E9%97%B4/"],["贪心","/tags/%E8%B4%AA%E5%BF%83/"],["策略","/tags/%E7%AD%96%E7%95%A5/"]],"categories":[["OIer之路","/categories/OIer%E4%B9%8B%E8%B7%AF/"],["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"写题目ing…… POJ-1328 Radar Installation POJ-3617 Best Cow Line HDU-4864 Task HDU-1052 Tian Ji – The Horse Racing OpenJudge百练-2443 Set Operation CodeForces-527C Glass Carving POJ-1328 Radar Installation题面【VJudge】 【POJ】 多组测试数据 给你n个坐标上的点, n &lt;= 1000 你可以在x轴上放置雷达,每个雷达的辐射半径都是d 现在问你辐射到所有的点至少需要几个雷达,如果辐射不到所有的点输出-1 总结一开始我有一个愚蠢的想法：尽可能将每一个新的点都放在圆的边缘上。 不过正解是这样的： 对于一个点A，其被圆包括的圆心的范围如红线所示： 这样我们可以将这个问题转换为区间问题：将“一个点被圆包括”修改为“圆心的区间”，这样问题就变成了：选择最少的点来覆盖所有的区间。 这样这题就变成了一道显而易见的贪心题：将所有的区间按照左端点排序，然后选择第一个区间，点的数量设为1。接着处理每一个区间：若下一个区间与目前区间有交集，那么目前区间与该区间求交集（将区间的右端点左移，因为若取该区间右端点右边，就没有一个点覆盖该区间），否则将目前区间替换为该区间，然后点的数量+1。 槽点 (CE) ：POJ不可以用万能头！ (WA) ：因为陆地实际上是在x轴的上方，所以删去了fabs操作；当我意识到_区间的右端点需要左移_时我重写了一遍。 (WA) ：因为这题支持多组数据，但我不小心把结束该组数据运算的语句写成了break！（实际上是continue） AC代码 POJ-3617 Best Cow Line题面【VJudge】 【POJ】 多组测试数据 给你一个长度为N的字符串S,输入格式是依次输入N个字符 N &lt;= 2000 每次你可以从S的开头或者结尾取出一个字符,放到一个T字符串的尾部 输出字典序最小的T字符串,每80个字符换一行输出 总结因为$n\\leq 2000$，所以这道题贪心的过程中可以用一下朴素的暴力： 比较当前剩余队列里的字母，如果一样就往中间继续迭代，哪边最终的字母小就选哪边。 AC代码 HDU-4864 Task题面【VJudge】 【HDU】 有N个机器与M个任务,每个机器或者任务都有两个属性(x,y) (N &lt;= 100000, M &lt;= 100000, 0 &lt; x &lt;1440, 0&lt;=y &lt;= 100) 机器的x表示这个机器的最长工作时间, y表示机器的等级 任务的x表示完成这个任务需要花费的时间,y表示任务的等级 每个机器只能做一个任务,机器的等级必须大于等于任务的等级 每完成一个任务可以获得500x+2y的价值(x,y是任务的x,y) 请问最多可以完成多少个任务以及在此基础上最多可以获得多少的价值 总结一开始我们可以将这些点都放在一个平面直角坐标系中，一台机器能完成的任务都位于自己的左下方： 因为价值的计算公式是$500 \\times x + 2 \\times y$，$x$ 的影响明显比 $y$ 大（而且$y \\times 2 \\leq 200 \\leq 500$），所以我们可以将任务按照$x$降序排序，为了方便后续操作，我们也可以在$x$相同时按照$y$降序排序。 我们同时从头开始遍历任务和机器，对于每一个任务，我们找出所有符合要求的机器（因为是降序排序的，所以找到一个$x$值不符合要求的机器后即可停止遍历），接下来寻找一个$y$值最接近于任务的机器（因为奖励只与任务有关，机器尽可能靠近以免浪费）。 槽点 一直读取直到结束的代码应该是这样子的： 这道题要求输出两个数，而忘记输出“最多可以完成多少个任务”。 AC代码 HDU-1052 Tian Ji – The Horse Racing题面【VJudge】 【HDU】 就是一个实现设计田忌式赛马策略的程序 总结因为题目里有这么一句话，让我迷惑了好一会儿： In this case, the weighted bipartite matching algorithm is a too advanced tool to deal with the problem. 在这种情况下，加权二分匹配算法是解决该问题的过于先进的工具。 加权二分匹配？ 实际上题目十分明显地告诉了你这其实是田忌赛马题（这标题不就是田忌赛马吗？我还饶有兴致地看完了英文版的背景描述）。我们只需要按照田忌的策略完成这道题就可以了。 简单来说，就是（按照顺序进行比较，满足了就结束比较，否则继续看下一条）： 如果田忌的最慢的马跑得比大王 最慢的马快，那么田忌就使用这匹马跟大王最慢的马比赛（最慢的马都能跑过又怎么能为了一匹最慢的马浪费了一匹快马呢？）； 如果田忌的最慢的马跑得比大王 最慢的马慢，那么田忌就要勇敢些，将这匹最慢的马拿去和大王最快的马比赛（反正这匹马怎么弄都是输还不如让他去消耗掉大王最快的马）！ 如果田忌 最快的马跑得比大王 最快的马要快，那么田忌需要用这匹马去跟大王最快的马比赛，获得胜利的机会（别的马又不一定行，拿这匹马跟慢马比赛就是浪费）！ 如果田忌 最快的马跑得比大王 最快的马要慢，田忌需要用最慢的那匹马与大王最快的马比赛，浪费掉大王的快马，为自己争取胜利的机会！ 如果田忌 最快的马跑得比大王 最快的马一样快，那么就拿最慢的那匹马去和王最快的马比赛，平局的代价跟后面输一局后大王的快马没有田忌的快马快，赢过来差不多。 AC代码 OpenJudge百练-2443 Set Operation题面【VJudge】 【OpenJudge百练】 输入一个整数N表示N个集合 接下来N行每行先输入一个整数C表示某个集合的数字个数 然后输入C个整数表示这个集合的所有元素 接下来输入一个整数q 然后是q行 每行两个整数x y 判断x 与 y是否可以属于同一个集合 如果可以输出Yes否则输出No N &lt;= 1000, C &lt;= 10000 , x, y &lt;= 10000, Q &lt;= 200000 总结这题如果使用朴素的暴力，开一个$f[a][b]=0/1$ 表示$a$元素是否属于$b$集合；对于每次询问$x$,$y$暴力枚举所有集合$s$判断$f[x][s]$与$f[y][s]$是否都为1，复杂度为 $O(q \\times N )$ ,肯定会超时。 这时我们就要考虑一下用二进制来储存状态了，对于标记某个数是否存在可以充分利用一个整数 的所有二进制位，相应二进制位为0或者1来表示某个数是否存在。bitset可以用来封装相关操作。 AC代码 CodeForces-527C Glass Carving题面【VJudge】 【CodeForces】 有一个w*h的矩形,每次要么横着切一刀,要么竖着切一刀,每次你都要回答切完后最大的子矩形的面积 输入三个整数w h n表示矩形的宽度和高度,以及操作的数量 接下来n行每行一个操作 要么是 H y (表示横着在y位置切一刀) 要么是 V x(表示竖着在x位置切一刀) 2 &lt;= w, h &lt;= 200000, 1 &lt;= n &lt;= 200000 总结这道题以前做过：传送门 一：set和multset 二：将切割玻璃改成合并玻璃，从最后往前求 最大值永远在变大 每次删去一个切割你会获得一个比较长的玻璃 AC代码"},{"title":"刷题与ZZ错误记录13","date":"2020-01-17T08:45:51.000Z","url":"/2020/01/17/%E5%88%B7%E9%A2%98%E4%B8%8Ezz%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%9513/","tags":[["区间","/tags/%E5%8C%BA%E9%97%B4/"],["贪心","/tags/%E8%B4%AA%E5%BF%83/"]],"categories":[["OIer之路","/categories/OIer%E4%B9%8B%E8%B7%AF/"],["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"因为参加休业式，再加上对贪心不大理解和熟练，所以今天做的题有些少…… OpenJ_Bailian-2376 Cleaning Shifts HDU-2037 今年暑假不AC OpenJ_Bailian-2376 Cleaning Shifts题面【VJudge】 【OpenJudge 百练】 给你N,T,再给你N个区间,求最少选择多少个区间能覆盖[1,T]之间所有的整数位置 N &lt;= 25000, T &lt;= 1000000 总结这题我一开始因为自己之前对贪心的不重视和刷题量少，所以一直没想出来QAQ。 然后就是正解了：我们先看一下这几个数据： 1 2 3 4 5 6 7 8 9 10 * * * * * * * * * * * * * * * * * * * * * * * 因为我们要求出最少的完全覆盖的区间，所以当我们知道一个子区间的起点的时候，要去取出起点最靠近上一个子区间的终点向右侧移动一格的那格且在该格子的左边的那个右端点最右的，所以我们按照子区间的起点排序 我们先去取第一个（排序后左端点最左这样可以完全覆盖开头的点）1 4 对于2 3，因为右端点小于$4$，舍去。 对于3 9和4 7，因为3 9的右端点更大（这样可以包括更大的空间），我们选择3 9。 然后是6 10，因为上一次遍历的时候这是第一个比$4$大的点，我们可以想当然地停止搜索（这就是按照左端点排序的优势——可以保证之后的每一个点都比上一个子区间的右端点大从而不能完整覆盖，判定停止的方法就简单了很多）。 接下来是新的遍历，因为这是唯一一个点了（那是当然的，最重要的是看其左端点是不是小于$9$），将其收入囊中。 因为最后一个点$10$也正好被覆盖，游戏结束。 槽点 (TLE) 犯了三个严重的错误： ai的初始化错误 终止条件bi&lt;ai应为bi&lt;=ai 忘了将b赋值给ai以至于死循环 反正就是天上掉下了个死循环。 AC代码 HDU-2037 今年暑假不AC题面【VJudge】 【HDU】 多组测试数据, 给你n个区间,求最多能选择多少个不相交的区间 n &lt;= 100 端点处可以重合 总结这题和上题一样，都是贪心题，都是区间题，不过这题的处理方式比较不一样 ： 因为是要求最多的不相交区间，所以我们取得每一个区间都应该尽可能的短且尽可能的接近。我们该如何设置贪心策略呢？ 这次因为是要找一个尽可能短的区间，所以我们可以按照右端点排序，这样我们找出来的第一个符合要求的点就可以是最短的。 而这个要求是什么呢？答案很简单，就是左端点大于等于上一个节目的右端点（因为是电视节目看完后可以立刻去换台看下一个节目）。我们一个个去找，只要找到一个这样的节目，看电视总共的时长就是最短的，可以看的电视节目就可以更多。 槽点 (WA) 第一版程序犯了两个错误： 初始化不对，因为是多组数据，及时的初始化很重要！ans变量初始值应该为$0$（天经地义），而a变量的初始值就应该是$0$（st[0]=(0,0)表示一个节目也没看过）； 错误：a=b=1; 正确：a=0;b=1,ans=0; 终止条件不对：当找遍了所有的节目却发现没有一个能看时，b的值应该是$n+1$，所以： 错误：if(b==n &amp;&amp; st[b].first &lt; st[a].second) 正确：if(b==n+1)，干净而整洁； (WA) 越改越错，因为不理解端点处可以重合，而将st[b].first &lt; st[a].second改成了st[b].first &lt;= st[a].second (WA) 将循环条件改了回去，然后修改了a的初始值。 (WA) 总算是发现了自己没有重置ans的愚蠢错误！ AC代码"},{"title":"刷题与ZZ错误记录12","date":"2020-01-16T14:14:17.000Z","url":"/2020/01/16/%E5%88%B7%E9%A2%98%E4%B8%8Ezz%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%9512/","tags":[["bfs","/tags/bfs/"],["尺取法","/tags/%E5%B0%BA%E5%8F%96%E6%B3%95/"],["折半搜索","/tags/%E6%8A%98%E5%8D%8A%E6%90%9C%E7%B4%A2/"],["模拟","/tags/%E6%A8%A1%E6%8B%9F/"]],"categories":[["OIer之路","/categories/OIer%E4%B9%8B%E8%B7%AF/"],["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"新年新气象，这是2020年的第一篇博文，也是复赛后的第一篇博文…… POJ-1753 Flip Game UVALive-2678 Subsequence AtCoder-4142 Xor Sum 2 517coding-3350 组合输出 517coding-3360 全排列输出 CodeForces-888E Maximum Subsequence HDU-1263 水果 POJ-1753 Flip Game题面【VJudge】 【POJ】 给你一个4*4的黑白棋盘,每次可以将一个棋子反转颜色,同时这个棋子的上下左右都会反转,问你最少反转几次,可以将整个棋盘变成同色的 总结这题虽说是模拟，但是我不知道为什么写了个冗长的宽搜代码……关键是我想用二进制储存但是我又忘了如何修改二进制的某一位，于是我就莫名其妙的写了二进制转bool数组，bool数组转二进制的代码…… 槽点 (CE) 忘了POJ是不支持万能头的…… AC代码 UVALive-2678 Subsequence题面【VJudge】 【UVALive】 给你n S以及n个数,求最短的连续子序列的长度使得这个连续子序列的和大于等于S 总结这题让我初步接触到了尺取法。 尺取法，亦或是双指针法……（突然发现自己竟然连这种简单的东西都讲不清楚，只能引用一下洛谷日报上Fuko_Ibuki的定义了吧qwq） 维护两个指针 l,r ,每次确定区间的左端点,让 r 不断向右移动,直到满足条件停下,维护一下答案,直到 r&gt;n 或者其它情况(视题目而定).——《尺取法小结》 而对于这题，鄙人先用二分做了一遍——$O(n\\log n)$ 然后经过指点，学会了尺取法：对于本题，因为题目中有一个重要的性质：子序列是连续的且要求取最小长度，这样用尺取法去做是最好的。这样的话我们枚举时先固定左端点，然后不断向右移动右端直到找到这样的子序列，接下来向右移动左端点的同时不去动右端点直到不满足题目条件（其实就是在枚举左端点的同时移动右端点直到满足条件，若满足条件则不移动右端点）。复杂度$O(n)$。 什么乱七八糟的直接上代码吧。 槽点 (WA) 二分做法时：没有处理不存在时的处理方法，正确情况应该是输出0。 至于尺取法我是1A的就没啥槽点了。 AC代码正解——尺取法 代码又长复杂度又大的二分算法 AtCoder-4142 Xor Sum 2题面【VJudge】 【AtCoder】 求有多少区间的xor之和等于区间的数的和 总结这题也是用尺取法，不过不同的是尺取法的时候尺取条件是两者相等时——一旦不相等也没法拓展。 还有这里利用了一个异或的性质：a xor b xor a = a，这样我们可以使用前缀和。 槽点： (CE) 又是一个不能用万能头的OJ，瞧我这一个多月不打程序的后遗症。 (WA) ans++被放在了while里造成无效状态的累赘。 (WA) 没错，我ans变量用的是printf(&quot;%d\\n&quot;)输出！（其实应该用lld）！ AC代码 517coding-3350 组合输出题面【517coding】 输入正整数N，输出由1到N这N个数取出K个（1&lt;=N&lt;=10,1&lt;=k&lt;=N）的所有组合，每行一个组合，数与数之间有一个空格，从左到右按升序，两个组合中，第一个数小的优先输入，第一个数相同，比较第二个数，后面以此类推。 总结这道题是拿来给深度搜索练习手感的，所以我就不多说了。 这道题让我知道这样的深度搜索是多么地暴力：（打T4好久没出来才找了这两道练手题） 下面的AC代码才应该是正解！ AC代码 517coding-3360 全排列输出题面【517coding】 输入正整数N，输出由1到N这N个数(N&lt;=7)的所有排列，每行一个排列，数与数之间有一个空格，两个排列中，第一个数小的优先输出，第一个数相同，比较第二个数，后面以此类推。 总结这题同上题都是用于练手的深搜题…… AC代码 CodeForces-888E Maximum Subsequence题面【VJudge】 【CodeForces】 给你最多35个整数, 选出一个子集使得这个子集的和取余m最大,求最大的余数 总结这题用到了折半枚举法，所谓折半枚举，就是一半一半枚举啦…… 对于这道题，如果枚举每一个区间，一个数有取或不取两种情况，则要做至多$2^{35}=34359738368$次枚举（绝逼会爆） 那如果我们折半呢？至多$2^{18}=262144$次就可以了！你看，不仅能在规定时间内枚举出来，还能保存下来呢！ 那么对于这道题，我们应该如何来做到折半枚举以及将两次枚举的结果统一利用呢？ 这题因为是求一个最大的模，所以我们在第一次枚举的时候只枚举前一半，使用dfs，我们只需记录第一次搜索时模出来的值就可以了，因为最多也就20多万的结果，我们可以直接保存在数组里。 做完后先将保存的数组排个序确保其有序性可以二分，然后取出其中最大的一个数作为$ans$的初始值（表示只有前半部分的情况）。 然后呢我们进行第二次dfs的时候每枚举出一个结果我们就可以二分查找出可以达到的最大结果，就是$m-sum-1$（当然如果没有我们就需要去找一个比他小的最接近的一个数。没有？不可能的，我们只需要在数组里加一个0即可，表示只有后半部分的情况），并与答案相比较取较大者。 然后——输出答案！ 槽点 (WA-4) 最初的答案绝逼是一个暴力代码（还WA而不是TLE）： (WA-4) 最初的那个dfs算法，实在是写的太烂了： 当时使用了常数无比之大的set并且还犯了一堆的错误：比如把p-(sum+ai[i])%p-1写成了p-(sum-ai[i])%p-1，然后还连带复制下来一堆同样的错误： (WA-6) 仍然是最初的那个dfs算法，实在还是太烂了： (TLE-10) 那个充满了无脑代码和stl的的算法总算是触到了他的上界。 (WA-4) 充满了决心，决定重构代码！在一番复杂的重构后，代码变短了，还变高效了！不过又要把之前的错误一个个重新补上……（这段我是用之前的测试数据测试的，并未提交到OJ，权且当在第四个点WA掉的吧） AC代码 HDU-1263 水果题面【VJudge】 【HDU】 输出一份排版格式正确(请分析样本输出)的水果销售情况明细表.这份明细表包括所有水果的产地,名称和销售数目的信息.水果先按产地分类,产地按字母顺序排列;同一产地的水果按照名称排序,名称按字母顺序排序. 总结这其实是可以用STL的map轻松解决的…… 这题我用了map套map的方式来解决的，由于没怎么用define，所以每一次定义iterator都会跟map的定义一样长……（也算是我编程方式不熟练了吧） 槽点 (WA) 看题面的时候漏掉了： 两组测试数据之间有一个空行.最后一组测试数据之后没有空行. 并且还成功地忘掉了多组数据之间的初始化：map.clear()。 AC代码"},{"title":"轩辕杀开始测试了！","date":"2019-12-28T08:18:59.000Z","url":"/2019/12/28/546/","categories":[["uncategorized","/categories/uncategorized/"]],"content":"轩辕杀开始面向fq106公测，复制以下链接查看更多信息： 轩辕杀开始征集公众测试！ 如果想为轩辕杀做些什么，也欢迎来看这篇文章： 对轩辕杀做出贡献——帮助我们的开发！ 当然，也请不要忘记简单易懂的游戏网址！（手机端和电脑端都可以，只要是现代的浏览器都能访问！） 【xys.zhtg.red】！ PLAY IT NOW!"},{"title":"对轩辕杀做出贡献——帮助我们的开发！","date":"2019-12-28T05:56:29.000Z","url":"/2019/12/28/xys-devote/","tags":[["轩辕杀","/tags/%E8%BD%A9%E8%BE%95%E6%9D%80/"]],"categories":[["菊落凤起","/categories/%E8%8F%8A%E8%90%BD%E5%87%A4%E8%B5%B7/"]],"content":"对这个项目感兴趣的同学可以为这个项目作出以下贡献！ 一、 设计角色和技能大体来说，轩辕杀里的角色分为两类： 1. 娱乐性角色： 设计出来只是为了好玩，没什么明确的定位，或者是想制作竞技性人物又不好确认战力的可以作为娱乐性人物。投稿成功的人物一般先放到娱乐性人物中，经过开发者与玩家的充分测试后才成为竞技性人物。 2. 竞技性角色： 角色设计中的精品，设计出来后可以让玩家对该角色有一个较为明确的地位，可以有强度但并不是无敌或无坚不摧，技能可以与自己或其他玩家的技能相互配合，适合作为实力的比拼的角色。 需要投稿人物的，请在该贴留言处留下你设计的角色的简明描述并附上拓展导出的压缩包（上传到百度云或者是什么其他的云盘然后附上分享链接即可）。即使你的技能也许暂时没有通过，但其他玩家可以通过分享链接帮你提提意见！ 如果你只是个菜鸟，不知道如何写程序，你可以先写下这个技能的描述，然后直接在这个帖子或者在bb的博客的相关页面（那里能更快收到回复！）回复我们，我们来考虑这个技能的平衡性并写相关代码！ 不过如果你有一定的编程能力，或者你有一定的模仿能力，那更好，你设计的技能会更快得到收录！ 技能是一个角色需要上场的最基础的东西，一个角色可以没有图片，但不可以没有技能！ 二、完善人物信息你可以提供人物的简介： 人物的称号： 以及人物的珠联璧合。 三、人物的美工增强简单来说就是提供一下人物的照片，亦或是为人物的技能或退场提供配音和台词 四、技能的电脑策略每个非锁定技能都会有一个AI，意指电脑通过调用参数来做出决策（并不是那种有着神经网络的人工智能！），然而有时候开发者忘了设置它或者设置不当导致“人工智障”的出现！你可以对角色的打法提供建议，亦或是直接提供相关代码！ 五、找BUG！若有什么问题，请直接回复在这个帖子里！ 附录：如何写一个基本的包接下来的一段内容是为这种人提示的，如果你感兴趣也可以接着看： 1.开始写一个拓展首先，我们可以先打开轩辕杀，通过这里打开设计功能： 这时你可以先修改扩展的名称，然后单击“确定”. 上面的四个按钮功能如下： 【选项】：可以对该拓展进行相关信息设置： 【重置】：如果你搞坏了这个拓展，你可以清除它（慎用）。 【保存】：将你对该拓展的设置保存进本地缓存中，重启后该拓展会被加载成保存的版本，这样你可以调试它。 【导出】：完成这个拓展后，你可以单击它来下载拓展的zip格式，你的代码投稿方式及私下分享方式就是共享这个zip文件。 你可以通过这样子将拓展带到不同的电脑： 2.制作一个技能然后单击“编辑技能”，打开如下页面： 填完了名称和描述后，可以开始写代码了。 比如说我们有这么一个技能： 【刷题】：出牌阶段，你可以多摸三张牌。 我们知道周瑜有这么一个技能： 【英姿】：出牌阶段，你可以多摸一张牌。 这时我们可以这样引用这样的代码： 然后我们可以将这里面的1改成3，实现我们的技能： 将trigger.num++;改为trigger.num+=3; trigger.num在摸牌阶段（phaseDraw）中代表摸牌数量 同理，trigger.num在伤害结算（damage）中代表伤害数量 最后点一下“创建技能”保存并返回（当然也可以点击“编辑代码”再对代码进行进一步的修改）： 3. 制作一个人物我们可以点击这里写一个人物。 人物的创建相对简单，只需把这些东西填好就可以了： 【姓名】：（必填）人物的名字，这有什么好说的。 【介绍】：对人物的介绍，你可以针对其经历和性格一番yy。 【体力】：（必填）填一个数字即可，一般技能较强力的推荐3血，技能一般的推荐4血，那种6血及以上的一般都要有一个扣血有关的负面技能，当然娱乐性人物无所谓。 【性别】：（必选）人物的性别，一般请如实填写（娱乐性人物来个不男不女或者反串不限制）。 【势力】：（必选）人物的势力，目前暂时按照三国杀里的相关势力定位，自定义的跟三国没啥关系的角色可以选择“神”（开局自选势力）。 【主公】：目前轩辕杀认为班主任、班长等领导型角色可以设置成主公，主公可直接选择该角色而不用去抽，主公最好应该有一个主公技。 【BOSS】：如果是那种逆天（三打一才能打赢的那种）的角色请选择这一项，只能在“挑战”模式中见到该角色。 【AI禁选】：若你的AI模块没写完或者电脑使用默认设置可能会被玩坏的请选择这项。 【照片】：（必选）如果你有该角色的照片，可以点击“选择头像”处理，否则请随便选择一张图片。 然后在下面选择技能（你写好的或者系统已有的），然后点击“添加”，亦或是点击“添加”跳转到之前提到的创建技能页面。 注意：点击一下已经添加的技能可以删除之。 4.投稿人物需要投稿人物的，请在该贴留言处留下你设计的角色的简明描述并附上导出压缩包（上传到百度云或者是什么其他的云盘然后附上分享链接即可）。即使你的技能也许暂时没有通过，但其他玩家可以通过分享链接帮你提提意见！ 如果你只是个菜鸟，不知道如何写程序，你可以先写下这个技能的描述，然后直接在这个帖子或者在bb的博客的相关页面（那里能更快收到回复！）回复我们，我们来考虑这个技能的平衡性并写相关代码！"},{"title":"轩辕杀开始征集公众测试！","date":"2019-12-26T07:56:02.000Z","url":"/2019/12/26/xys-test/","tags":[["轩辕杀","/tags/%E8%BD%A9%E8%BE%95%E6%9D%80/"]],"categories":[["菊落凤起","/categories/%E8%8F%8A%E8%90%BD%E5%87%A4%E8%B5%B7/"]],"content":"轩辕杀已初步搭载完毕，大家可以先一睹为快！ 电脑端和手机端均可访问！ 现在游戏！()（如果一开始就出现“游戏似乎未正常载入，是否重置游戏？”的提示，同学们可以先点击“确定”，若再次出现此窗口可以点击“取消”以跳过这个BUG，然而如果是游戏玩到一会儿出现此错误请一定回复我们！） 一些实用的小技巧1.开关其他武将和卡牌是不是还想体验三国杀其他的拓展角色或者是别的开发者开发的奇奇怪怪的角色？ 2.联机一起玩！注意到没有，这里有一个联机功能： 联机昵称和联机头像都是可以改的（头像从本地已开启的包里的角色里选择）。 单击“启”一睹为快！ 单击“连接”进入大厅： “在线”栏可以查看当前在线的玩家，并且可以给自己发送一个“状态”（临时的个人签名或者联系方式），每两次发送状态之间相距10秒。 “约战”栏对全服玩家可见，你可以把它当成是一封战书，表示你会在那个时间点创建房间开始游戏，以缩短无意义的闲逛时间！你也可以点击已有约战增加它的热度！ 然后点击一个空房间创建房间，进入房间页面： 别的玩家可以看见你创建的房间： 房主可以对设置进行微调（但不能修改模式），也可是设置旁观相关设置（单击“更多”后显示）： 其他玩家可以查看但不能修改信息： 对于房主来说，座位是可以点的，可调整人数的模式点击空位可以减少或增加总人数；有人的座位点了他可以将他踢出房间，并无法再加入。 房主点击“开始游戏”即可开始游戏（不足人数将使用电脑补上），期间将禁用作弊功能。你还可以发送一些消息甚至是表情包： 不过服务器采用点对点连接方式，所以游戏的相关运算都是在房主的那边进行的，网速也是由房主和服务器的网速共同影响，所以想做房主的最好找一台网要好性能正常的手机或电脑。 3. 官方外挂！外挂只能在单机模式使用，联机时会自动禁用： “控制”界面可以进行一些快速操作（用于测试各种技能的实现） “命令”则可以直接输入js命令进行进一步调试： "},{"title":"思维导图——经济与生活","date":"2019-12-21T08:13:08.000Z","url":"/2019/12/21/mm-zzbx1/","categories":[["好好学习","/categories/%E5%A5%BD%E5%A5%BD%E5%AD%A6%E4%B9%A0/"],["菊落凤起","/categories/%E8%8F%8A%E8%90%BD%E5%87%A4%E8%B5%B7/"]],"content":""},{"title":"【转载】要期末考试啦！","date":"2019-12-20T10:55:22.000Z","url":"/2019/12/20/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E8%A6%81%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95%E5%95%A6%EF%BC%81/","categories":[["菊落凤起","/categories/%E8%8F%8A%E8%90%BD%E5%87%A4%E8%B5%B7/"]],"content":"杭十四中二〇一九学年第一学期期末测试说明 一、考试性质：面向两校区全体学生和教师的验收性测试。 二、考试科目： 高一：语、数、英（含听力）、物、化、生、政、史、地、技术 高二：语、数、英（含听力）、物（选）、化（选）、史（选）、地（选） 高三：语、数 三、考试范围：各备课组根据教学计划确定，高三按统测要求。 四、考试日期： 时间 高一 高二 1月11日（周六） 8:00—9:40 语文 10:20—11:20 生物 13:00—14:00 政治 14:30—15:30 地理 1月13日（周一） 8:00—9:30（高一） 8:00—9:40（高二） 数学 语文 10:20—11:20（高一） 10:20—11:50（高二） 历史 历史（选） 14:00—15:00（高一） 13:30—15:00（高二） 技术 地理（选） 15:30—16:30（高一） 15:20—16:50（高二） 物理 化学（选） 1月14日（周二） 8:00—9:30 英语 数学 10:20—11:20（高一） 10:20—11:50（高二） 化学 英语 13:30—15:00（高二） 物理（选） 高三统测时间： 日 期 考试科目 考试时间 1月13日（周一） 上午 语文 8:00-10:30 下午 数学 13:00-15:00 五、考试时间与卷面分值： 考试时间：高一、高二年级语文为100分钟，高一政治、高一历史、高一地理、高一物理、高一化学、高一生物、高一技术为60分钟，其它学科均为90分钟。高三年级按市统测要求。 卷面分值：高一、高二年级所有学科满分均为100分。高三年级按市统测要求。 六、命题要求： 1．高一、高二年级各卷难度系数控制在0.75（±0.05，以凤起校区为依据）。高一参照统测或学考要求命题，高二参照统测或选考要求命题。 2．命题任务原则上由凤起校区相关备课组承担，有命题任务的各备课组在12月17日（周二）前将命题教师名单报凤起教学处。 3．请各备课组长于12月17日（周二）前详细填写命题要求，并将近期练习等相关材料交对应备课组命题老师。 4．命题教师需填写命题细目表，细目表中得分情况及反思可留在考试后总结时再填，其余内容必须详细填写。 5．本次命题由命题者一人负责，取消试卷审核环节。 序号 试卷 命题 1 高一语文 高二语文备课组 2 高二语文 高一语文备课组 3 高一数学 高二数学备课组 4 高二数学 高一数学备课组 5 高一英语 高二英语备课组 6 高二英语 高一英语备课组 7 高一物理 高二物理备课组 8 高二物理（选） 高一物理备课组 9 高一化学 高二化学备课组 10 高二化学（选） 高一化学备课组 11 高一生物 高二生物备课组 12 高一政治 高二政治备课组 13 高一历史 高二历史备课组 14 高二历史（选） 高一历史备课组 15 高一地理 高二地理备课组 16 高二地理（选） 高一地理备课组 17 高一技术 高二技术备课组 七、阅卷要求： 高一、高二年级：本次考试所有科目均采用海云天3.0网上阅卷系统，各备课组阅本年级试卷。 高三统测阅卷地点：语文——杭九中，数学——杭高贡院校区，阅卷均从1月15日上午8时开始，要求阅卷教师准时报到，不得随意缺席和请假，若有特殊情况需要请假，由学校出具证明，并另派该学科教师参加。 八、交卷时间安排： 试卷、答题卡及评分细则1月2日（周四）中午12时前送交凤起校区教学处，联系电话：13968181116。 九、巡回： 考试不设巡回人员。 十、试场安排： 由教学处负责落实。 十一、其他 各年级学分认定工作在2020年1月16日17时前完成。 教学处 2019年12月13日 附件：试卷电子稿说明 一、纸张设置 项目 设置值 纸张大小 A4 方向 纵向 页边距 试卷 上 1****厘米 下 2****厘米 左 1****厘米 右 3****厘米 页眉 1厘米 页脚 1.5厘米 制表位 1 2字符 2 12字符 3 22字符 4 32字符 绘图 网格 水平间距 0.01字符 垂直间距 0.01行 二、其它说明 1．试卷问卷卷尾注明命题者、校对者姓名。 2．问卷及答卷抬头字体为：黑体、四号，样式如下： 杭十四中二〇一九学年第一学期期末测试 高×年级××学科试卷 3．问卷说明部分需写明考试日期及时间、试卷页数、分值等相关信息，数学、物理、化学试卷上必须明确说明能否使用计算器。试卷结尾处需注明命题人。说明部分字体为：宋体，小五号。 4．问卷正文部分字体为：宋体（英语学科Times New Roman）、五号，特殊说明部分字体为：楷体、五号。 5．问卷在页脚处需注明卷面信息，字体为：宋体、小五，样式如下： ××试卷·第×页（共×页） 6．试卷所有用图版式应为“嵌入型”或“四周型”。 7．数学公式编辑器使用Mathtype，Size设置为11。 8．上交电子稿时按问卷、答题卡及评分标准分成三个文件，文件命名规则为：××试卷高×，××答题卡高×，××评分细则高×。（要求WORD版和PDF版两种版本同时上交） 9．在教学处FTP中有各学科答题卡格式文件，可供下载使用。"},{"title":"准备期末考试ing","date":"2019-12-16T10:49:18.000Z","url":"/2019/12/16/%E5%87%86%E5%A4%87%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95ing/","categories":[["uncategorized","/categories/uncategorized/"]],"content":"准备期末考试ing"},{"title":"浅谈分块在信息学算法的应用","date":"2019-12-04T07:48:52.000Z","url":"/2019/12/04/yingcai-lunwen/","categories":[["OIer之路","/categories/OIer%E4%B9%8B%E8%B7%AF/"],["算法备忘录","/categories/%E7%AE%97%E6%B3%95%E5%A4%87%E5%BF%98%E5%BD%95/"]],"content":"引语在信息学奥赛或其他的算法应用中，我们常常会用到分治算法的思想来优化我们的程序。分治算法，顾名思义，就是“将一个规模为$N$的问题分解为$K$个规模较小的子问题，这些子问题相互独立且与原问题性质相同。求出子问题的解，就可得到原问题的解。**[1]**”。分块算法就是一种优秀的通过分治思想来优化的算法。分块算法不仅常数与线段树相比非常的小，而且块内可以嵌套其他数据结构，拓展性极强。 从基础中看分块引题：给出一个长为$n$的数列，以及$m$个操作，操作涉及区间加法，单点查值。 以下默认$n$是$10^5$级别的数。 分析：这是一道能用许多数据结构优化的经典题，可以用不同数据结构来进行优化，比如说线段树：只要操作于询问区间能快速合并，只要操作与询问满足区间性质，线段树就可以以时间复杂度为$O(n\\log n)$出色地完成这道题。 然而，线段树最明显的弊端就是代码太长、常数太大，若对于线段树不是很熟悉可能要调试很长时间才能调试出一个满意的结果。 这时，在数据不太大的情况下，我们可以用分块算法解决这个问题。 分块的初步介绍分块算法，就是将一个序列中每$m$个元素打包成一个整体（块），这些块没有相交的部分，然后对这个整体进行维护，只记录这个整体的有关信息，这样当我们需要访问整个块中的元素时，我们可以直接把维护好的信息直接调用，已达到优化算法的目的。 比如说，对于一个数组$ai$，里面有初始值为$1,2,3,…,99,100$的$100$个数，现在我们要求找出第40个数的值，我们可以直接调用$ai[40]$，然而当我们需要区间修改第$a=32$个数到第$b=56$个数，使它们都加上$c=10$。如果使用朴素算法，我们需要直接从第$32$个数开始遍历每一个数到第$56$个： 这个朴素算法的时间复杂度为$O(NM)$（$M$为查询次数）若a,b的范围足够大，在大量的修改和查询下，这个时间复杂度就有些不可接受。 这时我们可以使用分块算法，此处我们可以将$m=5$个元素分为一块，预先维护好块中所有元素的和，这样共把区间分为$\\lfloor \\frac{m}{n}\\rfloor$个完整的块。对于一个查询，查询区间内有若干块完整的块，并且两侧还有不完整的块，这些块只有一部分包含于区间内，不能以整一块的方式来直接获取这一块的和。 若$m=5$，则区间被分为如下几块： 序号 1-5 6-10 …… 96-100 区间中的每一个数作为整体编辑时的增加值（以下简称为“增加值”） 0 0 …… 0 对应元素 1,2,3,4,5 6,7,8,9,10 96,97,98,99,100 对于上述的$a=32,b=56,c=10$的情况，我们可以将修改变成这样： 序号 32-35 36-40 …… 51-55 56 增加值 0 10 10 10 0 对应元素在列表中的值 32 +10=42,33 +10=43,……,35 +10=45 36,37,38,39,40 51,52,53,54,55 56 +10=66 我们在对区间整体做加法操作时，涉及到了{31-35}、【36-40】、【41-45】……【51-55】、{56-60} 这些块。用“{}”注明的块因为不完全包括在区间内，所以我们要对这些元素进行逐一修改；但是对于用“【】”注明的块因作为一个整体被调用，所以我们可以不去逐一修改块中的每一个值，而是打上一个标记，注明区间中的每一个数作为整体编辑时的增加值，这样我们就可以省去了对于完整的块的逐一修改操作。对于一个点的值的查询，我们可以直接使用“块中记录的‘增加值’+自身在修改中被修改成的值”来求得单点的值。 分块的初步运用 搬寝室 [2] 一段走廊在一定时间内只允许一位同学通过（从$1$寝室到$5$寝室与从$2$寝室到$4$寝室是不能同时进行的；为了方便，从$1$寝室到$4$寝室与从$4$寝室到$5$寝室也是不能同时进行的；原寝室和目标寝室相同也是合法的）; 我们假定每次搬东西所需要的时间都为$1$. 求： 从开始搬东西起，最少要经过多少时间他才能到绿茵场上。 数据规模：对于$30\\%$的数据，$N\\leq 20,M\\leq 20$ 对于$60\\%$的数据，$N\\leq 2000,M\\leq 2000$ 对于$80\\%$的数据，$N\\leq 100000,M\\leq 200000$ 对于$100\\%$的数据，$N\\leq maxlongint,M\\leq 200000$ 对于这道题，我们可以发现，答案就是所有寝室被经过的次数中的最大值。此处重点是最大值的计算，所以此处将证明略过。[3] 对于此处的计算，我们定义两个数组stk[]（保存一个块的‘增加值’）和ss[]（保存具体的每一个数，用于不完整的块的逐一修改）。我们要一一修改的区间其实就是$[a , (\\frac{a-1}{M+1})\\times M]$ 和 $[(\\frac{b-1}{M}) \\times M+1,b]$，并且对于每一个数$i$，其对应的块的序号应为$\\frac{i-1}{M}+1$，所以对于区间内的整块，我们可以直接修改$[\\frac{a-1}{M}+2, \\frac{b-1}{M}]$的块标记，最后再通过ans = max(ans,ss[i]+stk[(i-1)/DN+1]);求得最终的答案。 使用分块储存答案 简单的问题统计$[a,b]$内素数的个数。 $1\\leq a \\leq b \\leq 100000000$。 大多数人一开始的反应就是通过简单的素数筛来求出$[1,b]$内的所有素数然后加起来。先不说统计所有的素数时需要一个bool flag[100000001]，数组很大不一定满足题目的空间限制，而且在极端情况下，就算我们只是从$99999999$算到$100000000$，为了素数筛我们也要从2开始筛素数。这时候，我们可以事先维护好每一块区域内的素数和，然后在需要的时候直接调用。但是对于区间两边的不完整的块又该如何处理？我们可以把筛分成两部分，一部分用于筛出合适的因数，一部分用于在选定的范围内找出合适的数。 分多少块比较合适？分块的数量会直接影响到分块的效率问题，如果每一块中的序列数量过大，那么对于两边的不完整的块逐一修改常数将会变大；而如果分块的数量太多，那么对于分块的处理常数也会变大。经过实验，当分的块数在$\\sqrt{n}$时效率最高。 相关的数学证明引用了HeRaNO的《关于分块时间复杂度的证明》**[4]**： 分块的相关拓展询问区间内小于某个值 $x$ 的元素个数有了上一部分的经验，我们可以发现，数列分块问题实际上有三样东西需要我们思考： 不完整的块的$O(\\sqrt{N})$个元素怎么处理？ $O(\\sqrt{N})$个整块怎么处理？ 要预处理什么信息（复杂度不能超过后面的操作）？ 我们先来思考只有询问操作的情况 不完整的块： 枚举即可。 整块： 要在每个整块里寻找小于$x$的元素数量时，我们不得不要求块内元素有序，这样我们可以通过二分法对块内排序。 我们可以进行如下预处理：将所有分好的块内部进行快速排序，复杂度$O(n\\log \\frac{n}{m})$，每次查询需要在$\\frac{n}{m}$个块内使用二分法，在不完整的$2m$个元素里直接枚举求解。 这样总的复杂度为$O(n\\frac{n}{m}\\log \\frac{n}{m}+nm)$，如果$m=\\sqrt{n}$的话，总复杂度为$O(n\\sqrt{n}\\log n)$，在实际测试时$m$取$2\\sqrt{n}$左右时效果更好。 如果算上区间加，维护一个标记$tag$，对于不完整的块需要逐一枚举并且重新排序，复杂度略；对于完整的块，二分查询小于$x-tag$的元素个数。 询问区间内小于某个值 $x$ 的前驱（比其小的最大元素）接着上一个部分的解法，其实只要把块内查询二分稍作修改，对于一个块保留块内的前驱，最后一起比较即可。 在块内插入其他数据结构上一部分实际上具有一个启发意义：可以在块内维护其他的数据结构使其更具有拓展性，比如对于查找“比其大的最小元素”，在分好的块内放一个$STL$中的set，这样我们可以直接调用upper_bound()来查询，降低时间复杂度。 区间加法，区间求和这一部分不完整的块还是枚举求解，不过我们可以对完整的块进行预处理求和，用类似于标记的做法，直接根据块内元素计算增量。 结语综上所述，分块算法拥有常数小、可拓展性强等优点，虽然分块算法相对于其他算法解决特定问题时间复杂度可能相对较劣，但是嵌套其他数据结构等方法可以让分块从一个朴素的根号算法升格为一个通用性的解题方法。 备注：文章中引用的参考文献 及 相关备注 分治算法定义 (分治算法/3263297) 后山OnlineJudge P1400 搬寝室 (move) () 证明其实也不复杂，经过同一个寝室的任务不能同时进行，所以完成所有经过次寝室的任务至少要过其被经过的次数个单位的时间。 HeRaNO 分块的复杂度证明 () 致谢 及 其他参考文献：感谢hzwer在该课题上对我的启发和指导，感谢李建江、班轩等各位竞赛教练对我的培育与支持。 罗剑桥《浅谈分块思想在一类数据处理问题中的应用》 董永建 董欣然等 《信息学奥赛一本通·提高篇》 搬寝室 相关代码： "},{"title":"默写线段树的艰难历程","date":"2019-11-26T05:08:32.000Z","url":"/2019/11/26/%E9%BB%98%E5%86%99%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%9A%84%E8%89%B0%E9%9A%BE%E5%8E%86%E7%A8%8B/","categories":[["OIer之路","/categories/OIer%E4%B9%8B%E8%B7%AF/"],["刷刷真题","/categories/%E5%88%B7%E5%88%B7%E7%9C%9F%E9%A2%98/"]],"content":"纯日志型的，不对线段树做什么讲解，毕竟我爱分块 ~~ 第一次尝试2019.11.25 晚 第二次尝试2019.11.26 中午"},{"title":"刷题与ZZ错误记录11","date":"2019-11-15T12:47:27.000Z","url":"/2019/11/15/%E5%88%B7%E9%A2%98%E4%B8%8Ezz%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%9511/","categories":[["OIer之路","/categories/OIer%E4%B9%8B%E8%B7%AF/"],["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"一切转眼成过眼云烟涉及题目： 十四中 P1061 瞬移 (blink) 十四中 P1062 搬寝室 (move) 十四中 P1063 跑跑卡丁车 (popkart) 十四中 P1061 瞬移 (blink)总结这就是一个裸的最小生成树。 首先，这题是一个无向图，适合拿来找最小生成树。 然后，每探索到一个点后，接下来可以从任意一个点继续探索（也就是说从一个已探索的点到另一个已探索的点不需要耗费危险值）。 最后，这题求的是危险值的最小值。 显然，我们可以只开$n-1$条边连接图上的$n$个点，形成一个最小生成树。 AC代码 十四中 P1062 搬寝室 (move)总结T2:思考一会应该可以发现答案就是经过所有寝室的次数中的最大值，那么： 60分：开个一位数组扫描，O(NM) 80分：线段树，O(MlogN) 100分：离散化后线段树，最多出现2M个寝室，时间复杂度o(MlogM) 其实用分块也可以 AC代码 P1063 跑跑卡丁车 (popkart)总结T3: 30分：各种乱搞 60分：利用异或的性质 X xor X=0,0 xor X=X，那么有偶数个NPC的位置相互抵消后就变成0，最后的X值就是位置。O(T_NPC个数) 100分：题目中给了一个很好的性质：只有一个位置上有奇数个NPC，先求出累加和01序列，然后我们可以二分这个位置所在的区间，设K为二分的次数，则复杂度为O(T_K*N)，K不会超过32次。 AC代码"},{"title":"育才的信奥史 备份文件","date":"2019-10-29T12:45:54.000Z","url":"/2019/10/29/%E8%82%B2%E6%89%8D%E7%9A%84%E4%BF%A1%E5%A5%A5%E5%8F%B2-%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6/","categories":[["OIer之路","/categories/OIer%E4%B9%8B%E8%B7%AF/"],["回忆东南","/categories/%E5%9B%9E%E5%BF%86%E4%B8%9C%E5%8D%97/"]],"content":"前情摘要鄙人已从大育才帝国强制转出国籍，去了遥远的美洲的菊花种植园，鄙人毕竟是在初三的时候才做成现有OJ的版本（之前采用hustoj内核，因为是我不熟悉的php语言写的，所以拓展功能较为困难，调试期的爆炸在所难免）。 自从我转到菊花种植园后，鄙人的OJ才在czy的帮助下开始在同学圈内广为传播，考虑到现在这个OJ现在主要为菊种人民服务，就把我以前的东西放博客里好了。 NOIP2015，大育才帝国（育才）第一次冲击普及组复赛成绩啥的不重要，毕竟是第一次 姓名 成绩 性别 就读学校 年级 指导教师 奖级 吴佳晨 140 男 杭州育才 初二 三等奖 NOIP2016，大育才帝国（育才）第二次冲击普及组复赛同学年陈博涵成为育才毕业生中第一个获得NOI金牌+集训队+保送清北的人 姓名 成绩 性别 就读学校 年级 指导教师 奖级 麻一州 270 男 杭州育才 初三 吴华丰 二等奖 NOIP2017，大育才帝国东南战队登场帝国信奥更添一分力量 姓名 成绩 性别 就读学校 年级 指导教师 奖级 方俊杰 210 男 杭州东南 初三 孙伯桦 二等奖 梁越 130 男 杭州东南 初二 孙伯桦 三等奖 余尚阳 115 男 杭州育才 初三 吴华锋 三等奖 NOIP2018，大育才帝国的锦绣也来到了复赛帝国第一次出现普及组省一 （还是2个） 而且东南出现帝国第一个女性省级奖项获得者。 姓名 成绩 性别 就读学校 年级 指导教师 奖级 梁越 252 男 杭州东南 初三 孙伯桦 一等奖 黄晨衍 246 男 杭州育才 初二 吴华锋 一等奖 李泽 204 男 杭州锦绣 初一 郜海豹 二等奖 周翔 194 男 杭州东南 初二 孙伯桦 二等奖 林琅 142 女 杭州东南 初三 孙伯桦 二等奖 方博真 104 男 杭州育才 初三 吴华锋 二等奖 祝东南和育才系的同学越战越勇，创立育才信奥的下一个辉煌 说明以下记录如未特殊说明均以育才系杭州三校统计，未标注 女生 的记录表其实不限男女（不过好像目前没出过女性夺下男女记录的例子） 空着的说明还没有人创下该类记录或无法考证或因为本人懒留待后人编辑 开天辟地类记录（按历史最早统计）记录 保持记录者 时间 特殊说明 参加复赛 [育才]吴佳晨 2015 存疑（无法在OIerDb中查到这个人） 夺得省一 [育才]黄晨衍、[东南]梁越 2018 同时有两个 参加提高组复赛 此处指初中阶段参加提高组比赛 夺得提高组省一 此处指初中阶段参加提高组比赛 女生记录 保持记录者 时间 特殊说明 参加复赛 [东南]林琅 2018 夺得省一 最好战绩类记录记录名 保持记录者 时间 成绩 特殊说明 初赛成绩最高者 懒，留待后人编辑 复赛成绩最高者 [育才]麻一州 2016 270 提高初赛最高者 此处指初中阶段参加提高组比赛 提高复赛最高者 此处指初中阶段参加提高组比赛 OI竞赛成就最高者 [育才]陈博涵 2016 CTSC银牌 创下该记录时他是学军人 女生记录名 保持记录者 时间 成绩 特殊说明 初赛成绩最高者 懒，留待后人编辑 复赛成绩最高者 [东南]林琅 2018 142 提高初赛最高者 此处指初中阶段参加提高组比赛 提高复赛最高者 此处指初中阶段参加提高组比赛 OI竞赛成就最高者"},{"title":"刷题与ZZ错误记录10","date":"2019-10-12T06:38:41.000Z","url":"/2019/10/12/%E5%88%B7%E9%A2%98%E4%B8%8Ezz%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%9510/","categories":[["OIer之路","/categories/OIer%E4%B9%8B%E8%B7%AF/"],["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"马上就初赛了，听说40选择题，慌……十四中的自有OJ（oj.zhtg.red）已经开始试运营！目前现供校内同学实验，欢迎加入！ 涉及题目： 十四中 P1049 LGTB 与偶数(even) 十四中 P1050 LGTB 与序列(seq) 十四中 P1049 LGTB 与偶数(even)总结 标准题解考虑到连续的一段奇偶性相同的数字才能被删除，所以直接贪心即可，用栈实现 我就是不用栈！（其实我并没有想到栈） 其实我是用链表的（不过我还是觉得用栈会方便一些吧） AC代码：链表法： 摘自yaohan大佬的堆栈法： P1050 LGTB 与序列(seq)总结 标准题解考虑到$a_i$最多变成$58$，如果变成更大的数还不如变成$1$，而且$58$之内只有$16$个素数 并且可以证明对于两个数$a &gt; b$，变成的数$A &gt;= B$ 所以最多只有$16$个最大的数变成素数，其他的数都会变成$1$ 所以直接对于前$16$个数$dp$，$dp[i][j]$代表到第$i$个数，哪些素因子被用过了，花费最少为多少。枚举一个数来转移即可 1.分析题面首先，题目数据中限制了$1 \\leq a_i \\leq 30$，让我们康一康$1$和$2$ 到 $60$之间的素数： 数据 $1$ $2$ $3$ $5$ $7$ $11$ $13$ $17$ $19$ 与最大值30的差值 $29$ $28$ $27$ $25$ $23$ $19$ $17$ $13$ $11$ 数据 $23$ $29$ $31$ $37$ $41$ $43$ $47$ $53$ $59$ 与最大值30的差值 $7$ $1$ $1$ $7$ $11$ $17$ $13$ $23$ $29$ 看，我们发现题目中每个数与可取的质数之间的差值最大可以取到$28$，从质数$59$开始差值就大于等于$29$了，还不如直接取$1$来的小。因此，我们可取的质数实际上只有$16$个。 还有，题目中有这么一句话：使得 $B$ 中的任意两个数都互质。因此我们从上面每次取的质数都不能重复，这意味着我们只要取$16$个数变成上面说的可以变的质数，并且把别的可能存在的其他数都变成$1$即可取最小值。 然后我们看一下这四个数：$A$中要变成质数的数$A_1$变成$B_1$，$A_2$变成$B_2$（$A_1 \\leq A_2$）。则差值$\\mid A_1 - B_1 \\mid + \\mid A_2 - B_2 \\mid$。 让我们假设$A$中有$21,32$，$B$中有$29,31$，则： 21 32 29 8 3 31 10 1 可以发现当$A_1 \\leq A_2$时，$B_1 \\leq B_2$。 至此，我们就可以得出解题方法：将所有的数从大到小排序，然后取最大的$16$个数与可选的$16$个质数一一配对，其他的数变成$1$即可。 2.设计状态这种题怎么说呢，关于这$16$个质数只有选和不选两种状态，对于前面的$16$个数最多只有$2^{16}=65536$种状态，一个状压动归足矣。 $dp[i][j]$代表对于前$i$个数，选择了$j$状态的质因子的最小差值。 3.细节处理AC代码"},{"title":"刷题与ZZ错误记录9","date":"2019-10-07T05:51:52.000Z","url":"/2019/10/07/%E5%88%B7%E9%A2%98%E4%B8%8Ezz%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%959/","categories":[["OIer之路","/categories/OIer%E4%B9%8B%E8%B7%AF/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"涉及题目： 洛谷 P5022 旅行 洛谷 T102266 LGTB 玩扫雷(mine) 洛谷 T102267 LGTB 学分块(divide) 洛谷 P5022 旅行总结参考了某位志在f**kccf的Ganshuaige大佬的题解。 这题其实删边+爆搜，但一开始我没有经验（甚至连题目都没看几眼），所以我被这题吓住了。 其实题干中的几个要点告诉我们这题可以简单的使用搜索来解决： 1. 从任意一个城市出发，通过这些道路都可以到达任意一个其他城市。 说明这是一个连通图（至少有n-1条边，也就是一个树，才能连通吧？）。 2. 两个整数 $n,m(m≤n)$ 说明结合①条件来看，这题的非重复边数$M$只有两种情况：$M=n-1$或$M=n$。 3. 不存在两条连接同一对城市的道路，也不存在一条连接一个城市和它本身的道路。 说明边不会有重复，你不需要做预处理删边，题干中的$m=M$。 好了，可以开搜了。 AC代码 T102266 LGTB 玩扫雷(mine)总结就是一模拟 AC代码 T102267 LGTB 学分块(divide)总结我感觉做这题获得了许多：我学会了在linux下用python写数据生成器和对拍器！（删） 这题总体是用二分+复杂判断。 AC 代码"},{"title":"刷题与ZZ错误记录8","date":"2019-09-30T15:59:26.000Z","url":"/2019/09/30/%E5%88%B7%E9%A2%98%E4%B8%8Ezz%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%958/","categories":[["OIer之路","/categories/OIer%E4%B9%8B%E8%B7%AF/"],["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"涉及题目： 洛谷 P2341 [HAOI2006]受欢迎的牛【模板】强连通分量 洛谷 T100593 学英语(English) 洛谷 T100595 相等的集合(set) 洛谷 T100596 三星游戏(star) 洛谷 P2341 [HAOI2006]受欢迎的牛【模板】强连通分量总结接下来将会有一道题用到强联通分量，翻翻之前的做题记录就发现这到模板题当时注释还算详细，想放这里复习一下。 AC代码 洛谷 T100593 学英语(English)总结这就是一道模拟题，像我这种粗枝大叶的人写完后懒得调试了，输了几个样例就把它放在了一边，结果1A了！震惊！（好吧就是一模拟有什么好震惊的）题解上的这句话，我根本就没考虑！真是个粗枝大叶的人。 每次找一个最大的词（million&gt;thousand&gt;hundred），左右做一下 我主要是偷个懒，因为题目中已经给你每个单词逗号逗好了，直接加个双引号放进数组然后塞进map里！ AC代码 洛谷 T100595 相等的集合(set)总结这题题解说的倒是轻巧： Set 强连通分量 强连通分量缩点之后看入度为0的点和出度为0的点的个数，较大值即为答案。 显然的吧，肯定是将出度为0的点连到出度为0的点上，让每个点都在环上。 我特意给了30多分不会写scc的同学得分的。。都得了吧。。 好吧就是这样，强连通分量我忘得差不多了，所以在一开始放了个牛的题目。 手动温习强连通分量： 1. 看《一本通提高篇》上面的讲解； 2. 膜一膜大佬的洛谷日报或者其他你觉得好的强连通讲解博客 为什么要用到强连通呢？因为题面有这样一组条件： 如果 $A∈B，B∈C，C∈A$，那么有 $A=B=C$ 成立。 也就是说如果某些条件能组成一个环，我们通过强连通将它们缩成一个点（如果$A=D$，你明显不需要继续求$D=B,D=C$才得出$A,B,C,D$都相等） 然后就是所谓的“显然”。 假设我们有这样一组包含关系： 经过Tarjan求强连通后（强连通均被用红圈标注）变成了这样： 此时我们该怎样将这两个分离的有向无环图连成一个环呢？ 为了明显，我们先把入度为0的点标成绿的，把出度为0的点标成黄的。 “上色”之后这张图明显有两个入度为0的点，两个出度为0的点。我们只要轻轻一连就出了一个环，大功告成： 那遇上了出入度为0的点不一致的情况怎么办？就比如下面这种情况（注意蓝色的那条边表示于上一种情况相比不一样的地方） 简单，就像上图这样先一对一连起来，多出来的那个黄点其实无论连到那个绿点都会成环（自己思考）。所以入边与出边不同时，输出多的那一个。 完 槽点这次考试部分分给的够足，所以以下简单粗暴的骗分程序能拿32分： AC代码（为什么我这人考场上就一傻子,看题解就1A了呢？） 洛谷 T100596 三星游戏(star)总结考场上我和czy什么方法都想过，当然包括贪心。不过我这种蒟蒻只能写一个骗分代码骗个Too Bad（只有十分是真的很Too Bad），czy大佬也是没想出满分代码。 贪心 每次能打2星就打2星的，不能打就打1星的，比较显然。 这题解不负责任……我照着它的想法打也就得了45分。不过，这底下竟然有这么长一串负责任的英文题解！让我们逐段分析一下吧： This problem was an interesting one to create. In the actual game Kingdom Rush, there are three stars per level, “challenge” levels, and you can’t try level 2 until you’ve beaten level 1 with at least one star. Coming up with a problem that was solvable, while maintaining the same feeling as the game that inspired it, was a balancing act. 没啥有意思的，就是告诉你这个游戏的背景和balabala地称赞这个游戏（机制）的平衡性。 We solved this problem with a greedy algorithm. At every step of the algorithm, Ryan will make a decision about which level to play, and his decision will be based simply on the properties of the levels available, and what he’s done so far. 这里告诉我们要贪心，并说明Ryan（题面中的小$G$，不过接下来随英文原文解释这个名字）每作出一个关于玩哪个等级的决定时，简单地基于可用级别的属性和他目前拿到的star数量。 First, let’s observe that Ryan should only complete a level if he’s never completed it before, or if he can go from a one-star rating to a two-star rating. There’s simply no point in beating a level otherwise. When we’re talking about levels below, we’ll ignore levels that he shouldn’t complete for this reason. 首先，让我们暗中观察一下Ryan，发现Ryan只会选择一个他从未通过关或是只拿了一颗星可以拿第二颗星的关卡。接下来，我们将无视那些不符合条件的选择。 Second, if Ryan ever reaches a state where he can’t complete any of the remaining levels, then he is “TOO BAD” to beat the game. This will happen independent of the order in which he completes the levels. 无论Ryan怎样选择关卡，只要他在某些情况下没关卡可以选了，那就太Too Bad了。明显这跟你选择关卡的顺序无关。 Third, if Ryan can complete a level with a two-star rating, he should do it immediately. There’s no reason for him to wait: he can earn those two stars (or one star) with one level completion either now or later. If there are multiple levels with two-star ratings that Ryan could complete, he should choose one arbitrarily; he can do the other one next. 如果Ryan已经有能力直接完成一个二星关卡，他会毫不犹豫地去通关（反正晚得那颗五角星还不如早点得到它；如果让他磨磨蹭蹭地先搞一星关卡还要多玩一次游戏，浪费时间，浪费生命，浪费青春！）。如果有许多这样的关卡可以选，随便选一个吧（反正早晚都可以做，还不如早点攒星星去完成接下来的任务）。 Now we’ve covered all situations except for one: when the only levels Ryan can complete are levels that he can complete with a one-star rating. Consider two levels like that, level 0 and level 1: $a_0\\space b_0$ $a_1\\space b_1$ The values of $a_0$ and $a_1$ don’t matter: by assumption, Ryan has at least that many stars already. Let’s assume without loss of generality that $b_0 &lt; b_1$. Which level should Ryan complete first? 好了，当Ryan面前的只有一星关卡（两星的没星星了，只能先打一星攒星星）时，我们来考虑这样两个Level：$a_0\\space b_0$、$a_1\\space b_1$（此处令$a_0&lt;nowStar,a_1&lt;nowStar$，即$a_0,a_1$以Ryan当前的能力可以随便选）,但如果$b_0&lt;b_1$，Ryan该选哪个？ Let’s remember that Ryan’s objective is to complete levels the minimum number of times. In the worst case, it will take Ryan 4 completions to finish those two levels: two to get him a one-star rating in both levels, and two more to get him a two-star rating in both levels. But earning stars from these levels (or other levels) might allow him to complete one of them with a two-star rating without having to complete it with a one-star rating first. 记住，Ryan的目标一直是以最少的游戏次数全部通关。我们可以通过4次操作来完成这两项任务：先完成$L_{1(1)}$和$L_{2(1)}$，再完成$L_{1(2)}$和$L_{2(2)}$。不过如果Ryan足够幸运，他可以先去完成$L_{2(1)}$，转头一看，加上这颗星星后，Ryan正好可以完成$L_{1(2)}$（记住$b_0 &lt; b_1$，的确你不能忽视加上一颗星星后，Ryan可以完成第一关的二星关卡并无视第一关一星关卡，而不足以使Ryan完成第二关的二星关卡）！然后靠着这两颗星星Ryan又可以完成$L_{2(2)}$了！只需玩三次游戏的连环反应就是那么地不可思议！ Here’s a possible series of events. Assume Ryan starts with $S$ stars. We’ll decide later whether $k$ is $0$ or $1$: 1. Ryan completes level $k$ with a 1-star rating and earns $1$ star. 2. Ryan completes other levels and earns $s$ stars. 3. Ryan completes level $1-k$ with a 2-star rating. Which choice of $k$ makes this scenario possible? If $k=0$, then this is possible if $S + 1 + s \\leq b_1$. If $k=1$, then this is possible if $S + 1 + s ≥ b_0$. Since $b_0 &lt; b_1$, then this is possible with $k=0$ only if it’s possible with $k=1$. So we might as well simply choose $k=1$, and have Ryan choose the level with the highest value of $b$. 这一段主要想说对于任意的两个满足第三种情况的点，手持$S$颗星星的Ryan可以这样做： 先去完成其中一个关卡的一星关卡，然后获得$1$颗星星； Ryan靠这颗星星南征北战，获得了$s$颗星星； Ryan靠着这些星星解决了另一个关卡的两星关卡，获得了两颗星星。 接下来是我个人认为最难的一部分：①.如果Ryan先去完成b值小的那关的一星关卡，要满足$S + 1 + s \\leq b_{big}$才能_三次_通关；②.如果Ryan先去完成b值较大的那关的一星关卡，要满足$S + 1 + s \\leq b_{small}$才能_三次_通关；考虑到我们的前置条件$b_{small} &lt; b_{big}$，如果我们能做到①，我们肯定能做到②；但相反，如果我们完不成②，①也无从谈起。所以我们可以直接去算②来让Ryan尽可能地去三次通关（让自己的程序偷个懒）。 So to summarize, Ryan’s strategy should be: 1. While there is any level remaining that Ryan hasn’t completed yet, or any level for which he can earn a higher rating than he previously had: * If he can earn a two-star rating on any of those levels, he should complete one of those levels (chosen arbitrarily). * Otherwise, if there is some set of levels on which he can earn a one-star rating, he should complete the one of those levels with the highest value ofb. 2. If Ryan has beaten all levels with a two-star rating, he’s done. Otherwise he’s TOO BAD. By simulating this strategy, we can see whether Ryan can beat Kingdom Rush, and the smallest number of level completions he can do it in. 所以Ryan的策略应是这样的： 1. 只要有Ryan有能力完成的关卡，Ryan可千万别愣着，照下面的②、③去做！ 2. 如果Ryan当前的能力可以完成两星的关卡（不管你有没有完成过它的一星关卡），Ryan一定要先去把它们都搞定！至于完成的顺序倒不重要。 3. 如果Ryan当前的能力只能完成一星关卡，Ryan须挑选一个b值最大的（当前他自己能完成的）关卡，去完成它！ 4. Ryan按照②、③继续做下去，直到通关（输出最小次数）或者没关可通（Too Bad）。 槽点 (10分) 直接输出Too Bad，其他啥也没有。 论骗分的好处！T1 1A加上T2 T3骗分都可以排第三（当然tl和tanao真的很巨）！ (45分) 样例是没问题了，但是当时无良题解关于一星关卡的选择的解释是真的无良： 不能打就打1星的，比较显然 显然个鬼哦！直接按照a值得大小自动排序，虽然有分，但不是满分！所以 你真心需要研读一下良心英文题解。 (90分) 很接近满分了！稍稍一看，为什么我的骗分答案A掉的那些点，这个90分的算法WA了。 它失败在哪里呢？原来是这里： cpp printf(&quot;Too Bad!&quot;);//正确无解输出应该是“Too Bad” AC代码"},{"title":"刷题与ZZ错误记录7","date":"2019-09-21T14:27:27.000Z","url":"/2019/09/21/%E5%88%B7%E9%A2%98%E4%B8%8Ezz%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%957/","categories":[["OIer之路","/categories/OIer%E4%B9%8B%E8%B7%AF/"],["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"涉及题目： 洛谷 U87838 高级打字机 洛谷 P3379 【模板】最近公共祖先（LCA） 洛谷 P3398 仓鼠找sugar 洛谷 T98890 抵御寒冷(cold) 洛谷 T98892 简单的问题(easy) 洛谷 U87838 高级打字机先放个朴素算法压压惊(100/200) 洛谷 P3379 【模板】最近公共祖先（LCA）AC模板(我学的是一本通提高篇的，所以跟提高篇上的差不多) 洛谷 P3398 仓鼠找sugar总结打LCA模板的时候顺便1A掉的一道题 直接套模板即可 不过我至少学会了树上两点的距离：$L_{AB}=deep[A]-deep[LCA(A,B)]+deep[B]-deep[LCA(A,B)]=deep[A]+deep[B]-2times deep[LCA(A,B)]$ 还学会了判断一个点是否在树上两点的路径上：$C在AB上：L_{AB}==L_{AC}+L_{BC}$ AC代码 洛谷 T98890 抵御寒冷(cold)标准题解$N^3$的暴力很显然，$N^2 log N$的方法只需要在暴力上稍加改进就行了。$N^2$的方法也比较明显，只要对$N_i$, $M_i$, $K_i$进行排序。然后$N_i$和$M_i$依次从小到大枚举，根据 $N_x+M_y+K_z leq C to K_z leq C - N_x - M_y$ 随着$N_x+M_y$的增大$K_z$只能不断减小。所以$K_z$不需要枚举。 总结我表示，按照这个题解打一份代码，总能A吧？结果还不是跟我那个$O(N^2logN)$一样TLE5个点。（难道是我这个蒟蒻太渣了曲解了题解？） 仔细一看，原来标准题解里竟然有这么一句话： ……只要对$N_i$, $M_i$, $K_i$进行排序。然后$N_i$和$M_i$依次从小到大枚举…… 这样枚举不就跟$O(N^2logN)$找最适合$K_i$一样了吗？于是本人索性就对标准题解进行一点修改核心还是根据： $N_x+M_y+K_z leq C to K_z leq C - N_x - M_y$随着$N_x+M_y$的增大$K_z$只能不断减小。 首先，我索性不排序了，读入第二组数据时直接按照$C-N_i-M_j$计数，然后来个前缀和，求出当$K_k$值等于$C_k$的时候有几种组合满足条件（说白了类似于按照$N_i+M_j$计数排序而不是按照$N_i$和$M_i$依次枚举）。 这样一个$O(N^2)$的预处理完了，输入第三组时我们就可以用$O(1)$直接累加答案（long long大法好） Done AC代码 洛谷 T98892 简单的问题(easy)标准题解有种思想叫以空间换时间。于是就产生了一种实现方法。叫打表。首先在自己的机器上把$1..100000000$内的素数全部计算出来。然后分块统计就可以了。譬如说把 $1..100000000$分成$10000$份，每份$10000$个数字。那么统计a..b内的素数个数复杂度就是$10000$了。 总结这题就一个字：拆！ 我至少学会了在两个较大的数，其间距较小的情况下如何加速素数筛的方法： 还知道了该打暴力就打暴力，打表不仅能过样例，还能出奇迹。 解析听说有人看不懂，还说要快速筛？（事实证明即学即用的快速筛碰到极端数据还是TLE） 简单讲一下吧。 我们已知最简单的筛是这样的： 执行过程如下： i 2 3 4 5 …… 99999998 99999999 flag[i] F F T F …… T T 当我们求$99990001-100000000$的时候，哪些部分是有用的呢？ 接下来我们设$a=99990001,b=100000000$： $&lt;sqrt{b}$的部分。这些部分都有可能成为最大数$b$的因数 $a-b$的部分。我们要求的就是它，为什么不认为他是有用的呢？ 然后，我们发现，$(min(sqrt{b},a),a)$的部分，其实是没有用的！为什么呢？ 首先，我们发现，这部分数不包含在$1$条件中，所以他们即使是最大值$b$的因数，也可以通过已知的因数(计算$1$)得到！这部数也不会包含在要统计的$2$中（显然）。所以，他们是废的！ 于是乎，我们的大数小范围筛就出来了。 我们把这样一张表： 2 3 …… 10000 10001 …… 99990000 99990001 …… 99999998 99999999 拆成2张表： 小数筛 2 3 …… 10000 大数筛 99990001 …… 99999999 100000000 原先可能要$O(b^2)$的算法瞬间被简化到$O((sqrt{b})^2)+O((b-a)^2)$，当$b$值较大而$b-a$值较小时优化还是很明显的。 还有就是分块思想。原先可能要从$5000$算到$99995000$的程序，可以通过以下操作打表！ 5000-10000 10001-20000 …… 99980001-99990000 99990001-99995000 小范围筛 打表 打表 打表 小范围筛 至于这个打表程序……普通的筛筛一次得到的数组可以用许多次，所以直接暴力普通筛即可（可参考AC代码）。 槽点 （60分）一开始没有特判导致在10000以内的两个数计算素数个数时首尾算了两次 比如15 987： 应该加个特判： （80分）没错，我的手动算素数代码竟然没在数值在15000以内时判定1和0不是素数！ （90分）为了演示槽点1把他注释掉了，修复槽点2后却忘了把他改回来…… AC代码首先是暴力和数据生成器 然后是提交的程序"},{"title":"刷题与ZZ错误记录6","date":"2019-09-16T11:01:22.000Z","url":"/2019/09/16/%E5%88%B7%E9%A2%98%E4%B8%8Ezz%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%956/","categories":[["OIer之路","/categories/OIer%E4%B9%8B%E8%B7%AF/"],["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"今天倒是写了很多题，不过大多数没有A…… 涉及题目： 洛谷 T97567 『YQOI2019』旅行 洛谷 T97623 『YQOI2019』心上秋 洛谷 T84891 【tg1】零件 洛谷 T97567 『YQOI2019』旅行50分代码 槽点 (50分) 直接模拟找圈圈，然后输出 洛谷 T97623 『YQOI2019』心上秋只能过样例的0分代码 洛谷 T84891 【tg1】零件总算有道题AC了"},{"title":"刷题与ZZ错误记录5","date":"2019-09-12T13:36:08.000Z","url":"/2019/09/12/%E5%88%B7%E9%A2%98%E4%B8%8Ezz%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%955/","categories":[["OIer之路","/categories/OIer%E4%B9%8B%E8%B7%AF/"],["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"涉及题目： 洛谷 P2679 子串 洛谷 P2679 子串AC代码又厚颜无耻地先抄了题解一遍，不过没交上去评测。 "},{"title":"刷题与ZZ错误记录4","date":"2019-09-10T08:46:45.000Z","url":"/2019/09/10/%E5%88%B7%E9%A2%98%E4%B8%8Ezz%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%954/","categories":[["OIer之路","/categories/OIer%E4%B9%8B%E8%B7%AF/"],["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"今天全是1A好开心 （然而CF到了1138B就一脸懵逼） 涉及题目： CodeForces 1138A Sushi for Two 洛谷 P1661 扩散 CodeForces 1138A Sushi for TwoAC代码 总结正着模拟一遍（计算能连起来的长度），反着模拟一遍，然后最后两侧相加就OK了。 洛谷 P1661 扩散AC代码"},{"title":"刷题与ZZ错误记录3","date":"2019-09-09T11:21:55.000Z","url":"/2019/09/09/%E5%88%B7%E9%A2%98%E4%B8%8Ezz%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%953/","categories":[["OIer之路","/categories/OIer%E4%B9%8B%E8%B7%AF/"],["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"涉及题目： 洛谷 P1250 种树 洛谷 P2512 [HAOI2008]糖果传递 P1250 种树AC代码 总结显而易见的贪心题 槽点在判断时写错条件了： 洛谷 P2512 [HAOI2008]糖果传递AC代码 总结槽点全是%lld的错！"},{"title":"刷题与ZZ错误记录2","date":"2019-09-07T14:21:32.000Z","url":"/2019/09/07/%E5%88%B7%E9%A2%98%E4%B8%8Ezz%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%952/","categories":[["OIer之路","/categories/OIer%E4%B9%8B%E8%B7%AF/"],["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"6号进行了一次模拟赛。也算是对我们几个蒟蒻高一的一次摸底考吧…… 涉及题目： treasure plot meet treasure题面【文件忘了拷可还行】 AC代码 总结首先容我吐槽两句 这道题是第一道题，但我觉得它的难度应该放在第二题…… 这道题我觉得比第二题难，但我总共的110分这道题占了100分…… 好了说正题。这道题主要是运用了前缀和。如果不知道前缀和，你肯定会想，这道题怎么来枚举每一份应该分成的值？毕竟我们要考虑分成这一份的话能不能整除（因为题目要求每段的价值必须相等）、会不会出现一颗珠子拦腰截断的情况（必须相等，而且必须得连续，所以可能会出现诸如2 11 2之类以为除以3就可以的情况）。我一开始想的是二分答案，但实际上根据上述条件，你根本无法得出二分的判断函数）。 首先我们手玩一组数据（都说了题面忘了拷，我只能瞎编一组玩玩咯）： a[i] 2 1 4 7 2 3 2 sum[i] 2 3 7 14 16 19 21 很明显，既然要求连续分割，那么第一个分出来的段肯定在sum[i]的值里面。此话怎讲？我们切出来的第一段的第一粒珠子肯定是整条链的第一个珠子，那么最后一个珠子呢？我们就可以将i从小到大枚举。假如我们截取了1-i号珠子，那么总和就是对应的sum[i]的值。有了第一段，我们就可以确定第二段、第三段的长度…… plot题面【文件忘了拷可还行】 考场代码（0分） AC代码 所以说把爆零代码中的“罪魁祸首”改掉就行了，我真是个名副其实的蒟蒻 总结这道题讲真是最简单的一道题了，我竟然（对于我这种蒟蒻应该用“果然”！！）爆零了！论检查的重要性！ 这题实际上也就是排序+模拟，没啥技术含量（毕竟这个年代排序可以用sort）。 看一下这样几个集合吧！ 粗粗一看可能没啥惊奇的，但是！如果我们按照左端点排序的话…… 这样，我们每检索完一个集合$[i,j]$后，剩下的集合一定包含在$[i,+∞)$ 中，这样我们就可以偷个懒，不用去处理左端点是否包含的问题了…… 首先，我们先处理第一个集合，将它视为“当前连续集合”，并先将这个区间加入到监视范围中。 然后我们去看： 很明显，经过排序后，这个集合的左端点一定大于等于上一个集合的左端点，然后我们看右端点，这个集合的右端点小于上一个集合的右端点。所以$[2,3]$是$[1,5]$的一个子集。它并不会影响监视区域的总长，所以不用理他。 我们看下一个集合： 这应该是一种比较正常的情况。因为它的右端点大于目前所有集合的右端点。这时，它就扩展了监视的区域，我们的$r$（当前连续集合的右端点）就派上用场了，直接用当前集合的$s[i].r$减去当前连续集合的右端点$r$就可得出扩展的区域大小，然后加到总和里并更新右端点就可以啦。 我们接着往下看： 什么，这两个集合竟然毫无交集！这时我们就要抛弃原来那个“当前连续集合”了（别问我抛弃后对答案会不会有影响，答案我早就记好了）（我们保存的是一个连续集合，一个中间有空洞的集合不好处理！）。除旧迎新，顺便还要把新人的贡献计算一次，加入到总和里。 最后我们看最后一个集合： 原理同正常情况。 槽点 （+80分）排序算法的判断小于重载函数写错了！说实话bool:valT:valF表示的是如果bool为真，那么返回valT，否则返回valF，然鹅我写反了…… （+20分）就是那个处理毫无交集时的罪魁祸首，$r-l$ 能写成 $l-r$ 的我也是无语，毕竟我就是个蒟蒻。 meet题面【文件忘了拷可还行】 考场程序 (10分)（暴力深搜还没优化甚至还会出BUG） std标程 总结我TM连题面都没有，只能看着标程YY了…… 首先，题目大意是，求出两个字符串的最长公共子序列（本蒟蒻竟然连最长公共子序列都忘了！考场抓狂1.5小时）。但是！这里的最长公共子序列竟然要求按照字典序输出所有的最长公共子序列！ 首先是最正常的求最长公共子序列（因为这里的n最长也只有80，所以直接用没有优化的最长公共子序列就行了）： 我们找个一组最平庸的数据，然后做个处理…… a[i] a b c c d a c i 1 2 3 4 5 6 7 b[j] j a 1 1 1 1 1 1 1 1 c 2 1 1 2 2 2 2 2 a 3 1 1 2 2 2 3 3 d 4 1 1 2 2 3 3 3 c 5 1 1 2 3 3 3 4 先把它留着，以后要用。 然后我们去看如何得到最长公共子序列的答案呢？因为我们是从前往后推得最长公共子序列，那么我们就从右往左推回去！ 首先，假设我们站在$(7,5)$这个点上，从这个表得到这里的最长公共子序列长度为$4$。然后我们就如上面说的，向前推。 对于一个点，我们看看，因为我们通过 $f[i][j]=max(f[i-1][j],f[i][j-1])$ 从前往后推得 $f[i][j]$ ，那么我们从后往前求序列的时候，就要回头看看 $f[i-1][j]$ 和 $f[i][j-1]$ 。对于我们的 $(7,5)$ ，$f[i-1][j]$ 和 $f[i][j-1]$ 明显都不等于$4$。 那么，我们当时是怎么获得这个4的呢？答案在这里： 好了，我们去看看点$(5,5)$吧。这里的$3$既可以由$(4,4)$推出来，也可以通过$f[i][j]=max(f[i-1][j],f[i][j-1])$得到。这该怎么办呢？因为这样推得的$f[i][j]$实际上并没有改变最长公共子序列的长度，所以我们就不用接字符串，直接往前搜索： 然后不可避免地，我们就搜到了第0行或者第0列。这时你也不能再往前搜索了，因为没有意义。我们搜索的脚步就此打住吧。 先定义一个set&lt;string&gt; ans用来放我们的答案（这玩意儿还可以自动排序，熟练了就可以省去很多步骤），然后加上： 不过这么裸搜不大好吧？毕竟搜索时会有许多重复状态。我们这里偷个懒，不写哈希了，定义一个set&lt;string&gt; v[MaxLen][MaxLen]来保存已经搜过的状态，然后快速得出这个状态这个点有没有搜过，搜过就不用了管他了，直接pass。 最后我们愉快地遍历ans集合，输出答案： 搞定。 槽点 (10分) 这个在考场上因为最大公共子序列忘了怎么求于是就只能深搜还没写对于是挂了…… (90分) 这个数据偏水了。我在写的时候有这么一句话，竟然还有90分： "},{"title":"刷题与ZZ错误记录1","date":"2019-08-30T06:34:22.000Z","url":"/2019/08/30/%E5%88%B7%E9%A2%98%E4%B8%8Ezz%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%951-noip%E7%AF%87/","categories":[["OIer之路","/categories/OIer%E4%B9%8B%E8%B7%AF/"],["刷刷真题","/categories/%E5%88%B7%E5%88%B7%E7%9C%9F%E9%A2%98/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"涉及题目： NOIP2017 时间复杂度 NOIP2017 小凯的疑惑 NOIP2017 奶酪 洛谷 P1116 车厢重组 NOIP2017 时间复杂度AC代码： 总结这是一道大模拟，主要是理解For函数的递归。基本原理是将执行的For循环推进一个栈里，碰到E就出栈，然后计算时间复杂度就是在没出现要忽略For循环的情况下不停地 取栈层数-在栈里的常量循环数量 的最大值。 不过作为一道提高组的考题，要注意的细节还是很多。 槽点： (20分) 没有考虑正常的For循环套一个常数For循环，就比如下面这样的： (80分) 给栈加了一个常量属性，可以判断它是不是个常量循环，但是！并没有判断两个常量的For循环他会不会被忽略！就比如下面这个For循环，实际上它不会被执行，时间复杂度是O(1)级别的： (90分) 由于常量变量的调用太蠢了，以至于在忽略执行的情况下常量层数不会增加，但出栈时常量层数会减少，于是就WA了一个点。 NOIP2017 小凯的疑惑AC代码 好吧不开玩笑（虽然这个程序真的能AC），不过我一开始真的抄了题解…… 所以我要自己把题推一遍！一个可以用钞票表示的数可以表示为 $xa+yb$ ，众所周知，因为$a,b$互质，$ (xa+yb)\\space mod \\space b = (xa+(y+n)·b) \\space mod \\space b$，只要a的系数不变，随便b的系数怎么变对于模数都不会有影响。 对于上图来说，填色的表示可以被系统表示的面值（你可以自动无视第0行——就是紫色的那行，因为无论如何，$n \\times 7 \\space mod \\space 7 = 0$），可以发现，当$x$的值在变化时，不仅覆盖了第一个被遍历到的那个余数的点，而且你可以通过改变$y$来让覆盖延续下去（就如红色的那行：$3+0 \\times 7=3,3+1 \\times 7 = 10,3+2 \\times 7=17 …$）。这样就好办了。 我们最后一次覆盖的那行是什么时候覆盖的？没错，就是遍历到$18(3 \\times 6 \\space mod \\space 7 = 4)$的时候把最后一行空白填上了（你可以想想红橙黄绿按照顺序上色）。$18 = 3 \\times 6 = (b-1)\\times a$。 那么，我们要求的答案$11$又在哪儿呢？就在$18$的前面！就拿天蓝色的那行（第一行）来说，你填完它后这一行能表示的下限就定死了（$15$，这一行不可能有没上色的数值$\\geq 15$了），但你还有一行（第四行）没上色呢，第四行的下限没定，你就不可能知道不能表示的数的上限。当你填完第四行的$18$后，如果你还想上色，那你就上在了第0行（有颜色的），接下来就循环上已经上过色的行了（没啥意义）。那么怎么得到这个$11$呢？事实上从图中我们发现$18$比$11$要大一轮，所以直接减去模数$7(b)$。 所以答案就是$(b-1)a-b=ab-a-b$。 完（可不能再手贱直接点查看题解了！） NOIP2017 奶酪AC代码 经验教训一开始我都是建图+爆搜 (0分 WA-7 TLE-3) 使用了DFS，在输出时没打换行符！ (60分 WA-1 TLE-3) 使用了DFS，竟然还有WA的可还行。 (50分 TLE-5) 使用了BFS（循环队列版）结果TLE比DFS多可还行。 直到我又手痒，点开了洛谷的“算法标签”……什么，并查集！ (40分) 并查集的重置需要N的帮助，然而我把并查集在读取N之前同步了！ 洛谷 P1116 车厢重组AC代码 总结我为什么要做这种入门题呢？"},{"title":"每日算法 - 字符串哈希","date":"2019-07-25T11:33:14.000Z","url":"/2019/07/25/%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/","categories":[["算法备忘录","/categories/%E7%AE%97%E6%B3%95%E5%A4%87%E5%BF%98%E5%BD%95/"]],"content":"今天是为算法写博客的第一天，在此暂且原谅我今天挑选的算法过于简单 为什么要哈希因为字符串有时候会很长，如果出现什么特别长的字符串比如说qwqwqwqwq...（在此省略一万字）...qwqwqwq，如果只是为了查找它有没有出现过，为了它开一个十分大的字符串数组不仅浪费查找的时间还浪费空间。so哈希为此而生。 哈希是干嘛的简而言之，哈希函数是一个压缩函数，通过将一个大的数字通过模一个质数压缩成一个小的数字，来达到能在数组里开的下的，并且可以用long long而不用自己写高精度来检查是否相等的函数。也就是说，原来的数据范围可能是$10^100$，但其实里面可能没什么东西，哈希了一次后，数据范围就降到了$10^10$或更少，这样我们就可以将它用long long甚至int把它储存起来。 但或许你会问，这样的压缩后的数又有什么用呢？要注意到，虽然我们不能将一个哈希后的数恢复到原来的内容，但同一内容无论何时哈希，得到的结果都是一样的。这样，当我们判断这个数曾经有没有出现过时，我们可以用少的多的空间管理同样多的东西。 1. 数组开的下：一般来说，一个用来判断一个$10^100$以内一个数是否出现过的bool数组是开不下的，但一个用来判断$10^6$个哈希数有没有出现的bool数组一般都能开的下。 2. 压缩数据：如果要直接储存一个大数你要自己写相关的高精度，但如果仅用来看看有没有出现而且数据量又很少，你完全可以用哈希。 3. 方便比较：不仅是一串数字，一个字符串，甚至是一张图，你都可以用一定的手段（比如说把它变成一个X进制数然后哈希）把它变成更容易储存和比较的哈希数。 接下来就是一个用哈希解决问题的题目。 P3370 【模板】字符串哈希洛谷的题面 这题是一道经典的模板题。在处理的时候，我们可以将每一个字符串化成一个N进制数（最后用十进制数表示）后哈希。在比较的时候，我们就可以将哈希值排序，若前后两个字符串哈希值不同，就说明是两个不同的字符串。（这样远比一个个比较字符串字符简单的多） 哈希带来的一些问题首先，因为哈希数量有限（毕竟你的模数定在那里），所以如果真的碰上一大堆数据的时候哈希要谨慎 其次，即使数据数量可能没那么多，你也要考虑到生日悖论和卡常。 生日悖论，指如果一个房间里有23个或23个以上的人，那么至少有两个人的生日相同的概率要大于50%。这就意味着在一个典型的标准小学班级(30人)中，存在两人生日相同的可能性更高。对于60或者更多的人，这种概率要大于99%。从引起逻辑矛盾的角度来说生日悖论并不是一种悖论，从这个数学事实与一般直觉相抵触的意义上，它才称得上是一个悖论。大多数人会认为，23人中有2人生日相同的概率应该远远小于50%。 根据生日悖论，即使你的数据并不多，你的哈希也有可能出现重复的情况。用哈希时，重复在所难免。 解决方案1 拉链法⽤链表或其他数据结构将同⼀hash值的若⼲元素串联，如果遇到某个hash值就去链表上遍历, 解决方案2 开放寻址法若某元素插⼊的散列地址已有元素占⽤，则使⽤⼀定⽅法（比如说：加上一个质数）寻找下⼀个可⽤地址 解决方案3 多重哈希没错，你可以哈希好几次，就是把哈希函数以不同的质数多写几遍，比较的时候多次比较都相同后再说它们是一样的！ 解决方案4 随机的防卡常/HACK的哈希有时候，像CF之类的比赛，可能会有人故意看你的质数来卡常。 没错，你准备一个哈希质数表，这样的话每次程序运行随机取一个！"},{"title":"暑期题单","date":"2019-07-19T13:05:48.000Z","url":"/2019/07/19/%E6%9A%91%E6%9C%9F%E9%A2%98%E5%8D%95/","categories":[["OIer之路","/categories/OIer%E4%B9%8B%E8%B7%AF/"]],"content":"给自己立下一个flag（以下题单均以洛谷为第一选择，vjudge为第二选择，即使里面可能夹杂着其他OJ的题目，实在不行才连到原oj） 基础算法 [x] P1379 八数码难题 【AC】 [ ] 买汽水 [x] P1908 逆序对 【AC】 [ ] P1257 最近点对 (加强版) [ ] CF140C New Year Snowmen [ ] CF175C Geometry Horse [ ] CF486B OR in Matrix [ ] CF724B Batch Sort [ ] CF460C Present [ ] CF482A Diverse Permutation [ ] CF425A Sereja and Swaps [ ] P2324 骑士精神 [ ] CF633D Fibonacci-ish [ ] LOJ6559 ?奇采药 [ ] LOJ6560 ?奇取?? [ ] CF1187C.Vasya And Array [ ] SPSAM Toy Cars [ ] CF767E Change Free [ ] CF1190B Tokitsukaze, CSL and Stone Game [ ] CF196C Paint Tree [ ] codechef CLPERM [x] CF497C Distributing Parts 【AC】 [ ] POJ Challenge. ??礼物 数据结构哈希表、并查集、字典树和LCA [x] CF650A Watchmen 【AC】 [ ] CF633C Spy Syndrome 2 [ ] 例题. 树的同构 [ ] CF718D. Andrew and Chemistry [ ] P1892 团伙 [ ] Chef and Favourite Sequence [ ] 环 [ ] P3043 [USACO12JAN]牛联盟Bovine Alliance [ ] UOJ14. DZY Loves Graph [ ] 链型?络 前缀和、稀疏表、分块、线段树和搜索树 [ ] LOJ6278 数列分块入门 2 [ ] P3372 【模板】线段树 1 [ ] LOJ6280 数列分块入门 4 [x] CF466C Number of Ways 【AC】 [ ] 带修改最?字段和 [x]CF527C Glass Carving [ ] CTUO2015.Lunch Menu [ ] 2017 乌鲁?齐 G.Query on String [ ] CF339D Xenia and Bit Operations [ ] BZOJ 2120 数颜? [ ] P3203 [HNOI2010]弹飞绵羊 [ ] CF212D Cutting a Fence [ ] ?奇的糖果 数论 [ ] P4035 [JSOI2008]球形空间产生器 [ ] BZOJ2982 combination [ ] CF687B Remainders Game [ ] CF396B On Sum of Fractions 图论拓补排序 [ ] POJ1094 Sorting It All Out【WA】 [x]P1113 杂务【AC】 [ ] 课程表 dijkstra、Bellman-Ford、SPFA和Floyd [x]P3371 【模板】单源最短路径（弱化版）【AC】 [ ] P1250 种树 [ ] CF919D Substring [ ] POJ2240 Arbitrage 最小生成树 [ ] P3366 【模板】最小生成树 有向图强连通分量 [ ] P3472 [POI2008]MAF-Mafia [ ] P2607 [ZJOI2008]骑士 [ ] BZOJ4883 棋盘上的守卫 [ ] CF875F Royal Questions [ ] P1772 [ZJOI2006]物流运输 [ ] BZOJ4298 [ONTAK2015]Bajtocja [ ] The Kirakira Cycle [ ] P3573 [POI2014]RAJ-Rally [ ] Be Friends [ ] Utilitarianism [ ] SCU4444 Travel [ ] BZOI4151 The cave [ ] BZOJ3734 Miny [ ] 树上的路径 [ ] All Pair Shortest Path [ ] BZOJ4289 Tax [ ] P4383 [八省联考2018]林克卡特树lct [ ] 新年的繁荣 [ ] CF1073F Choosing Two Paths [ ] 小P的生成树 [ ] ZOJ3902 Triangle "},{"title":"那年东南那些事(密码为我们班的状元)","date":"2019-06-22T12:24:02.000Z","url":"/2019/06/22/%E9%82%A3%E5%B9%B4%E4%B8%9C%E5%8D%97%E9%82%A3%E4%BA%9B%E4%BA%8B/","categories":[["回忆东南","/categories/%E5%9B%9E%E5%BF%86%E4%B8%9C%E5%8D%97/"]],"content":"东南纪念视频 东南纪念加长版"},{"title":"noip2014 普及组模拟赛","date":"2018-11-03T02:01:38.000Z","url":"/2018/11/03/noip2014-%E6%99%AE%E5%8F%8A%E7%BB%84%E6%A8%A1%E6%8B%9F%E8%B5%9B/","tags":[["NOIP","/tags/NOIP/"],["复赛","/tags/%E5%A4%8D%E8%B5%9B/"],["普及组","/tags/%E6%99%AE%E5%8F%8A%E7%BB%84/"],["模拟题","/tags/%E6%A8%A1%E6%8B%9F%E9%A2%98/"],["2014","/tags/2014/"]],"categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"]],"content":"原作者bx2k，种花兔对此稍作了改编 题目名称 阶乘 宣传委员 游历东南 密码 可执行文件名 factorial segment tree lcs 输入文件名 factorial.in segment.in tree.in lcs.in 输出文件名 factorial.out segment.out tree.out lcs.out 每个测试点时限 1s 1s 1s 1s 内存限制 512MB 512MB 512MB 512MB 测试点数目 10 10 10 10 每个测试点分值 10 10 10 10 是否有部分分 否 否 否 否 题目类型 传统型 传统型 传统型 传统型 是否有附加文件 否 否 否 否 提交源程序须加后缀 对于Pascal语言 factorial.pas segment.pas tree.pas lcs.pas 对于C 语言 factorial.c segment.c tree.c lcs.c 对于C++ 语言 factorial.cpp segment.cpp tree.cpp lcs.cpp 注意：最终测试时，所有编译命令均不打开任何优化开关，第三题请小心爆栈。请大家在每题输出最后加上一个换行符。 每一题都是要使用文件输入输出的，请注意。如果不会文件输入输出，请见附录。 阶乘【问题背景】 暑假的某一天，种花兔在做暑假作业。突然，他发现他有一题不会做……(因为他已经笑傻了233333333) 【问题描述】 题目会给定n，需要你球出(1!+2!+3!+…+n!)对233333333取模的结果。 【输入格式】 从factorial.in读入数据，数据仅包含一行。第一行包含一个数字n。 【输出格式】 输出到factorial.out。输出(1!+2!+3!+…+n!)对233333333取模的结果 【样例输入】 10 【样例输出】 4037913 【样例说明】 (1!+2!+3!+…+10!)%233333333=(1+2+6+…+3628800)%233333333=4037913 (%就是取模，pascal中是mod) 【数据范围与约定】 对于1-5测试点，n&lt;=103 对于6-8测试点，n&lt;=106 对于9-10测试点，n&lt;=109 宣传委员【问题背景】 写完暑假作业后，种花兔去找小红（又名张廼莹（划掉），红色歌手、装逼佬一枚）玩。小红表示他要去东南唱红歌宣传马哲思想，于是种花兔准备跟着去围观。 【问题描述】 小红把即将接受宣传的人排成一行，每个人从左到右的编号为1-n。每个人有一个信仰值，一开始所有人的信仰值为0。接着小红会做以下两件事之一： 1.小红进行马列☭主义的宣传。具体来说，小红会使第l个人到第r个人之间的所有人的信仰值增加k。 2.小红想知道马列☭主义是否深入人心。具体来说，小红会问种花兔第l个人到第 r个人之间所有人的信仰值之和。 身为一个马列☭主义的拥护者，种花兔自然会帮小红来算。但是种花兔太笨了，根本不会算。于是他想找你来帮忙。 【输入格式】 从segment.in读入数据。第一行包含两个整数n,m。分别表示接受宣传的人数以及小红的操作数。 接下来m行，每行包含若干个整数。若第一个整数为1，则代表小红在进行宣传，这一行接下来会包含l,r,k三个整数。否则第一个整数为2，代表小红的一个询问，这一行接下来会包含l,r两个整数。 【输出格式】 向segment.out输出数据。输出若干行，每行包含1个整数，表示小红询问的答案。行数为小红的询问数量。 【样例输入】 5 5 2 1 2 1 4 4 2 1 2 4 7 4 5 6 3 4 【样例输出】 0 22 【样例说明】 一开始所有人的信仰值都为0，所以答案为0。到第五个操作时，五个人的信仰值分别为0,7,7,15,6。则答案为7+15=22 【数据范围与约定】 对于1-3测试点，n,m&lt;=10 对于4-5测试点，n,m&lt;=103 对于6-8测试点，没有宣传操作。 对于所有测试点，n&lt;=109 , m&lt;=103 , 0&lt;l&lt;=r&lt;=n , k&lt;=10 游历东南【问题背景】 因为有你的帮忙，小红宣传马列☭主义过程中的询问不需要种花兔来算了。趁这个时间，种花兔开始游历东南。 【问题描述】 东南人民热爱树（因为树上不仅有香泡，树的颜色在大部分时候都跟校服一样的绿），所以他们的城市也是树形的。种花兔在东南有很多喜欢的地点对(u,v)，于是他用步伐测量出了每个地点对的距离。做完这个任务后，他回去告诉了小红。小红表示仅仅是距离太弱了，他觉得种花兔应该把地点对之间所有道路的异或和(如果你不知道异或和是啥，请看提示)球出来。种花兔已经不想再走了，于是他把东南的地图告诉你，让你来帮他完成任务。 【输入格式】 从tree.in读入数据。第一行包含两个整数n,m，代表东南有n个地点，种花兔有m个喜欢的地点对。接下来n-1行，每行包含3个整数u,v,k，代表地点u到地点v 之间有一条长度为k的双向道路。接下来m行，每行包含两个整数u,v，代表种花兔喜欢的地点对。 【输出格式】 向tree.out输出数据。输出包括m行，每i行代表第i个地点对之间所有道路的异或和。 【样例输入】 5 5 1 25431 1 25971 3 11525 4 9170 3 3 1 2 1 【样例输出】 11525 3799 25431 1572 18550 【样例解释】 第二个地点对5,3之间会经过长度分别为9170,11525的两条道路， 9170^11525=3799。其他答案依次类推。 【数据范围与约定】 对于1-3测试点，n,m&lt;=10 对于4-7测试点，n,m&lt;=103 对于1-9测试点，除1号点外，每个点i均与floor(i/2)有边。 对于所有测试点，n,m,k&lt;=105, u,v&lt;=n 【提示】 异或是一种位运算，在c, c++中是^，在pascal中是xor。 具体来说，0^0=0,0^1=1,1^0=0,1^1=0。两个整数的异或值是指把这两个数变成二进制(高位补0)，然后每一位进行异或。(例如4^5=100^101=001=1)一些数的异或和就是把这些数按顺序异或起来。(例如4^5^3=(4^5)^3=1^3=2) Floor(i)表示i的下取整结果，即小于等于i的最大的整数，如floor(3.5)=3 密码【题目背景】 从东南回来后，小红编制了一本毛泽东思想问答手册。听说米粒家的特大总领对毛的思想起了兴趣但美帝对中特产生了敌意，小红决定与种花兔一起编密码来将手册加密以免被某些人盗走。 【题目描述】 小红的编制密码方法是这样的，他先让他自己和种花兔选各一个1-n的排列，然后小红会将这两个排列的最长公共子序列作为密码。种花兔想知道这个密码的长度，又不想告诉你密码，于是他就把这两个排列做了适当改动后来问你。 【输入格式】 从lcs.in读入数据。第一行包含一个数n。第二行包含一个1-n的排列，代表适当改动后的种花兔的排列。第三行包含一个1-n的排列，代表适当改动后的小红的排列。 【输出格式】 向lcs.out输出数据。输出包含一行，第一行包含一个数ans，代表这两个排列的最长公共子序列的长度。 【样例输入】 5 4 5 1 2 3 1 4 2 5 3 【样例输出】 3 【样例解释】 {1,2,3}为一个最长公共子序列，长度为3。 【数据范围与约定】 对于1-3测试点，n&lt;=5 对于4-7测试点，n&lt;=103 对于8-10测试点，n&lt;=105 【提示】 一个序列S，如果分别是两个或多个已知序列的子序列，且是所有符合此条件序列中最长的，则S称为已知序列的最长公共子序列。例如bd是bed与bad的最长公共子序列。 在一个已知序列S中按顺序提取出其中的几项形成A，则称A是S的子序列。 比如bce是#a#b#c#d#e#的子序列。 附录：文件输入输出 以下均以第一题为例。 C++: #include … int main() { freopen(“factorial.in”,”r”,stdin); freopen(“factorial.out”,”w”,stdout); …. } C: #include&lt;stdio.h&gt; … int main() { freopen(“factorial.in”,”r”,stdin); freopen(“factorial.out”,”w”,stdout); …. } P: … assign(input,’factorial.in’); reset(input); assign(output,’factorial.out’); rewrite(output); … close(input); close(output); …"},{"title":"noip2015 普及组模拟赛","date":"2018-11-03T01:41:23.000Z","url":"/2018/11/03/204/","tags":[["2015","/tags/2015/"],["NOIP","/tags/NOIP/"],["复赛","/tags/%E5%A4%8D%E8%B5%9B/"],["普及组","/tags/%E6%99%AE%E5%8F%8A%E7%BB%84/"],["模拟题","/tags/%E6%A8%A1%E6%8B%9F%E9%A2%98/"]],"categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"]],"content":"模拟赛01 题 1 独木桥(Bridge.pas/c/cpp)【问题描述】 战争已经进入到紧要时间。你是运输小队长，正在率领运输部队向前线运送物资。运输任务像做题一样的无聊。你希望找些刺激，于是命令你的士兵们到前方的一座独木桥上欣赏风景，而你留在桥下欣赏士兵们。士兵们十分愤怒，因为这座独木桥十分狭窄，只能容纳一个人通过。假如有两个人相向而行在桥上相遇，那么他们两个人将无妨绕过对方，只能有一个人回头下桥，让另一个人先通过。但是，可以有多个人同时呆在同一个位置。 突然，你收到从指挥部发来的信息，敌军的轰炸机正朝着你所在的独木桥飞来！为了安全，你的部队必须撤下独木桥。独木桥的长度为L，士兵们只能呆在坐标为整数的地方。所有士兵的速度都为1，但一个士兵某一时刻来到了坐标为0或L+1的位置，他就离开了独木桥。 每个士兵都有一个初始面对的方向，他们会以匀速朝着这个方向行走，中途不会自己变方向。但是，如果两个士兵面对面相遇，他们无法彼此通过对方，于是就分别转身，继续行走。转身不需要任何的时间。 由于先前的愤怒，你已不能控制你的士兵。甚至，你连每个士兵初始面对的方向都不知道。因此，你想要知道你的部队最少需要多少时间就可能全部撤离独木桥。另外，总部也在安排阻拦敌人的进攻，因此你还需要知道你的部队最多需要多少时间才能全部撤离独木桥。 【输入文件】 第一行：一个整数L，表示独木桥的长度。桥上的坐标为1…L 第二行：一个整数N，表示初始时留在桥上的士兵数目 第三行：有N个整数，分别表示每个士兵的初始坐标。初始时，没有两个士兵同在一个坐标。 【输出文件】 只有一行，输出两个整数，分别表示部队撤离独木桥的最小时间和最大时间。两个整数由一个空格符分开。 【样例输入】 4 2 3 【样例输出】 4 数据范围 N&lt;=L&lt;=5000 题 2 回文词(Words.pas/c/cpp)【问题描述】 CR 喜欢研究回文词，有天他发现一篇文章，里面有很多回文数，这使他来了兴趣。他决定找出所有长度在n个字节以上的回文数。 在寻找回文时不用理睬那些标点符号、空格(但应该保留下来以便作为答案输出)，只用考虑英文字母’A’—’Z’和’a’—’z’。 要你寻找的回文的文章是一个不超过5,000个字符的字符串。 【输入文件】(Words.in) 第一行为要找的回文的长度n。后面一行或几行为一个不超过5,000个字符的字符串。 【输出文件】(Words.out) 输出的最后一行为找到的长度大于等于n的回文词的个数。同一个回文中心只算一组回文，并且输出这组回文最长的回文。 前面一行或几行应该包括所有长度大于等于n的回文词的原文(没有除去标点符号、空格)，把这些回文输出到一行或多行(如果回文中包括换行符)。 如果有多个回文长度大于等于n，全部输出所有回文。按回文中心在原文中的出现顺序依次输出。 【输入样例】 3 Confucius say：Madam，I’m Adam． 【输出样例】 Madam Madam，I’m Adam m Adam 3 【数据规模】 对于40％的数据： 在2000个字符以内 对于l00％的数据：在5000个字符以内 题 3 抗震救灾（save.pas/c/cpp）【问题描述】 这场灾难发生后，国家决定设立研究所研究灾后重建工作，由全国各地派技术人员来参加。因为每个地区所派的技术人员数目不同，出于节约经费的问题，所以目前还没有决定到底有在哪个地区设置研究所进行研究。假设所有地区都在一条直线上，现在只知道每个地区与汶川的距离和该地派出技术人员的数目（假设汶川在最左端）。请你编程帮助他们确定在哪个地区建立研究所可以使所有技术人员集中到该地区的费用总和最小。 【输入文件】 输入文件每一行描述一个地区的信息（地区数&lt;=5000）。 对于每一行，首先是该地区派出的技术人员数目，紧跟着是这个地区相对于汶川的距离，最后是该地区的名称。（技术人员数&lt;=100,地区的相对距离&lt;=10^31,地区名称长度&lt;=20 ,数据保证有唯一的解）； 【输出文件】 输出文件只需一行，即研究所设定的地区名称。 【样例输入】 7 9289 shengyan 5 8523 beijing 3 5184 guilin 8 2213 chongqing 10 0 wuhan 【样例输出】 chongqing 题 4 围棋游戏（blocks.pas/c/cpp）【题目描述】 为了增强幼儿园小朋友的数数能力，小虎老师给了一个家庭游戏作业。让小虎那一块空的围棋盘，随机在一些方格中放些棋子（有黑白两种颜色），如果一个方格和它的上、下、左、右四个方格之一有相同颜色的棋子，则认为两个格子是相互连通的。这期间，要求小虎不断统计共有多少个连通块。 如下图是一个5*9的一块棋盘，其中“.“表示空格，”*“表示黑棋子，”@“表示白棋子。则有4块连通子块。 哥哥大虎在一边看一边想，如果棋盘是N*N的，共放了M个棋子，如何使用计算机解决这个问题呢？ 数据范围 30%数据：1&lt;=n&lt;=10 60%数据：1&lt;=n&lt;=100 100%数据：1&lt;=m&lt;=n*n。n&lt;=500。 【输入文件】 第一行两个整数：N,M 接下来有M行，每行三个整数：C X Y（0&lt;=c&lt;=1,1&lt;=x,y&lt;=n）。分别表示依次放入棋子的颜色（0表示白色，1表示黑色）、要放入格子的横坐标和格子的纵坐标。 【输出文件】 共M行。第i行一个整数，表示放入第i个棋子后，当前有多少个棋子连通块。 【样例输入1】 3 5 1 1 1 1 1 2 2 2 3 1 1 2 1 【样例输出1】 1 1 2 3 2 【样例输入2】 3 5 1 1 2 1 2 1 1 3 2 1 2 3 1 2 2 【样例输出2】 1 2 3 4 1"},{"title":"NOIP普及组模拟题","date":"2018-11-03T01:35:58.000Z","url":"/2018/11/03/noip%E6%99%AE%E5%8F%8A%E7%BB%84%E6%A8%A1%E6%8B%9F%E9%A2%98/","tags":[["NOIP","/tags/NOIP/"],["复赛","/tags/%E5%A4%8D%E8%B5%9B/"],["普及组","/tags/%E6%99%AE%E5%8F%8A%E7%BB%84/"],["模拟题","/tags/%E6%A8%A1%E6%8B%9F%E9%A2%98/"]],"categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"]],"content":"NOIP 普及组模拟题 题目 单词缩写 于吉 下楼问题 跳鼠 程序名称 abbreviation yuji down jerboas 输入文件 abbreviation.in yuji.in down.in jerboas.in 输出文件 abbreviation.out yuji.out down.out jerboas.out 测试点数 10 10 15 20 分值 100 100 100 100 时间限制 1s 1s 1s 1s 空间限制 128M 128M 128M 128M 1、单词缩写【问题描述】 我们经常使用一个短的字母序列来表示一串指代名称的单词的缩写，比如，“ACM”就是 “Association for Computing Machinery”的缩写。 现在我们使用缩写首字母的方式来获得以上缩写，方法是将给定名称中的各个单词的首字母 提取出来并连接到一起。但是，在产生这种缩写方式的时候，一些特殊情况需要被忽略，规 则如下： （1） 常用单词“and”,”for”和“the”需要被忽略 （2） 长度小于 3 的单词，比如“a”，“of”，“to”，需要被忽略。 你的任务是对于给定的字符串，通过以上规则提取出缩写方式。 【输入格式】 第一行一个整数 T（T&lt;=100），接下来 T 行，每行一个字符串，字符串的长度不会大于 100， 由一个单词序列组成，保证只含字母，每两个单词之间用一个空格隔开，字符串前后都没有多余的空格。 【输出格式】 对于每个测试样例，输出该行字符串的缩写。 【输入样例】 5 Association for Computer Machinery Institute of Electrical and Electronice Engineers SUN YAT SEN UNIVERSITY The Lord of the Rings Netease 【输出样例】 ACM IEEE SYSN LR N 2、于吉【题目描述】 于吉是个非常令人讨厌的人，因为他经常找人去解答他那些无聊的难题，而且每天都找不同 的人去解答，不幸的是，他今天找到了你去解答他的难题。题目是： “假设有 n 个顶点的凸包，凸包里面有 K 个点，这 N+K 个点不会有三点共线，可以选择两 个点连一条线段，线段只能在点上相交，问最多能连出多少个三角形？” 这个无聊是吧？但是，你仍然需要解答它，因为解答后，你将在本场比赛中获得 100 分，嘻嘻^_^ 【输入格式】 第一行一个整数 T（T&lt;=100），表示测试样例的数目。 对于每个测试样例，每行给出两个整数 N（3&lt;=N&lt;=10000）和 K(1&lt;=K&lt;=10000)。 【输出格式】 对于每个测试样例输出一个表示答案的整数。 【输入样例】 1 4 1 【输出样例】 4 【解释】 凸包(Convex Hull)是一个计算几何(图形学)中的概念。 在二维欧几里得空间中，凸包可想象为一条刚好包著所有点的橡皮圈。 用不严谨的话来讲，给定二维平面上的点集，凸包就是将最外层的点连接起来构成的凸多边 型，它能包含点集中所有点的，如下为一个凸包。 3、下楼问题【问题描述】 一只猫在楼顶，它想下到 1 楼去。在每层楼，有 3 个门。每个门有一个单向的通道通往下一 层楼，同一层楼相邻的两个门之间有一个双向的通道相连。对于任意相邻的两层楼，有如下 的连接情况（如图所示）： （1） 楼上最左边的门直接连接楼下最右边的门 （2） 楼上最右边的门直接连接楼下最左边的门 （3） 楼上中间的门直接连接楼下中间的门 那只猫最开始的时候在第 N 层楼最左边的门。我们知道楼里各个通道的长度。现在，我们的问题是：求猫从初始位置走到 1 楼的最长路径。要注意的是，猫不会通过同一条路两次。 【输入格式】 第一行输入整数 N（1&lt;=N&lt;=5*10^5）。接下来的 N 行，第 i 行包含 5 个正整数 Ai，Bi，Ci， Di，Ei（0&lt;=Ai，Bi，Ci，Di，Ei&lt;=1000），表示第 i 层楼各个通道的长度，具体见上图。 对于第 1 楼，Ci=Di=Ei=0，因为没有通道通往下一层了。 【输出格式】 输出一行，表示最长路径。 【输入样例】 3 40 40 0 0 0 40 20 1 80 80 1 70 40 2 40 【输出样例】 331 4、跳鼠【问题描述】 跳鼠是一种在沙漠生存的动物，长得很像老鼠，但是却有很长的尾巴和后腿。跳鼠隐藏在沙 漠中，它们创造了两种洞穴，临时洞穴和永久洞穴。 据说，跳鼠在沙漠中的洞穴是用单向通道连接的，而且，从任何一个洞穴出发，不可能有路径可以回到起始点。 夏天对跳鼠来时意味着最美好的时光，它们不需要再隐藏了。一天，一只住在临时洞穴 S 的小跳鼠想迁移到永久洞穴去，当然，这里有很多路线方案可以选择，但是它很固执，只选 择哪些总迁移长度为 K 的整数倍的路线。在这些路线中（不止一个），我们感兴趣的是哪一 个路线是最短的，你能找出来吗？当然，不同的路线会到达不同的目的地。 【输入格式】 第一行输入 N，M，S，K。 N 是指沙漠中洞穴的个数，编号为 1,2，……N。 M 是指洞穴之间相连的边数。 S 表示小跳鼠居住的洞穴编号，K 如上所述。 （0&lt;N&lt;=1000,0&lt;=M&lt;=20000,0&lt;S&lt;=N,0&lt;K&lt;=1000） 第二行包含 N 个字母，字母只能是“T”或者“P”，“T”表示临时洞穴，“P”表示永久洞穴，第 i 个字母表示洞穴 i 的类型，保证第 S 个字母一定为“T”。 接下来 M 行，每行 3 个整数 A，B，C，表示从洞穴 A 到洞穴 B 的长度为 C。 （0&lt;A,B&lt;=N,A&lt;&gt;B,0&lt;C&lt;40000） 【输出格式】 输出两个整数 X Y，X 表示最短路的长度，Y 表示选择路线的终点（即洞穴的编号）。 注意，Y 必须是永久洞穴。 如果有多个最短方案存在，Y 选择编号最小的。 如果没有方案存在，X 和 Y 须输出-1. 【输入样例】 输入样例 1： 5 5 1 7 TPPTP 1 2 8 1 4 7 4 3 9 2 3 6 1 5 3 输入样例 2： 5 5 1 7 TPTTP 1 2 8 1 4 7 4 3 9 2 3 6 1 5 3 【输出样例】 输出样例 1： 14 3 输出样例 2： -1 -1"},{"title":"模拟题1103下【仅题目】","date":"2018-11-03T01:25:18.000Z","url":"/2018/11/03/%E6%A8%A1%E6%8B%9F%E9%A2%981103%E4%B8%8B%E3%80%90%E4%BB%85%E9%A2%98%E7%9B%AE%E3%80%91/","tags":[["NOIP","/tags/NOIP/"],["复赛","/tags/%E5%A4%8D%E8%B5%9B/"],["普及组","/tags/%E6%99%AE%E5%8F%8A%E7%BB%84/"],["模拟题","/tags/%E6%A8%A1%E6%8B%9F%E9%A2%98/"]],"categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"]],"content":"Noip2013模拟赛8(B组) 题目名称 提示问题 精度计算 魔兽世界 回家 存盘文件名 kviz Precision way Back 输入文件名 kviz**.in** Precision**.in** way**.in** Back**.in** 输出文件名 kviz**.out** Precision**.out** way**.out** Back**.out** 时限 1s 1s 1s 1s 内存限制 64M 64M 64M 64M 【注意事项】****：请自行完成题目，切勿讨论。 题1 提示问题(kviz)【问题描述】 最近在网上的一个流行游戏中，选手要回答很难的问题。假如在规定时间内不能回答，系统将给出1个提示，之后再依次给出第2，3个提示。出现在答案中的是字母和下列字符： “.”“,”“:”“;”“!”“?”“-”和空格（空格不会在开头和结尾出现） 字母是指：小写字母’a’…’z’ 大写字母 ‘A’…’Z’，其中aeiouAEIOU是元音字母。 生成提示的规则： 第1个提示：简单的将所有字母换成’.’即可； 第2个提示：从第1个提示而来，将所有字母的个数求出，再将总个数除以三，得到的最接近商的自然数N，将第1个提示中的前N个字母显示； 第3个提示：从第2个提示而来，将剩下的元音字母显示。假如没有可显示的元音字母，则从第1个提示而来，即我们将前2/3的字母显示（同样如不能被3整除则取最接近的整数）。 【输入格式】****kviz.in 仅一行，给出问题，问题字符数最多不超过50。 【输出格式】****kviz.out 三行：按规则输出的三行提示。 【输入样例1】 Upomoc! Lpv s nm pkrl sv smglsnk. 【输出样例1】 ……! … . .. …. .. …….. Upomoc! Lp. . .. …. .. …….. Upomoc! Lpv s nm pkrl s. …….. 【输入样例2】 lagab 【输出样例2】 ….. la… La.a. 题2 精度计算【问题描述】 输入两个10000以内的正整数X、Y，求X除以Y的值。要求精确到小数点后100位，如果在100位内出现循环节，请用括号标出。如：51/7＝7**.(285714)。 【输入格式】 两个整数中间有一个空格，前面的数字表示X，后面的数字表示Y。 【输出格式】 输出结果，一个高精度数。 【输入样例1】 51 7 【输出样例1】 7.**(285714) 【输入样例2】 21 7 【输出样例2】 3 题3 魔兽世界【问题描述】 小A来到厄运之槌开始单刷，厄运之槌的地图是一个N*M的矩形（N，M&lt;=100），上面遍布了小怪和传送门。例如(1表示有小怪，0表示无小怪，大写字母表示传送门)，传送门：例如，走到 B 传送门点将传送到另一个 B 传送门点（次数无限，但每次进入传送点只传送过去，不会在传送回来），数据保证每个传送门有且仅有相对应的另一个传送门。 而入口在左上方（1，1），BOSS却躲在右下方（N，M）。小A非常急切的想要完成单刷，所以，小A绝不会在小怪身上浪费时间(当然是绕开他们)，并且想通过传送门尽快到达BOSS身边。看啊看，想啊想，还是没找出最快的路。终于，灵机一动，想什么啊，编程呗! 【输入格式】way.in 第一行2个数据：n m； 下面n行，每行m个数（入口点和BOSS点无怪和传送门），表示厄运之槌的地图。地图数据之间无空格。每步只能走一格，方向上下左右。左上角为入口点，右下角为出口点。 【输出格式】way.out 一个整数，表示小A最少需要走多少步。如果小A不能走到目标，则输出No Solution. 【输入样例】 3 4 0000 00A0 A000 【输出样例】 4 【样例说明】路线如图： 【数据规模】 对60%的数据，n,m&lt;=20 对100%的数据，n,m&lt;=100 题4 back【题目描述】 Joe决定回家了。 Joe的家与公园之间并不是直达的，中间要经过一些道路。 值得一提的是，Joe所在的城市有n个路口，m条道路连接，公园在路口1，Joe的家在路口n。 Joe经过部分道路时要花费一些时间，这使得Joe很苦恼。 这是Joe买的云朵告诉Joe，它可以施展魔法，让其中一条道路的时间花费变成0，这让Joe喜出望外。 Joe希望能尽早的回到家，你可以告诉他施展魔法之后最少要多少时间回到家吗？ 【输入描述】 第一行，n，m，意义如题目所述 第2~m+1行，每行ui,vi,ci,表示从ui走到vi需要ci的时间 【输出描述】 一行，Joe到家的最少时间 【输入样例】 3 2 1 2 3 2 3 2 【输出样例】 2 【样例解释】 把从1到2的路置成0 【数据范围】 20%的数据保证：n&lt;=20 100%的数据保证：n&lt;=1,000;m&lt;=100,000;0&lt;=ci&lt;=10,000"},{"title":"模拟题1103上【仅题目】","date":"2018-11-03T00:54:21.000Z","url":"/2018/11/03/%E6%A8%A1%E6%8B%9F%E9%A2%981103%E4%B8%8A%E3%80%90%E4%BB%85%E9%A2%98%E7%9B%AE%E3%80%91/","tags":[["普及组","/tags/%E6%99%AE%E5%8F%8A%E7%BB%84/"]],"categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"]],"content":"1、Second电子表上的时间显示方法形如xx:xx:xx，现在给出一个时间，单位是秒，要求按照电子表格式输出。 输出保证不会超过24小时。 样例输入1 1 样例输出1 00:00:01 样例输入2 3701 样例输出2 01:01:41 2、eggs问题描述 蛋炒饭是Will经常挂在嘴边的一道菜，小R早就神往不已。Will告诉 小R，做蛋炒饭是一定需要蛋的，而且还要把蛋壳弄碎。于是小R找了几个 鸡蛋，刚刚准备下手，却发现这些鸡蛋坚硬无比。 于是小R想到了把鸡蛋从摩天大楼上扔下去，以此来测试它们的硬度。 所有的鸡蛋硬度都一样。如果鸡蛋从第_L_层摔下去没有碎，而在_L_ + 1层摔 碎了，那么称鸡蛋的硬度是_L_。嗯，小R反正也不能用从摩天大楼上面摔 碎的鸡蛋来做蛋炒饭，所以不用担心浪费的问题。大楼共有_N_层高，如果 在_N_层还没有摔碎，就认为硬度是_N_；如果在第1层就碎了，硬度为0。 现在小R希望你告诉他，用这么多鸡蛋，最少摔几次就可以保证测试出 它们的硬度。 限制时间：1000MS；内存：64MB 输入格式一行两个正整数，用空格隔开，没有多余字符。分别是_M_和_N_。 输出格式输出你的测试次数。 输入样例eggs.in 1 10 输出样例eggs.out 10 样例解释 由于只有一个鸡蛋，所以只好一层层试。鸡蛋一旦摔碎，就不能再使 用了。 数据范围 1&lt;=M,N&lt;=100 3、星星stars问题描述 天上有很多星星，小R很花痴地和Will一起去看星星。由于眼神不太 好，小R每次只能看到一个_W_ _ H_的矩形区域。而每一个星星都是有它自 身的亮度的，小R希望在这种困难的情况下还能看到更多的星光，也就是 在_W _ _H_的矩形区域中，所有的星星的亮度之和最大。 输入格式 第一行三个正整数，用空格隔开，分别表示_N_、_W_、_H_，也就 是星星的数量和矩形区域的水平和垂直长度。 以下的N行，每行三个整数，用空格隔开，分别是每一颗星星的坐标_x_、 _y_和亮度。星星的亮度的范围是1到100。 输出格式 输出最大的亮度和，一行一个整数。 输入样例 stars.in 3 5 4 1 2 3 2 3 2 6 3 1 输出样例 stars.out 5 数据范围 30%的数据N &lt;=300。 100%的数据N &lt;=1000。 4.无题noname问题描述 这个题目之所以叫做无题，其实是因为小R根本想不出一个好的背景。 说白了这其实是一个纯粹的数学题。 给定一个_N_，求出所有的_x_，使得_x_2 _ 1 (mod N)。 限制时间：1000MS；内存：64MB 输入格式一行一个正整数，没有多余字符，表示_N_。 输出格式输出所有的_x_，一行一个。 输入样例noname.in 7 输出样例noname.out 1 6 数据范围 30%的数据_N_ _ 20000； 100%的数据_N_ _ 2000000000。"},{"title":"模拟题1020下【仅题目】","date":"2018-10-27T02:45:21.000Z","url":"/2018/10/27/%E6%A8%A1%E6%8B%9F%E9%A2%981020%E4%B8%8B%E3%80%90%E4%BB%85%E9%A2%98%E7%9B%AE%E3%80%91/","tags":[["NOIP","/tags/NOIP/"],["复赛","/tags/%E5%A4%8D%E8%B5%9B/"],["普及组","/tags/%E6%99%AE%E5%8F%8A%E7%BB%84/"]],"categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"]],"content":"NOIP****普及组模拟题（面包人系列）名字 文件格式 空间限制 时间限制 面包人做面包 makebread.pas/.cpp/.c 256M 1S 面包人灭灯泡 offlamp.pas/.cpp/.c 256M 1S 面包人找面包 findbread.pas/.cpp/.c 256M 1S 面包人找泻药 breadzxy.pas/.cpp/.c 256M 1S 第一题：面包人做面包（makebread.pas/.cpp/.c）【题目描述】 面包人都是做面包的好手。他们可以用手斩断面团条就可以造出面包。 但是，每一个面包人都有强迫症，他们见不得长度不为整数的面包。 而且，面包人不喜欢做重复的事情，于是，他们想知道，长度为n的面团条做成k条面包到底有多少种切割的方案，必须把一块面条团用完就好了——每一块面包的长度相同但拜访位置不同不算一种（例如：1 2 1与2 1 1算两种）。 又因为面包人是二进制生物，太大的数字会让他们没有草稿纸用，于是，只要输出答案mod 100003就好了。 【输入描述】 一行输入n和k。 【输出描述】 输出可行的方案数（mod 100003）。（PS：至于为什么要mod而不是高精度，其实只是作者懒得写罢了） 【输入样例】 5 3 【输出样例】 6 【样例解释】 1:1 1 3 2:1 3 1 3:3 1 1 4:1 2 2 5:2 1 2 6:2 2 1 【数据范围】 30%的数据：0&lt;=k&lt;=n&lt;=100 60%的数据：0&lt;=k&lt;=n&lt;=10000 100%的数据：0&lt;=k&lt;=n&lt;=100000 第二题：面包人灭灯泡（offlamp.pas/.cpp/.c）【题目描述】 一次面包人做的面包因为灯泡太热而全部烤糊了，面包人十分的伤心。他觉得这一切都是灯泡的错（明明就是你把电灯泡乱放就去秀恩爱），所以，面包人发誓要大闹电灯泡工厂。 电灯泡工厂总共有n个位置，每个位置都有一个电灯泡，每个电灯泡都有两种状态。0表示关，1表示开。面包人觉得这么多电灯泡聚在一起能产生的热量能毁灭世界。面包人为了保卫世界的和平，于是他决定要关掉电灯泡。 当面包人把电灯泡全部关掉的时候，电灯泡工厂就会因为没有热能造电而失去作用，也就是说当电灯泡全部关掉的时候面包人就拯救了世界。 因为面包人是面包人，所以他有三只手，而他每次只能也必须改变三个电灯泡的状态。 然而，电源每秒能产生1xea的热量，当热量达到k时，世界就会砰的一声毁灭了。 那么，现在问题来了（挖掘机到底哪家强？）面包人能不能拯救面包球，如果能，输出最小的时间，否则输出‘lamp kill the world!’不加引号。（当然是蓝翔） 【输入描述】 输入一行n,k，n为电灯泡工厂的位置的个数，k为面包球所能承受的热量。 一行数字，表示第i个数字表示第i电灯泡的状态，0表示关，1表示开。 【输出描述】 输出面包人拯救面包球用的时间，如果世界毁灭了，输出’lamp kill the world!’（不加引号）。 【输入样例】 样例一： 5 1 0 1 1 0 0 样例二： 5 2 0 1 1 0 0 【输出样例】 样例一： lamp kill the world! 样例二： 2 【样例解释】 样例二： Time1：0 1 0 1 1 xea:1（time1） Time2：0 0 0 0 0 xea:2（time2世界毁灭，输出’ lamp kill the world!’） 【数据范围】 30%的数据：0&lt;=k&lt;=n&lt;=100 60%的数据：0&lt;=k&lt;=n&lt;=10000 100%的数据：0&lt;=k&lt;=n&lt;=1000000 第三题：面包人找面包（findbread.pas/.cpp/.c）【题目描述】 面包人有一天不想做面包了，可是，他不做面包就没有食物。没有食物就生存不下去。生存不下去就丧失了希望。如果丧失了希望，那么，面包人就会十分的愤怒。就会怀疑世界和社会主义核心价值观，于是，面包人就会毁灭世界了。要是面包人今天吃不到面包，他就会跑去电灯泡工厂把灯泡全部打开，然后毁灭世界。 为了防止世界被破坏，为了保卫世界的和平，贯彻爱与真实的邪恶，可爱又迷人的反派角色~~~武藏、小次郎（面包，面包人），白洞，白色的明天等着我们（面包，远处的面包等着我们！）！就是这样，喵(&gt;^ω^&lt;)~~（以上与题目一点关系也没有，只是作者无聊打上去的，给你们一个美好的童年回忆。） 面包人是生活在一个n*m的地图中，他要从[1,1]的位置走到[n,m]的位置那里去拿面包，但是，面包人跟火箭队一样懒，完全不想走多余的路径，于是他就想要你求出最短的时间，并且要输出路径（优先向下，就是如果有最短的相同路径，先向下走的优先输出）。（火箭队！！！！！）（只能向右或者向下走，不要问我为什么） 【输入描述】 输入一行n,m。 接下来n行，每行m个数字，表示在这个地方所要消耗的时间。 【输出描述】 一行输出最短的时间。 接下来n+m行，表示火箭队（面包人）所经过的地方，用数对表示。 【输入样例】 4 4 1 2 2 1 2 1 1 2 2 1 1 2 1 3 1 1 【输出样例】 8 1 1 2 1 2 2 3 2 3 3 4 3 4 4 【数据范围】 30%的数据：0&lt;=n,m&lt;=20 60%的数据：0&lt;=n,m&lt;=100 100%的数据：0&lt;=n,m&lt;=1000 第四题：面包人找泻药（breadzxy.pas/.cpp/.c）【题目描述】 面包人终于找到了一块面包，但是，这块面包却掉进了污水里。面包人是一个非常节俭的人，并且，他相信食物掉到地上三秒内捡起来就不会有事情发生（因为细菌在三秒内不会活动（此动作太过危险，小朋友在家不要私自模仿））。于是，面包人就拉肚子了。 面包人所在的面包次元是一个奇怪的次元，这个次元里面有n个地点，有m条路，而每一条路都是单向的。其中，有k个地点里面有泻药。而面包人能选择他的出生点（就是起点），而他要找到两份泻药才能够脱离拉肚子拉死的危机。为了防止面包人拉死，我们应该要帮助他求出他所走的最短路径。 【输入描述】 输入一行n,m,k。 接下来m行，每行有三个整数x,y,z，表示x到y之间有一条单向长度为z的边。 最后一行有k个不相等的整数，表示含有泻药的地点的编号。 【输出描述】 输出最短的距离。 （实际上就是要输出在k个有泻药的地点中任意两个点的最短距离） 【输入样例】3 2 21 2 12 3 11 3【输出样例】2 【样例解释】 从传送点1经过点2再到点3为最短路，距离为2。如果还看不懂题目的话，我再简单地讲一下吧。就是有一张n个点的图，其中有k个点可以作为起点，也可以作为终点，求任意两个传送点中最短的那一条路就好了。 【数据范围】 30%的数据：n&lt;=15,m&lt;=30 60%的数据：n&lt;=1000,m&lt;=10000 100%的数据：n&lt;=100000,m&lt;=100000,2&lt;=k&lt;=n,1&lt;=z&lt;2^31"},{"title":"模拟题1020上【仅题目】","date":"2018-10-27T02:42:39.000Z","url":"/2018/10/27/%E6%A8%A1%E6%8B%9F%E9%A2%981020%E4%B8%8A%E3%80%90%E4%BB%85%E9%A2%98%E7%9B%AE%E3%80%91/","tags":[["NOIP","/tags/NOIP/"],["复赛","/tags/%E5%A4%8D%E8%B5%9B/"],["普及组","/tags/%E6%99%AE%E5%8F%8A%E7%BB%84/"],["2013","/tags/2013/"],["常乐一中模拟","/tags/%E5%B8%B8%E4%B9%90%E4%B8%80%E4%B8%AD%E6%A8%A1%E6%8B%9F/"]],"categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"]],"content":"Noip2013模拟赛3(A组)题目名称 圆国旅行 A-B Couple number 混乱队列 存盘文件名 Country Dec couple Zbrka 输入文件名 Country.in Dec.in Couple.in zbrka.in 输出文件名 Country.out Dec.out Couple.out zbrka.out 时限 1s 1s 1s 1s 内存限制 128M 128M 128M 128M 【注意事项】****：请自行完成题目，切勿讨论。 题1 圆国旅行【问题描述】 圆国是一个国家，它包含几个圆形地区。有些地区可能位于内其他地区，但其边界不相交或触摸。 Qatam是圆国的乡村居民。当他在两个地点之间旅行，他总是试图跨越过尽可能少的边界地区，因为跨越地区边界通常是费力的任务。 【输入】 输入文件名为country.in。有多组测试数据： 第一行，包含一个整数Num，表示测试数据的个数。（1&lt;=Num&lt;=10） 每组测试数据，第一行一个整数N，表示共有N个地区。1&lt;=N&lt;=50. 接下来三行，每行N个整数，前两行分别表示每个地区的x坐标和y坐标[-1000,1000]，第三行表示该地区圆的半径r[1,1000]。 最后4个整数，分别表示Qatam的起点和目标点x1,y1,x2,y2[-1000,1000]。 【输出】 输出文件country.out共Num行，最少穿过的边界数目。 【输出输出样例】 country.in country.out 5 1 0 0 2 -5 1 5 1 3 0 -6 6 0 1 2 2 2 2 -5 1 5 1 7 1 -3 2 5 -4 12 12 1 -1 2 5 5 1 1 8 1 2 1 1 1 2 -5 1 12 1 8 -3 2 2 0 -4 12 12 12 -1 2 3 1 5 1 1 1 1 3 1 7 1 1 2 3 2 3 13 2 12 -107 -38 140 148 -198 172 -179 148 176 153 -56 -187 175 -115 23 -2 -49 -151 -52 42 0 68 109 -174 135 42 70 39 89 39 43 150 10 120 16 8 102 16 19 -108 0 2 3 5 3 【说明】 前4组情况如图： 题2 A-B【问题描述】 出题是一件痛苦的事情！ 题目看多了也有审美疲劳，于是我舍弃了大家所熟悉的A+B Problem，改用A-B了哈哈！ 好吧，题目是这样的：给出一串数以及一个数字C，要求计算出所有A-B=C的数对的个数。（不同位置的数字一样的数对算不同的数对） 【输入格式】 第一行包括2个非负整数N和C，中间用空格隔开。 第二行有N个整数，中间用空格隔开，作为要求处理的那串数。 【输出格式】 输出一行，表示该串数中包含的所有满足A-B=C的数对的个数。 【输入输出样例】 dec.in dec.out 4 1 1 1 2 3 3 【数据规模】 对于90%的数据，N &lt;= 2000； 对于100%的数据，N &lt;= 200000。 所有输入数据都在longint范围内。 题****3 Couple Number【问题描述】 任何一个整数N都能表示成另外两个整数a和b的平方差吗？如果能，那么这个数N就叫做Couple number。你的工作就是判断一个数N是不是Couple number。 【输入格式】 仅一行，两个长整型范围内的整数n1和n2，之间用1个空格隔开。 【输出格式】 输出在n1到n2范围内有多少个Couple number。 注意：包括n1和n2两个数，且n1&lt;n2，n2 - n1 &lt;= 10 000 000。 【输入样例】 1 10 【输出样例】 7 题4 混乱队列(zbrka)【问题描述】 N位大牛排成一队，大牛的实力被编号为1~N（每位牛的实力两两不同），本来应该从1排到N，但他们排队常常出现混乱。有人认为是某些牛过于谦让，然而TH不是这么认为。 TH经过仔细推敲，做出如下定义： 一个队列的混乱程度正是逆序对数!序列(1, 4, 3, 2)的混乱程度为3，因为它含有三对逆序对(4, 3), (4, 2), (3, 2)。 一号牛每天都会在他的手册上写上两个新的数N、C，而他当天的计算机密码这是N位大牛排成混乱程度为C的队列的不同排列方式总数mod 1 000 000 007！ 【输入格式】 仅含一行两个数,N和C (1 ≤ N ≤ 1000, 0 ≤ C ≤ 10000). 【输出格式】 一号牛当天的密码。 【输入输出样例】 input 10 1 output 9 input 4 3 output 6 input 9 13 output 17957"},{"title":"模拟题1027下【仅题目】","date":"2018-10-27T02:38:16.000Z","url":"/2018/10/27/%E6%A8%A1%E6%8B%9F%E9%A2%981027%E4%B8%8B%E3%80%90%E4%BB%85%E9%A2%98%E7%9B%AE%E3%80%91/","tags":[["NOIP","/tags/NOIP/"],["复赛","/tags/%E5%A4%8D%E8%B5%9B/"],["普及组","/tags/%E6%99%AE%E5%8F%8A%E7%BB%84/"],["2013","/tags/2013/"],["常乐一中模拟","/tags/%E5%B8%B8%E4%B9%90%E4%B8%80%E4%B8%AD%E6%A8%A1%E6%8B%9F/"]],"categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"]],"content":"Noip2013模拟赛9(B组)题目名称 M****国王 塔 营救 八数码 存盘文件名 king tower rescu eight 输入文件名 king.in tower.in rescu.in eight.in 输出文件名 king.out tower.out rescu.out eight.out 时限 2s 1s 1s 1s 内存限制 64M 256M 64M 64M 【注意事项】****：请自行完成题目，切勿讨论。 题1 m国王(king.pas king.c king.cpp) 时限2秒 描述： 天天都是n皇后，多么无聊啊。 我们来一道m国王游戏吧！ 题目是这样的，在n*n的格子里放m个国王，使他们不互相攻击，有多少种放法呢？（可以为0） 注意国王只能向任意的八个方向（左上，左，左下，下，右下，右，右上，上）走一步。 输入(king.in)：n,m 输出(king.out)：方案数 样例输入： 2 1 样例输出 4 数据范围： 100%的数据满足n&lt;=8,m&lt;=n*n （保证正常代码可以在时限内通过） 题2 塔（tower.pas/tower.c/tower.cpp） 时限1s，内存256MB 【题目描述】 有N(2&lt;=N&lt;=600000)快砖，要搭一个N层的塔，要求：如果砖A在砖B上面（直接接触），那么A不能比B的长度+D要长。问有几种方法,输出 答案 mod 1000000009的值. 【输入格式】 第一行： N，D 第二行： N个数，表示每块砖的长度。 【输出格式】 方案数，输出要mod 1000000009 【样例输入】 4 1 1 2 3 100 【样例输出】 4 题3 营救 (rescu.cpp rescu.pas rescu.c) 时限1秒 描述： “咚咚咚……”“圆通快递。”原来是快递来了，现在哪里找这么热心送上门的快递员啊！小明感动的热泪盈眶，开起了门…… 妈妈下班回家，街坊邻居说小明被一个陌生人强行押上了警车！妈妈丰富的经验告诉她小明被带到了t区，而自己在s区。 该市有m条大道连接n个区，一条大道将两个区相连接，每个大道有一个拥挤度。小明的妈妈虽然很着急，但是不愿意拥挤的人潮冲乱了她优雅的步伐。所以请你帮她规划一条从s至t的路线，使得经过道路的拥挤度最大值最小。 输入：(rescu.in) 第一行四个数字n，m，s，t。 接下来m行，每行三个数字，分别表示两个区和拥挤度。 （有可能两个区之间有多条大道相连。) 输出：(rescu.out) 输出题目要求的拥挤度。 样例输入： 样例输出： 3 3 1 3 2 1 2 2 2 3 1 1 3 3 数据范围 30% n&lt;=10 60% n&lt;=100 100% n&lt;=10000,m&lt;=2n，拥挤度&lt;=10000 题目保证1&lt;=s,t&lt;=n且s&lt;&gt;t，保证可以从s区出发到t区。 样例解释： 小明的妈妈要从1号点去3号点，最优路线为1-&gt;2-&gt;3。 题4 八数码描述 Description 在3×3的棋盘上，摆有八个棋子，每个棋子上标有1至8的某一数字。棋盘中留有一个空格，空格用0来表示。空格周围的棋子可以移到空格中。要求解的问题是：给出一种初始布局（初始状态）和目标布局（为了使题目简单,设目标状态为123804765），找到一种最少步骤的移动方法，实现从初始布局到目标布局的转变。 输入格式 InputFormat 输入初试状态，一行九个数字，空格用0表示 输出格式 OutputFormat 只有一行，该行只有一个数字，表示从初始状态到目标状态需要的最少移动次数(测试数据中无特殊无法到达目标状态数据) 样例输入 SampleInput 283104765 样例输出 SampleOutput 4"},{"title":"模拟题1027上【仅题目】","date":"2018-10-27T02:32:12.000Z","url":"/2018/10/27/%E6%A8%A1%E6%8B%9F%E9%A2%981027m%E3%80%90%E4%BB%85%E9%A2%98%E7%9B%AE%E3%80%91/","tags":[["NOIP","/tags/NOIP/"],["复赛","/tags/%E5%A4%8D%E8%B5%9B/"],["普及组","/tags/%E6%99%AE%E5%8F%8A%E7%BB%84/"]],"categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"]],"content":"1、第k小数(kth)题目描述 问题很简单，给出N个数，求出其中第K小的数是多少。 输入格式 第一行两个整数N,K，中间用空格隔开。 接下来N行，每行一个数，即给出的N个数。 输出格式 一个整数，表示第K小的数。 样例 kth.in 5 3 1 3 3 4 5 kth.in 3 数据范围 对于40%的数据，N&lt;=1000，K&lt;=100。 对于100%的数据，N&lt;=100000，K&lt;=100。 给出的数小于2^31-1。 2、提示问题(kviz)题目描述 最近在网上的一个流行游戏中，选手要回答很难的问题。假如在规定时间内不能回答，系统将给出1个提示，之后再依次给出第2，3个提示。出现在答案中的是字母和下列字符： “.”“,”“:”“;”“!”“?”“-”和空格（空格不会在开头和结尾出现） 字母是指：小写字母’a’…’z’ 大写字母 ‘A’…’Z’，其中aeiouAEIOU是元音字母。 生成提示的规则： 第1个提示：简单的将所有字母换成’.’即可； 第2个提示：从第1个提示而来，将所有字母的个数求出，再将总个数除以三，得到的最接近商的自然数N，将第1个提示中的前N个字母显示； 第3个提示：从第2个提示而来，将剩下的元音字母显示。假如没有可显示的元音字母，则从第1个提示而来，即我们将前2/3的字母显示（同样如不能被3整除则取最接近的整数）。 输入格式 仅一行，给出问题，问题字符数最多不超过50。 输出格式 三行：按规则输出的三行提示。 样例1 kviz.in Upomoc! Lpv s nm pkrl sv smglsnk. kviz.out ……! … . .. …. .. …….. Upomoc! Lp. . .. …. .. …….. Upomoc! Lpv s nm pkrl s. …….. 样例2 kviz.in lagab kviz.out ….. la… la.a. 3****、“非常男女”计划(plan)题目描述 Matrix67已经当过多次“媒人”了。他因此获得了许多经验。例如，距Matrix67观察，身高相近的人似乎比较合得来。 Matrix67在学校策划了一次大型的“非常男女”配对活动。对于这次活动的参与者，Matrix67有自己独特的选择方式。他希望能选择男女人数相等且身高都很接近的一些人。这种选择方式实现起来很简单。他让学校的所有人按照身高排成一排，然后从中选出连续的若干个人，使得这些人中男女人数相等。Matrix67当然希望他能选出的人越多越好。请编写程序告诉他，他最多可以选出多少人来。 输入格式 第一行有一个正整数n，代表学校的人数。 第二行有n个用空格隔开的数，这些数只能是0或1，其中，0代表一个女生，1代表一个男生。 输出格式 输出一个非负整数。这个数表示在输入数据中最长的一段男女人数相等的子序列长度。 如果不存在男女人数相等的子序列，请输出0。 样例 plan.in 9 0 1 0 0 0 1 1 0 0 plan.out 6 样例说明 选择第2个人至第7个人可以获得男女人数均为3的最长子序列。 数据规模 对于30%的数据，n&lt;=100； 对于50%的数据，n&lt;=1 000； 对于100%的数据，n&lt;=100 000。 4****、课题选择(choose)题目描述 Matrix67要在下个月交给老师n篇论文，论文的内容可以从m个课题中选择。由于课题数有限，Matrix67不得不重复选择一些课题。完成不同课题的论文所花的时间不同。具体地说，对于某个课题i，若Matrix67计划一共写x篇论文，则完成该课题的论文总共需要花费Ai*x^Bi个单位时间（系数Ai和指数Bi均为正整数）。给定与每一个课题相对应的Ai和Bi的值，请帮助Matrix67计算出如何选择论文的课题使得他可以花费最少的时间完成这n篇论文。 输入格式 第一行有两个用空格隔开的正整数n和m，分别代表需要完成的论文数和可供选择的课题数。 以下m行每行有两个用空格隔开的正整数。其中，第i行的两个数分别代表与第i个课题相对应的时间系数Ai和指数Bi。 输出格式 输出完成n篇论文所需要耗费的最少时间。 样例 choose.in 10 3 2 1 1 2 2 1 choose.out 19 样例说明 4篇论文选择课题一，5篇论文选择课题三，剩下一篇论文选择课题二，总耗时为2*4^1+1*1^2+2*5^1=8+1+10=19。可以证明，不存在更优的方案使耗时小于19。 数据规模 对于30%的数据，n&lt;=10,m&lt;=5； 对于100%的数据，n&lt;=200，m&lt;=20，Ai&lt;=100，Bi&lt;=5。"},{"title":"2014年宁波市第29届中小学生计算机程序设计竞赛 初中组初赛c语言试题","date":"2018-09-08T00:21:18.000Z","url":"/2018/09/08/2014%E5%B9%B4%E5%AE%81%E6%B3%A2%E5%B8%82%E7%AC%AC29%E5%B1%8A%E4%B8%AD%E5%B0%8F%E5%AD%A6%E7%94%9F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B-%E5%88%9D%E4%B8%AD/","tags":[["初赛","/tags/%E5%88%9D%E8%B5%9B/"],["宁波","/tags/%E5%AE%81%E6%B3%A2/"]],"categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"]],"content":"2014年宁波市第29****届中小学生计算机程序设计竞赛 初中组初赛c语言试题 （说明：答案请写在答题卷上。考试时间120分钟，满分100分） 一、选择题（每题有且仅有一个正确答案，选对得1.5分，选错. 不选或多选均不得分） 计算机主机最主要是由CPU 与（ ）构成的： （A）控制器 （B）运算器 （C）输入、输出设备 （D）内存储器 操作系统是重要的系统软件,下面几个软件中不属于操作系统的是： （A）MS-DOS （B）linux （C）PASCAL （D）Win8 在计算机网络中，IP地址127.0.0.1表示： （A）局域网 （B）本地主机 （C）空白页 （D）CCF NOI官网 无线局域网络的英文缩写是： （A）Lan （B）Wlan （C）Wan （D）wifi 以下哪个不是常见智能手机的操作系统： （A）Symbian （B）Android （C）iOS （D）wifi 第四代移动通信技术即4G是集3G与WLAN于一体，它最高能以多少bps的速度下载： （A）100M （B）10M （C）20M （D）50M 如果只运行一个普通的串行程序，采用四核CPU的电脑与双核电脑相比（假设其他配置均相同）： （A）运行速度几乎差不多 （B）运行速度是原来2倍 （C）运行速度是原来4倍 （D）运行速度是原来8倍 在下面各世界顶级的奖项中，为计算机科学与技术领域作出杰出贡献的科学家设立的奖项是： （A）沃尔夫奖 （B）诺贝尔奖 （C）菲尔兹奖 （D）图灵奖 以下哪个是指可以显示网页服务器或者文件系统的HTML文件内容，并让用户与这些文件交互的一种软件： （A）计算器 （B）浏览器 （C）电子邮件 （D）编译器 十进制数100.625等值于二进制数： （A）1001100.101 （B）1100100.101 （C）1100100.011 （D）1001100.11 体育课的铃声响了，同学们都陆陆续续地奔向操场，按老师的要求从高到矮站成一排。每个同学来到操场时，都从排尾走向排头，找到第一个比自己高的同学，并站在他的后面。这种站队的方法类似于以下哪个算法： （A）快速排序 （B）插入排序 （C）冒泡排序 （D）归并排序 对有序数组{5,13,19,21,37,56,64,75,88,92,100}进行二分查找，等概率情况下，查找成功的平均查找长度（平均比较次数）是： （A）35/11 （B）34/11 （C）33/11 （D）32/11 由3个a，1个b和2个c构成的所有字符串中，包含子串“abc”的共有几个： （A）20 （B）8 （C）12 （D）16 递归过程和函数调用时，处理参数和返回地址，通常使用哪种数据结构： （A）队列 （B）线性表 （C）链表 （D）栈 设栈S的初始状态为空，元素a，b，c，d，e，f依次入栈，出栈顺序为b，d，c，f，e，a那么栈容量至少应该是： （A）6 （B）5 （C）4 （D）3 满二叉树的叶结点个数为N，则它的结点总数为： （A）N （B）2 * N （C）2 * N – 1 （D）2 * N + 1 在含有n个元素的双向链表中查询是否存在关键字为k的元素，最坏情况下运行的时间是： （A） Θ(1) （B） Θ(log n) （C） Θ(n) （D） Θ(n log n) 假设A=true,B=false,C=ture,D=ture,逻辑运算表达式A∧B∨C∧D的值是（ ）。 （A）ture （B）false （C））0 （D）1 一个有n个顶点的无向图（无重边）最多有几条边： （A）n （B）n（n -1） （C）n (n -1)/2 （D）2n 现有4个砝码，重量分别为1克、2克、4克和8克。那么可以称出几种不同重量的物体（物体重量必须大于0）： （A）12 （B）13 （C）14 （D）15 二、问题求解（每小题5分，共10分） 现有80枚硬币，其中有一枚是假币，其重量稍轻，所有真币的重量都相同。如果使用不带砝码的天平称重，最坏情况下最少需要称____次，就一定可以找出假币？ 5男5女围着一张圆桌坐下，要求男女隔位就座，问有____种不同的方案？两个方案相同，当且仅当经过一定的旋转（不允许翻转），每个座位上的人都相同。 三、阅读程序写结果（每题8分，共32分） #include&lt;stdio.h&gt; int main() { int a[10]; int s,t,i,j; a[1]=1; t=0; for(i=2;i&lt;=6;i++) { s=0; for(j=1;j&lt;=i-1;j++) s+=a[j]; a[i]=s+1; } t=0; for(i=1;i&lt;=6;i++) t+=a[i]; printf(“t=%d\\n”,t); } 输出： 2. #include&lt;stdio.h&gt; int gd(int m,int n) { if(n==0) return m; return gd(n,m%n); } int main() { int a,b,f; scanf(“%d%d”,&amp;a,&amp;b); printf(“(%d,%d)=”,a,b); f=gd(a,b); printf(“%d\\n”,f); } 输入: 172 16 输出： 3. #include&lt;stdio.h&gt; #include&lt;string.h&gt; int visited[200],e[200][200]; int n,m,ans,i,j,a,b,c; void dfs(int x,int len) { int i; visited[x]=1; if(len&gt;ans) ans=len; for(i=1;i&lt;=n;i++) if(!visited[i] &amp;&amp; e[x][i]!=-1) dfs(i,len+e[x][i]); visited[x]=0; } int main() { scanf(“%d%d”,&amp;n,&amp;m); for(i=1;i&lt;=n;i++) for(j=1;j&lt;=n;j++) e[i][j]=-1; for(i=1;i&lt;=m;i++) 输入： 4 6 1 2 10 2 3 20 3 4 30 4 1 40 1 3 50 2 4 60 输出: { scanf(“%d%d%d”,&amp;a,&amp;b,&amp;c); e[a][b]=c; e[b][a]=c; } memset(visited,0,sizeof(visited)); ans=0; for(i=1;i&lt;=n;i++) dfs(i,0); printf(“%d\\n”,ans); } #include&lt;stdio.h&gt; #include&lt;string.h&gt; int p[200],e[200]; int n,i,m,ans; int pow(int x,int w) { int i,ret; ret=1; for(i=1;i&lt;=w;i++) ret*=x; return ret; } int main() { scanf(“%d”,&amp;n); m=0; i=2; while(n!=1) { if(n%i==0){ m++; p[m]=i; e[m]=0; while(n%i==0) { e[m]++; n/=i; } } i++; } ans=1; for(i=1;i&lt;=m;i++) ans=ans*(p[i]-1)*pow(p[i],e[i]-1); printf(“%d\\n”,ans); } 输入： 19800 输出： 四．程序填空（前2空，每空2分，后8空，每空3分，共28分） 输入一个正整数n（2 &lt;= n &lt;= 106），以及n个不同的正整数（范围在1 &lt;= a[i]&lt;= n）。这n个数可以理解为n的一种排列，假设（1，2，3，4，……，n）是第1个排列，（n,n-1,n-2,……,1）是最后一个排列，根据这n个数组成的排列，输出下一个排列，每个数后输出一个空格;若这n个数已经是最后一个排列，输出“No Next Permutation”。 #include&lt;stdio.h&gt; #include&lt;string.h&gt; 输出： 1 3 2 4 5 输入： 5 1 2 5 4 3 int n,num,i,mid,t; int a[1000009],b[1000009]; int main() { scanf(“%d”,&amp;n); for(i=1;i&lt;=n;i++) scanf(“%d”,&amp;a[i]); num=0; i=n; while(i&gt;1) { if( （1） ){ num++; b[num]=a[i]; } else{ num++; b[num]=a[i]; num++; （2） ; mid=i-2; break; } i–; } if(i==1) （3） ; else { for(i=1;i&lt;=num-1;i++) if( （4） ){ t=b[i]; b[i]=b[num]; b[num]=t; break; } for(i=1;i&lt;=mid;i++) printf(“%d “,a[i]); printf(“%d “,b[num]); for(i=1;i&lt;=num-1;i++) （5） ; puts(“”); } } 某地共派出M名选手参加宁波市程序设计竞赛，现在他们正赶往火车站参加比赛。火车站共有N(1&lt;=N&lt;=100000)个检票口。由于检票员的操作速度不同，每个检票口的通行速度也就不同，平均测量，第k个检票口的速度为每人Tk秒（范围在[1, 109]）。 在候车时，精于计算的选手们就开始思考，假设一开始所有检票口都处于准备状态，每个检票口一次只能通过一人。那么M（2 &lt;= M &lt;= 109）名选手至少需要多少时间全部通过检票口。输入N，M，以及N个检票口的检票时间。求最少全部通过时间。 输出： 8 输入： 7 10 3 8 3 6 9 2 4 #include&lt;stdio.h&gt; #define ll long long int a[100009]; int n,m; int check(ll mid) { ll sum; int i; sum=0; for(i=1;i&lt;=n;i++) { sum= （1） ; if(sum&gt;=m) （2） ; } return 0; } int main() { int i; ll left,right,mid; scanf(“%d%d”,&amp;n,&amp;m); for(i=1;i&lt;=n;i++) scanf(“%d”,&amp;a[i]); left=0; right=a[1]; right*=m; while(left&lt;right){ mid=(left+right)/2; if( （3） ) right=mid; else （4） ; } （5） ; }"},{"title":"后山特遣队OJ简报 2018.8","date":"2018-08-19T06:54:26.000Z","url":"/2018/08/19/%E5%90%8E%E5%B1%B1%E7%89%B9%E9%81%A3%E9%98%9Foj%E7%AE%80%E6%8A%A5-2018-8/","categories":[["后山特遣队","/categories/%E5%90%8E%E5%B1%B1%E7%89%B9%E9%81%A3%E9%98%9F/"]],"content":"啊，又一个暑假即将成为历史……接着就是： 后山特遣队OJ被百度收录啦！百度”后山特遣队2.0”或”后山特遣队在线评测”就可以看到了。 后山特遣队新增积分功能。总算是实现了学委同学在公告中提到的那个得分方式了。AC后刷新一下状态页面，看到你的AC记录上带感叹号，不要犹豫，速速点开领取功勋！详情请见后山特遣队OJ的积分制。 当然还支持积分码功能，这个功能的初衷是方便不同商店货币之间的转换（例如用一定数量其他商店的积分在那个商店购买OJ的积分码而设置的）。这对于即将出现的商店来说是个好主意。但你放心，后山特遣队OJ是不会变成RMB的世界的。商店功能将于OJ功能分开。积分码不会生成威望和功勋（OIer战绩的评价标准）。详情请见后山特遣队的积分码。 后山特遣队有了一个下载站，可以在东南下载站中找到，这里将用于给OIer们分享免费下载或积分兑换资源。这里是传送门。 后山特遣队因为更新的缘故，以前注册的账户都不见了，麻烦各位重新注册一下。 "},{"title":"后山特遣队的积分码","date":"2018-08-19T06:41:23.000Z","url":"/2018/08/19/%E5%90%8E%E5%B1%B1%E7%89%B9%E9%81%A3%E9%98%9F%E7%9A%84%E7%A7%AF%E5%88%86%E7%A0%81/","categories":[["后山特遣队","/categories/%E5%90%8E%E5%B1%B1%E7%89%B9%E9%81%A3%E9%98%9F/"]],"content":"通过一定渠道获取的积分码可以在指定页面换到积分。（但OIer的评价标准是功勋和威望，积分码功能不会增加功勋和威望） 因为考虑到种花兔的积分商城（主营积分资源下载）可能跟学委的积分商城（预订零食和奇怪网站的黄金会员）不在同一个网站，为方便两站的交流特推出积分码功能。未来比赛的额外奖励可能也是积分码。 后山特遣队OJ 2.0的积分码兑换页面在导航栏“更多功能”—&gt;“积分码兑换积分”，需登录后才能操作。 以下是开放调试的五个红包（每个红包只能领一次）。队友们到OJ上注册一个账户后自己领吧。（最好在这里回复一下自己领了哪个红包） 红包的名字 积分码 过期日期 Red Packets 01 1DB629790F 2018-8-31 23:59:59 Red Packets 02 FA7F309A42 2018-8-31 23:59:59 Red Packets 03 31A004335C 2018-8-31 23:59:59 Red Packets 04 1981FB248B 2018-8-31 23:59:59 Red Packets 05 被种花兔吃了 管他那么多干嘛"},{"title":"关于第三版太平券（草案）","date":"2018-08-17T12:28:05.000Z","url":"/2018/08/17/%E5%85%B3%E4%BA%8E%E7%AC%AC%E4%B8%89%E7%89%88%E5%A4%AA%E5%B9%B3%E5%88%B8%EF%BC%88%E8%8D%89%E6%A1%88%EF%BC%89/","categories":[["回忆东南","/categories/%E5%9B%9E%E5%BF%86%E4%B8%9C%E5%8D%97/"]],"content":"第三版太平券将于2018学年第一学期开始启用。关于太平券的新变化都将在下面展示。 太平券的分类太平券将分为夜宵券，两用券和积分券。 夜宵券夜宵券以太平券作为基本单位（1太平券=0.1元，下同），持有者可在券面完整且为真券的情况下向寝室长在某个寝室长有空且能吃夜宵的晚上兑换等价值的夜宵食品或文具。 积分券积分券以太平分（100太平分=1太平券，下同）为单位，使用者不可直接向寝室长兑换等值夜宵，但可通过将积分券上的积分码在后山特遣队OJ上兑换为积分从而换取在线商城上的商品。 两用券两用券以太平分为单位，在积分码的保护层未被破坏时，持有者可像使用夜宵券一样使用两用券。若积分码保护层已被破坏时，该券不能作为夜宵券使用，但可像使用积分券一样通过积分码获得积分。 对于“保护层破坏”的判定当保护层已被刮破且通过刮痕可以辨认出保护层下方一个或更多字母时，该两用券视为“保护层已被破坏”，否则未被破坏。 官方不干预持券者之间关于保护层已破坏的两用券的交易，但寝室长不会将保护层已破坏的两用券视为夜宵券，寝室长也不会对这种交易出现的损失（类似于甲卖给乙一张保护层已破坏的两用券后乙发现该券的积分码已被使用）做出任何赔偿，风险请自负。"},{"title":"后山特遣队OJ的积分制","date":"2018-08-17T11:58:11.000Z","url":"/2018/08/17/%E5%90%8E%E5%B1%B1%E7%89%B9%E9%81%A3%E9%98%9Foj%E7%9A%84%E7%A7%AF%E5%88%86%E5%88%B6/","tags":[["太平分","/tags/%E5%A4%AA%E5%B9%B3%E5%88%86/"],["积分","/tags/%E7%A7%AF%E5%88%86/"],["积分码","/tags/%E7%A7%AF%E5%88%86%E7%A0%81/"]],"categories":[["后山特遣队","/categories/%E5%90%8E%E5%B1%B1%E7%89%B9%E9%81%A3%E9%98%9F/"]],"content":"关于积分制队员有两项积分：声望和功勋（还有一个“积分”用于交易）。 int 功勋 = 0 功勋和积分是对队员解题能力的回馈。积分属于消耗品，可以在功勋商店（在建）兑换奖励。未来积分可以用于预定零食、兑换奇怪网站的黄金会员、在后山下载站下载积分资源等，或许将来会推出更有趣的奖励。 暂停并维护的获取方式①：首次AC洛谷队内题目，按难度不同，获得一定战功。 入门：20，普及-：30，普及/提高-：50，普及+/提高：100，提高+/省选-：150，省选/NOI-：200，NOI/NOI+/CTSC：400。 现行的获取方式②：参加洛谷队内比赛可以获得等同于比赛分数的功勋。 注意：比赛中AC的题目不会获得“奖励①”，但是赛后可以重新提交以获取奖励。 可行的获取方式③：在后山特遣队2.0，使用登记后的角色刷题。AC后将会获得一定功勋。 注意：不要粘贴代码！我们可是会查的。那样的话你的功勋或声望就降低了。 int 声望 = 100 声望反映了队员在队伍中的影响力。参与策划、管理、比赛等可以提升声望。声望多出 100% 的部分每周会衰减 5% 关于积分码通过一定渠道获取的积分码可以在指定页面换到积分。（但OIer的评价标准是功勋和威望，积分码功能不会增加功勋和威望） 因为考虑到种花兔的积分商城（主营积分资源下载）可能跟学委的积分商城（预订零食和奇怪网站的黄金会员）不在同一个网站，为方便三站的交流（例如将种花兔的太平分转化为积分，再将积分转化为学委的货币）特推出积分码功能。未来比赛的额外奖励可能也是积分码。 后山特遣队OJ 2.0的积分码兑换页面在导航栏“更多功能”—&gt;“积分码兑换积分”，需登录后才能操作。"},{"title":"队列型DP【仅题目】","date":"2018-08-10T00:20:45.000Z","url":"/2018/08/10/%E9%98%9F%E5%88%97%E5%9E%8Bdp%E3%80%90%E4%BB%85%E9%A2%98%E7%9B%AE%E3%80%91/","categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"]],"content":"Window (window时限2s;256M) 给你一个长度为N的数组，一个长为K的滑动的窗体从最左移至最右端，你只能见到窗口的K个数，每次窗体向右移动一位，如下表： Window position Min value Max value [ 1 3 -1 ] -3 5 3 6 7 -1 3 1 [ 3 -1 -3 ] 5 3 6 7 -3 3 1 3 [ -1 -3 5 ] 3 6 7 -3 5 1 3 -1 [ -3 5 3 ] 6 7 -3 5 1 3 -1 -3 [ 5 3 6 ] 7 3 6 1 3 -1 -3 5 [ 3 6 7 ] 3 7 你的任务是找出窗口在各位置时的max value,min value. 输入格式： 第1行n,k,第2行为长度为n的数组 输出格式： 2行，第1行每个位置的min value,第2行每个位置的max value 样例： window.in 8 3 1 3 -1 -3 5 3 6 7 window.out -1 -3 -3 -3 3 3 3 3 5 5 6 7 数据范围： 20%： n&lt;=500; 50%: n&lt;=100000; 100%: n&lt;=1000000; 最大子序列和（maxsum） 问题描述 输入一个长度为ｎ的整数序列（A1,A2,……,An），从中找出一段连续的长度不超过M的子序列，使得这个序列的和最大。 例如： 序列 1， -3， 5， 1， -2， 3 当M=2或3时，S=5+1=6；当M=4时，S=5+1+(-2)+3=7。 输入： 输入文件第一行一个整数n表示序列的长度，第二行n个整数，代表序列的元素。第三行一个整数表示M。 输出： 一个整数，即子序列的最大和。保证结果不超过longint范围。 输入样例： 6 1 -3 5 1 -2 3 3 输出样例： 6 数据范围: 50%的数据N,M&lt;=1000 100%的数据N,M&lt;=20000"},{"title":"最短回文串（序列型DP） 解题日志","date":"2018-08-09T03:26:25.000Z","url":"/2018/08/09/%E6%9C%80%E7%9F%AD%E5%9B%9E%E6%96%87%E4%B8%B2%EF%BC%88%E5%BA%8F%E5%88%97%E5%9E%8Bdp%EF%BC%89-%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/","categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"最短回文串（palindrome） 【问题描述】 如果一个字符串正过来读和倒过来读是一样的，那么这个字符串就被称作回文串。例如abcdcba，abcddbca就是回文串，而abcdabcd不是。 你要解决的问题是：对于任意一个字符串，输出将这个字符串变为回文串需要插入的最少字符个数，比如，ab3bd只需要插入2个字符就可以变为一个回文串。 【输入格式】 第一行是一个整数N 第二行是一个长度为N字符串S 【输出格式】 一行一个整数，表示将S变为回文串需要插入的最小字符个数 【输入样例 】 5 ab3bd 【输出样例】 2 【数据范围 】 对于所有数据，0&lt;n&lt;=5000 思路一： 设f(i,j)为将Ai..Aj变为回文串的最小代价，则** 一共有n^2个状态，状态转移是O(1)的，总的复杂度为O(n^2) **for(int i=n; i&gt;0; i–) ** for(int j=i+1; j&lt;=n; j++)** ** if (a[i]==a[j]) f[i][j]= f[i+1][j-1];** ** else** ** f[i][j]=min(f[i+1][j], f[i][j-1])+1;** cout&lt;&lt; f[1][n]&lt;&lt; endl; 思路二： 将原串与原串的倒序做一次LCS—最长公共子序列，用原串长度减去LCS长度，即为需要插入字符的个数 例如：ab3bd与 db3ba LCS(‘ab3bd’, ‘db3ba’)=‘b3b’ 因此, ans=Len(‘ab3bd’)-Len(‘b3b’)=2 #include&lt;bits/stdc++.h&gt;using namespace std;void FUCK(string name){string i=name+”.in”;string o=name+”.out”;freopen(i.c_str(),”r”,stdin);freopen(o.c_str(),”w”,stdout);}string a,b,s;int dp[5001][5001],n;int main(){FUCK(“palindrome”);//program herecin&gt;&gt;n&gt;&gt;s;a=b=s;for(int i=0;i&lt;a.size();i++){b[a.size()-i-1]=a[i];}dp[0][0]=0;for(int i=1;i&lt;a.size();i++){for(int j=1;j&lt;b.size();j++){dp[i][j]=0;if(a[i-1]==b[j-1]){dp[i][j]=dp[i-1][j-1]+1;}if(dp[i-1][j]&gt;dp[i][j]){dp[i][j]=dp[i-1][j];}if(dp[i][j-1]&gt;dp[i][j]){dp[i][j]=dp[i][j-1];}}}int hehehe = dp[a.size()-1][b.size()-1];cout&lt;&lt;a.size()-hehehe&lt;&lt;endl;return 0;}"},{"title":"求最长公共子序列（序列型DP） 解题日志","date":"2018-08-09T03:25:02.000Z","url":"/2018/08/09/%E6%B1%82%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97%EF%BC%88%E5%BA%8F%E5%88%97%E5%9E%8Bdp%EF%BC%89-%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/","categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"求最长公共子序列（lcs） 【问题描述】 字符序列的子序列是指从给定字符序列中随意地（不一定连续）去掉若干个字符（可能一个也不去掉）后所形成的字符序列。令给定的字符序列X=“x0，x1，…，xm-1”，序列Y=“y0，y1，…，yk-1”是X的子序列，存在X的一个严格递增下标序列&lt;i0，i1，…，ik-1&gt;，使得对所有的j=0，1，…，k-1，有xij = yj。例如，X=“ABCBDAB”，Y=“BCDB”是X的一个子序列。 对给定的两个字符序列，求出他们最长的公共子序列。 【输入格式】 第1行为第1个字符序列，都是大写字母组成，以”.”结束。长度小于5000。 第2行为第2个字符序列，都是大写字母组成，以”.”结束，长度小于5000。 【输出格式】 输出上述两个最长公共自序列的长度。 【输入输出样例】 lcs.in ABCBDAB. BACBBD. lcs.out 4 dp[i][j]表示X的前i个字符比对到Y的前j个字符的最长公共子序列 dp[i][j]= max(dp[i-1][j-1]+1(xi==yj), dp[i-1][j], dp[i][j-1] ) 初始化：dp[0][0]=0; 输出：dp[n][m]; char X[]; scanf(“%s”, X+1); n=strlen(X+1); //求长度。 【代码日志】 #include&lt;bits/stdc++.h&gt;using namespace std;void FUCK(string name){string i=name+”.in”;string o=name+”.out”;freopen(i.c_str(),”r”,stdin);freopen(o.c_str(),”w”,stdout);}string a,b;int dp[5001][5001];int main(){FUCK(“lcs”);//program herecin&gt;&gt;a&gt;&gt;b;dp[0][0]=0;for(int i=1;i&lt;a.size();i++){for(int j=1;j&lt;b.size();j++){dp[i][j]=0;if(a[i-1]==b[j-1]){dp[i][j]=dp[i-1][j-1]+1;}if(dp[i-1][j]&gt;dp[i][j]){dp[i][j]=dp[i-1][j];}if(dp[i][j-1]&gt;dp[i][j]){dp[i][j]=dp[i][j-1];}}}cout&lt;&lt;dp[a.size()-1][b.size()-1]&lt;&lt;endl;return 0;}"},{"title":"防卫导弹（序列型DP） 解题日志","date":"2018-08-09T03:22:43.000Z","url":"/2018/08/09/%E9%98%B2%E5%8D%AB%E5%AF%BC%E5%BC%B9%EF%BC%88%E5%BA%8F%E5%88%97%E5%9E%8Bdp%EF%BC%89-%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/","categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"防卫导弹(dao) 【问题描述】 一种新型的防卫导弹可截击多个攻击导弹.它可以向前飞行,也可以用很快的速度向下飞行,可以毫无损伤地截击进攻导弹,但不可以向后或向上飞行.但有一个缺点,尽管它发射时可以达到任意高度,但它只能截击比它上次截击导弹时所处高度低或者高度相同的导弹.现对这种新型 防卫导弹进行测试,在每一次测试中,发射一系列的测试导弹(这些导弹发射的间隔时间固定,飞行速度相同),该防卫导弹所能获得的信息包括各进攻导弹的高度,以及它们发射次序.现要求编一程序,求在每次测试中,该防卫导弹最多能截击的进攻导弹数量,一个导弹能被截击应满足下列两个条件之一: 它是该次测试中第一个被防卫导弹截击的导弹; 它是在上一次被截击导弹的发射后发射,且高度不大于上一次被截击导弹的高度的导弹. 【输入格式】 文件的第一行是一个整数N(0〈=N〈=4000),表示发射的进攻导弹数,以下1行，N个整数hi(0〈=hi〈=32767),表示进攻导弹的高度.文件中各行的行首,输入文件中给出的导弹是按发射顺序排列的. 【输出格式】 一个整数max,表示最多能截击的进攻导弹数。 【输入样例】 3 25 36 23 【输出样例：】 2 【代码日志】 #include&lt;bits/stdc++.h&gt;using namespace std;void FUCK(string name){string i=name+”.in”;string o=name+”.out”;freopen(i.c_str(),”r”,stdin);freopen(o.c_str(),”w”,stdout);}int n,ni[4500],li[4500];//第i颗导弹的最低int f[4500],hehe[4500];//第i颗导弹前面还有f[i]颗比他高的导弹int main(){FUCK(“dao”);//program herecin&gt;&gt;n;int maxi=0,maxn=0;f[0]=0;ni[0]=40000;for(int i=1;i&lt;=n;i++){cin&gt;&gt;ni[i];f[i]=0;for(int j=i-1;j&gt;=1;j–){if(ni[j]&gt;=ni[i]){f[i]++;}}//cout&lt;&lt;”f[“&lt;&lt;i&lt;&lt;”]=”&lt;&lt;f[i]&lt;&lt;endl;}memset(hehe,0,sizeof(hehe));for(int i=1;i&lt;=n;i++){hehe[f[i]]++;if(hehe[f[i]]&gt;maxn){maxn=hehe[f[i]];maxi=f[i];}}for(int i=0;i&lt;=n;i++){//cout&lt;&lt;”hehe[“&lt;&lt;i&lt;&lt;”]=”&lt;&lt;hehe[i]&lt;&lt;endl;}cout&lt;&lt;maxn&lt;&lt;endl;return 0;}"},{"title":"最大连续子序列(序列型DP) 解题日志","date":"2018-08-09T03:21:08.000Z","url":"/2018/08/09/%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD%E5%AD%90%E5%BA%8F%E5%88%97%E5%BA%8F%E5%88%97%E5%9E%8Bdp-%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/","categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"最大连续子序列**(subsequence)** 【问题描述】 给定K个整数的序列{ N1, N2, …, NK }，其任意连续子序列可表示为{ Ni, Ni+1, …, Nj }，其中 1 &lt;= i &lt;= j &lt;= K。输出最大连续子序列的和。即求所有连续子序列中元素和最大的一个， 例如给定序列{ -2, 11, -4, 13, -5, -2 }，其最大连续子序列为{ 11, -4, 13 }，最大和为20。 【输入格式】 第1行给出正整数k( &lt;= 1000 )，第2行给出k个整数，中间用空格分隔。 【输出格式】 一个整数，表示连续子序列的最大和。 【输入样例】 6 -2 11 -4 13 -5 -2 【输出样例】 20 【代码日志】 #include&lt;bits/stdc++.h&gt;using namespace std;void FUCK(string name){string iii=name+”.in”;string ooo=name+”.out”;freopen(iii.c_str(),”r”,stdin);freopen(ooo.c_str(),”w”,stdout);}int n,ans=-99999999;int ni[100500],dp[100500];int main(){//FUCK(“subsequence”);cin&gt;&gt;n;memset(dp,-1,sizeof(dp));dp[0]=0;for(int i=1;i&lt;=n;i++){cin&gt;&gt;ni[i];dp[i]=ni[i]+dp[i-1]&gt;ni[i] ? ni[i]+dp[i-1] : ni[i];//cout&lt;&lt;dp[i]&lt;&lt;endl;if(ans&lt;dp[i]){ans=dp[i];}}//program herecout&lt;&lt;ans&lt;&lt;endl;return 0;}"},{"title":"序列型DP【仅题目】","date":"2018-08-09T00:26:49.000Z","url":"/2018/08/09/%E5%BA%8F%E5%88%97%E5%9E%8Bdp%E3%80%90%E4%BB%85%E9%A2%98%E7%9B%AE%E3%80%91/","categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"]],"content":"常见的动态规划模型——序列模型 一、最大连续子序列和 最大连续子序列**(subsequence)** 【问题描述】 给定K个整数的序列{ N1, N2, …, NK }，其任意连续子序列可表示为{ Ni, Ni+1, …, Nj }，其中 1 &lt;= i &lt;= j &lt;= K。输出最大连续子序列的和。即求所有连续子序列中元素和最大的一个， 例如给定序列{ -2, 11, -4, 13, -5, -2 }，其最大连续子序列为{ 11, -4, 13 }，最大和为20。 【输入格式】 第1行给出正整数k( &lt;= 1000 )，第2行给出k个整数，中间用空格分隔。 【输出格式】 一个整数，表示连续子序列的最大和。 【输入样例】 6 -2 11 -4 13 -5 -2 【输出样例】 20 【思考】 当正整数个数k变得很大（如k&lt;=100000）时，程序该怎么编程？ 设f[i]表示以ai为结束点的最大连续子序列和。** f[i]=max(f[i-1]+a[i], a[i]); 二、最长不降（升）子序列 防卫导弹(dao) 【问题描述】 一种新型的防卫导弹可截击多个攻击导弹.它可以向前飞行,也可以用很快的速度向下飞行,可以毫无损伤地截击进攻导弹,但不可以向后或向上飞行.但有一个缺点,尽管它发射时可以达到任意高度,但它只能截击比它上次截击导弹时所处高度低或者高度相同的导弹.现对这种新型 防卫导弹进行测试,在每一次测试中,发射一系列的测试导弹(这些导弹发射的间隔时间固定,飞行速度相同),该防卫导弹所能获得的信息包括各进攻导弹的高度,以及它们发射次序.现要求编一程序,求在每次测试中,该防卫导弹最多能截击的进攻导弹数量,一个导弹能被截击应满足下列两个条件之一: 它是该次测试中第一个被防卫导弹截击的导弹; 它是在上一次被截击导弹的发射后发射,且高度不大于上一次被截击导弹的高度的导弹. 【输入格式】 文件的第一行是一个整数N(0〈=N〈=4000),表示发射的进攻导弹数,以下1行，N个整数hi(0〈=hi〈=32767),表示进攻导弹的高度.文件中各行的行首,输入文件中给出的导弹是按发射顺序排列的. 【输出格式】 一个整数max,表示最多能截击的进攻导弹数。 【输入样例】 3 25 36 23 【输出样例：】 2 合唱队形(chorus) 【问题描述】 N位同学站成一排，音乐老师要请其中的(N-K)位同学出列，使得剩下的K位同学排成合唱队形。 合唱队形是指这样的一种队形：设K位同学从左到右依次编号为1，2…，K，他们的身高分别为T1，T2，…，TK， 则他们的身高满足T1&lt;…Ti+1&gt;…&gt;TK(1&lt;=i&lt;=K)。 你的任务是，已知所有N位同学的身高，计算最少需要几位同学出列，可以使得剩下的同学排成合唱队形。 【输入文件】 输入文件chorus.in的第一行是一个整数N(2&lt;=N&lt;=100)，表示同学的总数。第一行有n个整数，用空格分隔，第i个整数Ti(130&lt;=Ti&lt;=230)是第i位同学的身高(厘米)。 【输出文件】 输出文件chorus.out包括一行，这一行只包含一个整数，就是最少需要几位同学出列。 【样例输入】 8 186 186 150 200 160 130 197 220 【样例输出】 4 【数据规模】 对于50％的数据，保证有n&lt;=20； 对于全部的数据，保证有n&lt;=100。 轮船问题(ship) 【问题描述】 某国家被一条河划分为南北两部分，在南岸和北岸总共有N对城市，每一城市在对岸都有唯一的友好城市，任何两个城市都没有相同的友好城市。每一对友好城市都希望有一条航线来往，于是他们向政府提出了申请。由于河终年有雾。政府决定允许开通的航线就互不交叉（如果两条航线交叉，将有很大机会撞船）。兴建哪些航线以使在安全条件下有最多航线可以被开通。 【输入格式】(ship.in) 第一行两个由空格分隔的整数x，y，10〈=x〈=6000，10〈=y〈=100。x表示河的长度而y表示宽。 第二行是一个整数N(1&lt;=N&lt;=5000)，表示分布在河两岸的城市对数。接下来的N行每行有两个由空格分隔的正数C，D（C、D〈=x〉，描述每一对友好城市与河起点的距离，C表示北岸城市的距离而D表示南岸城市的距离。在河的同一边，任何两个城市的位置都是不同的。 【输出格式】(ship.out) 要在连续的若干行里给出每一组数据在安全条件下能够开通的最大航线数目。 【输入样例】 30 4 5 4 5 2 4 5 2 1 3 3 1 【输出样例】 3 **三、最长公共子序列** 求最长公共子序列（**lcs**） 【问题描述】 字符序列的子序列是指从给定字符序列中随意地（不一定连续）去掉若干个字符（可能一个也不去掉）后所形成的字符序列。令给定的字符序列X=“x0，x1，…，xm-1”，序列Y=“y0，y1，…，yk-1”是X的子序列，存在X的一个严格递增下标序列&lt;i0，i1，…，ik-1&gt;，使得对所有的j=0，1，…，k-1，有xij = yj。例如，X=“ABCBDAB”，Y=“BCDB”是X的一个子序列。 对给定的两个字符序列，求出他们最长的公共子序列。 【输入格式】 第1行为第1个字符序列，都是大写字母组成，以”**.”结束。长度小于5000。 第2行为第2个字符序列，都是大写字母组成，以”.”结束，长度小于5000。 【输出格式】 输出上述两个最长公共自序列的长度。 【输入输出样例】 lcs.in ABCBDAB. BACBBD. lcs.out 4 dp[i][j]表示X的前i个字符比对到Y的前j个字符的最长公共子序列 dp[i][j]= max(dp[i-1][j-1]+1(xi==yj), dp[i-1][j], dp[i][j-1] ) 初始化：dp[0][0]=0; 输出：dp[n][m]; char X[]; scanf(“%s”, X+1); n=strlen(X+1); //求长度。 最短回文串（palindrome） 【问题描述】 如果一个字符串正过来读和倒过来读是一样的，那么这个字符串就被称作回文串。例如abcdcba，abcddbca就是回文串，而abcdabcd不是。 你要解决的问题是：对于任意一个字符串，输出将这个字符串变为回文串需要插入的最少字符个数，比如，ab3bd只需要插入2个字符就可以变为一个回文串。 【输入格式】 第一行是一个整数N 第二行是一个长度为N字符串S 【输出格式】 一行一个整数，表示将S变为回文串需要插入的最小字符个数 【输入样例 】 5 ab3bd 【输出样例】 2 【数据范围 】 对于所有数据，0&lt;n&lt;=5000 思路一： 设f(i,j)为将Ai..Aj变为回文串的最小代价，则 "},{"title":"逃亡的准备（背包型DP） 解题日志","date":"2018-08-08T02:17:33.000Z","url":"/2018/08/08/%E9%80%83%E4%BA%A1%E7%9A%84%E5%87%86%E5%A4%87%EF%BC%88%E8%83%8C%E5%8C%85%E5%9E%8Bdp%EF%BC%89-%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/","categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"逃亡的准备(hallows) 【问题描述】 在《Harry Potter and the Deathly Hallows》中，Harry Potter他们一起逃亡，现在有许多的东西要放到赫敏的包里面，但是包的大小有限，所以我们只能够在里面放入非常重要的物品，现在给出该种物品的数量、体积、价值的数值，希望你能够算出怎样能使背包的价值最大的组合方式，并且输出这个数值，赫敏会非常地感谢你。 【输入文件】（hallows.in） （1）第一行有2个整数，物品种数n和背包装载体积v。 （2）2行到i+1行每行3个整数，为第i种物品的数量m、体积w、价值s。. 【输出文件】（hallows.out） 输出文件hallows.out仅包含一个整数，即为能拿到的最大的物品价值总和。 【输入样例】 2 10 3 4 3 2 2 5 【输出样例】 13 【注释】 选第一种一个，第二种两个。 结果为3*1+5*2=13 【数据规模】 对于30%的数据 1&lt;=v&lt;=500 1&lt;=n&lt;=2000 1&lt;=m&lt;=10 1&lt;=w&lt;=20 1&lt;=s&lt;=100 对于100%的数据 1&lt;=v&lt;=500 1&lt;=n&lt;=2000 1&lt;=m&lt;=5000 1&lt;=w&lt;=20 1&lt;=s&lt;=100 #include&lt;bits/stdc++.h&gt;using namespace std;int dp[2000];int n,v,vai[10000005],vi[10000005],nn;void make_dp(int i){for(int j=v;j&gt;=0;j–){if(dp[j]!=-1){if(dp[j+vi[i]]&lt;dp[j]+vai[i]){dp[j+vi[i]] = dp[j]+vai[i];}}}return;}int main(){memset(dp,-1,sizeof(dp));dp[0]=0;cin&gt;&gt;n&gt;&gt;v;for(int i=0;i&lt;n;i++){cin&gt;&gt;nn&gt;&gt;vi[i]&gt;&gt;vai[i];for(int j=i;j&lt;i+nn;j++){vi[j]=vi[i];vai[j]=vai[i];make_dp(j);}i+=nn-1;n+=nn-1;}/*for(int i=0;i&lt;n;i++){cout&lt;&lt;i&lt;&lt;”\\t”&lt;&lt;vi[i]&lt;&lt;”\\t”&lt;&lt;vai[i]&lt;&lt;endl;}*/int ans=-1000;for(int i=v;i&gt;=0;i–){cout&lt;&lt;”dp[“&lt;&lt;i&lt;&lt;”] = “&lt;&lt;dp[i]&lt;&lt;endl;if(dp[i]&gt;ans){ans=dp[i];}}cout&lt;&lt;ans&lt;&lt;endl;return 0;}"},{"title":"蛙人（背包型DP） 解题日志","date":"2018-08-08T02:12:45.000Z","url":"/2018/08/08/%E8%9B%99%E4%BA%BA%EF%BC%88%E8%83%8C%E5%8C%85%E5%9E%8Bdp%EF%BC%89-%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/","categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"蛙人 (ple) 蛙人使用特殊设备潜水。设备中有一个气瓶，分两格：一格装氧气，另一格装氮气。留在水中有时间的限制，在深水中需要大量的氧气与氮气。为完成任务，蛙人必须安排好气瓶。每个气瓶可以用它的重量和含有气体的体积来描述。蛙人要完成任务，就需要特定数量的氧气与氮气。要完成任务，他所需带的气瓶的总重量最少是多少呢？ 例如：蛙人有下述五个气瓶。每个气瓶表述为：氧气的体积，氮气的体积(以“升”为单位)和气瓶的重量(以“公钱(10g)”为单位): 3 36 120 10 25 129 5 50 250 1 45 130 4 20 119 如果蛙人需要5升氧气和60升氮气，那么他必须带两个气瓶总重为249(例如说第一个与第二个或第四个与第五个)。 你的任务是：编一条程序，从文本文件PLE.IN读入蛙人对氧气与氮气的需求，可得气瓶的数量以及它们的描述，计算蛙人完成任务最少需要带多重的气瓶；把结果写入文本文件PLE.OUT中。 备注：给出的数据总能找到完成任务的方法 【输入格式】（ple.in） 输入文件PLE.IN第一行是两个整数 t,a 用一个空格隔开，1&lt;=t&lt;=21 且 1&lt;=a&lt;=79。他们表示完成任务需要的氧气与氮气的体积。第二行有一个整数，1&lt;=n&lt;=1000，表示可用的气瓶数量。接下来n行是对气瓶的描述；PLE.IN的第(i+2)行包含三个整数ti, ai, wi用一个空格隔开，(1&lt;=ti&lt;=21, 1&lt;=ai&lt;=79, 1&lt;=wi&lt;=800)。它们表示：第i瓶中氧气与氮气的体积，以及这个气瓶的重量。 【输出格式】(ple.out) 你的程序要往输出文件PLE.OUT中的第一行写入一个整数，且输出文件只有一行。这个整数是完成任务最少需要携带气瓶的总重量。 输入样例： 5 60 5 3 36 120 10 25 129 5 50 250 1 45 130 4 20 119 输出样例： 249 【代码日志】 #include&lt;bits/stdc++.h&gt;using namespace std;int dp[101][101];int O2,N2,n;int o2[1005],n2[1005],w[1005];int main(){memset(dp,-1,sizeof(dp));cin&gt;&gt;O2&gt;&gt;N2&gt;&gt;n;dp[0][0]=0;for(int i=0;i&lt;n;i++){cin&gt;&gt;o2[i]&gt;&gt;n2[i]&gt;&gt;w[i];for(int to2=100;to2&gt;=0;to2–){for(int tn2=100;tn2&gt;=0;tn2–){if(dp[to2][tn2]!=-1 &amp;&amp; (dp[to2+o2[i]][tn2+n2[i]] &gt; dp[to2][tn2]+w[i] dp[to2+o2[i]][tn2+n2[i]]==-1)){dp[to2+o2[i]][tn2+n2[i]] = dp[to2][tn2]+w[i];}}}}int ans=999999999;for(int to2=O2;to2&lt;=100;to2++){for(int tn2=N2;tn2&lt;=100;tn2++){if(dp[to2][tn2]!=-1 &amp;&amp; dp[to2][tn2] &lt; ans){ans = dp[to2][tn2];}}}cout&lt;&lt;ans&lt;&lt;endl;return 0;}"},{"title":"质数和分解（背包型DP） 解题日志","date":"2018-08-08T02:04:25.000Z","url":"/2018/08/08/%E8%B4%A8%E6%95%B0%E5%92%8C%E5%88%86%E8%A7%A3%EF%BC%88%E8%83%8C%E5%8C%85%E5%9E%8Bdp%EF%BC%89-%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/","categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"质数和分解（prime） 【问题描述】 任何大于 1 的自然数 N，都可以写成若干个大于等于2且小于等于 N 的质数之和表达式(包括只有一个数构成的和表达式的情况)，并且可能有不止一种质数和的形式。例如9 的质数和表达式就有四种本质不同的形式：9 = 2+5+2 = 2+3+2+2 = 3+3+3 = 2+7 。 这里所谓两个本质相同的表达式是指可以通过交换其中一个表达式中参加和运算的各个数的位置而直接得到另一个表达式。试编程求解自然数 N 可以写成多少种本质不同的质数和表达式。 【输入文件】（prime.in）： 文件中的每一行存放一个自然数 N , 2≤N≤200。 【输出文件】（prime.out）： 依次输出每一个自然数 N 的本质不同的质数和表达式的数目。 【样例输入】 2 【样例输出】 1 【样例输入】 200 【样例输出】 9845164 #include&lt;bits/stdc++.h&gt;using namespace std;bool pflag[300];int n;int f[300][300];void prime(int maxn){for(int i=0;i&lt;=maxn;i++){pflag[i]=true;}pflag[0]=pflag[1]=false;for(int i=2;i&lt;=maxn;i++){if(pflag[i]){for(int j=i*2;j&lt;=maxn;j+=i){pflag[j]=false;}}}} int chai(int n,int minn){if(f[n][minn]!=-1){//cout&lt;&lt;”( “&lt;&lt;n&lt;&lt;” , “&lt;&lt;minn&lt;&lt;” ) = “&lt;&lt;f[n][minn]&lt;&lt;endl;return f[n][minn];}if(n&lt;minn){f[n][minn]=0;//cout&lt;&lt;”&lt; ( “&lt;&lt;n&lt;&lt;” , “&lt;&lt;minn&lt;&lt;” ) = “&lt;&lt;f[n][minn]&lt;&lt;endl;return 0;}if(n==minn){f[n][minn]=1;//cout&lt;&lt;”= ( “&lt;&lt;n&lt;&lt;” , “&lt;&lt;minn&lt;&lt;” ) = “&lt;&lt;f[n][minn]&lt;&lt;endl;return 1;}/*if(n&gt;minn &amp;&amp; n&lt;2*minn){f[n][minn]=0;cout&lt;&lt;”~ ( “&lt;&lt;n&lt;&lt;” , “&lt;&lt;minn&lt;&lt;” ) = “&lt;&lt;f[n][minn]&lt;&lt;endl;return 0;}*/f[n][minn]=0;if(pflag[n]) f[n][minn]=1;for(int i=minn;i&lt;=n;i++){if(pflag[i]){f[n][minn]+=chai(n-i,i);}}//cout&lt;&lt;”R ( “&lt;&lt;n&lt;&lt;” , “&lt;&lt;minn&lt;&lt;” ) = “&lt;&lt;f[n][minn]&lt;&lt;endl;return f[n][minn];} int main(){memset(f,-1,sizeof(f));prime(200);cin&gt;&gt;n;cout&lt;&lt;chai(n,2);return 0;}"},{"title":"采药（背包型DP） 解题日志","date":"2018-08-08T01:53:55.000Z","url":"/2018/08/08/%E9%87%87%E8%8D%AF%EF%BC%88%E8%83%8C%E5%8C%85%E5%9E%8Bdp-%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97%EF%BC%89/","categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"采药(medic) 【问题描述】 辰辰是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同的草药，采每一株都需要一些时间，每一株也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。” 如果你是辰辰，你能完成这个任务吗？ 【输入格式】medic.in 输入文件的第一行有两个整数T（1 &lt;= T &lt;= 1000）和M（1 &lt;= M &lt;= 100），用一个空格隔开，T代表总共能够用来采药的时间，M代表山洞里的草药的数目。接下来的M行每行包括两个在1到100之间（包括1和100）的整数，分别表示采摘某株草药的时间和这株草药的价值。 【输出格式】medic.out 输出文件包括一行，这一行只包含一个整数，表示在规定的时间内，可以采到的草药的最大总价值。 【样例输入】 70 3 71 100 69 1 1 2 【样例输出】 3 【数据规模】 对于30%的数据，M &lt;= 10； 对于全部的数据，M &lt;= 100。 【代码日志】 #include&lt;bits/stdc++.h&gt;using namespace std;int dp[20000];int t,m,ti[105],vi[105];int main(){memset(dp,-1,sizeof(dp));cin&gt;&gt;t&gt;&gt;m;dp[0]=0;for(int i=0;i&lt;m;i++){cin&gt;&gt;ti[i]&gt;&gt;vi[i];for(int j=t;j&gt;=0;j–){if(dp[j]!=-1 &amp;&amp; dp[j]+vi[i]&gt;dp[j+ti[i]]){dp[j+ti[i]]=dp[j]+vi[i];}}}int ans=0;for(int i=0;i&lt;=t;i++){if(dp[i]&gt;ans){ans=dp[i];}}cout&lt;&lt;ans&lt;&lt;endl;return 0;}"},{"title":"背包型DP【仅题目】","date":"2018-08-08T00:29:00.000Z","url":"/2018/08/08/%E8%83%8C%E5%8C%85%E5%9E%8Bdp%E3%80%90%E4%BB%85%E9%A2%98%E7%9B%AE%E3%80%91/","categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"]],"content":"背包模型 采药(medic) 【问题描述】 辰辰是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同的草药，采每一株都需要一些时间，每一株也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。” 如果你是辰辰，你能完成这个任务吗？ 【输入格式】medic.in 输入文件的第一行有两个整数T（1 &lt;= T &lt;= 1000）和M（1 &lt;= M &lt;= 100），用一个空格隔开，T代表总共能够用来采药的时间，M代表山洞里的草药的数目。接下来的M行每行包括两个在1到100之间（包括1和100）的整数，分别表示采摘某株草药的时间和这株草药的价值。 【输出格式】medic.out 输出文件包括一行，这一行只包含一个整数，表示在规定的时间内，可以采到的草药的最大总价值。 【样例输入】 70 3 71 100 69 1 1 2 【样例输出】 3 【数据规模】 对于30%的数据，M &lt;= 10； 对于全部的数据，M &lt;= 100。 质数和分解（prime） 【问题描述】 任何大于 1 的自然数 N，都可以写成若干个大于等于2且小于等于 N 的质数之和表达式(包括只有一个数构成的和表达式的情况)，并且可能有不止一种质数和的形式。例如9 的质数和表达式就有四种本质不同的形式：9 = 2+5+2 = 2+3+2+2 = 3+3+3 = 2+7 。 这里所谓两个本质相同的表达式是指可以通过交换其中一个表达式中参加和运算的各个数的位置而直接得到另一个表达式。试编程求解自然数 N 可以写成多少种本质不同的质数和表达式。 【输入文件】（prime.in）： 文件中的每一行存放一个自然数 N , 2≤N≤200。 【输出文件】（prime.out）： 依次输出每一个自然数 N 的本质不同的质数和表达式的数目。 【样例输入】 2 【样例输出】 1 【样例输入】 200 【样例输出】 9845164 蛙人 (ple) 蛙人使用特殊设备潜水。设备中有一个气瓶，分两格：一格装氧气，另一格装氮气。留在水中有时间的限制，在深水中需要大量的氧气与氮气。为完成任务，蛙人必须安排好气瓶。每个气瓶可以用它的重量和含有气体的体积来描述。蛙人要完成任务，就需要特定数量的氧气与氮气。要完成任务，他所需带的气瓶的总重量最少是多少呢？ 例如：蛙人有下述五个气瓶。每个气瓶表述为：氧气的体积，氮气的体积(以“升”为单位)和气瓶的重量(以“公钱(10g)”为单位): 3 36 120 10 25 129 5 50 250 1 45 130 4 20 119 如果蛙人需要5升氧气和60升氮气，那么他必须带两个气瓶总重为249(例如说第一个与第二个或第四个与第五个)。 你的任务是：编一条程序，从文本文件PLE.IN读入蛙人对氧气与氮气的需求，可得气瓶的数量以及它们的描述，计算蛙人完成任务最少需要带多重的气瓶；把结果写入文本文件PLE.OUT中。 备注：给出的数据总能找到完成任务的方法 【输入格式】（ple.in） 输入文件PLE.IN第一行是两个整数 t,a 用一个空格隔开，1&lt;=t&lt;=21 且 1&lt;=a&lt;=79。他们表示完成任务需要的氧气与氮气的体积。第二行有一个整数，1&lt;=n&lt;=1000，表示可用的气瓶数量。接下来n行是对气瓶的描述；PLE.IN的第(i+2)行包含三个整数ti, ai, wi用一个空格隔开，(1&lt;=ti&lt;=21, 1&lt;=ai&lt;=79, 1&lt;=wi&lt;=800)。它们表示：第i瓶中氧气与氮气的体积，以及这个气瓶的重量。 【输出格式】(ple.out) 你的程序要往输出文件PLE.OUT中的第一行写入一个整数，且输出文件只有一行。这个整数是完成任务最少需要携带气瓶的总重量。 输入样例： 5 60 5 3 36 120 10 25 129 5 50 250 1 45 130 4 20 119 输出样例： 249 逃亡的准备(hallows) 【问题描述】 在《Harry Potter and the Deathly Hallows》中，Harry Potter他们一起逃亡，现在有许多的东西要放到赫敏的包里面，但是包的大小有限，所以我们只能够在里面放入非常重要的物品，现在给出该种物品的数量、体积、价值的数值，希望你能够算出怎样能使背包的价值最大的组合方式，并且输出这个数值，赫敏会非常地感谢你。 【输入文件】（hallows.in） （1）第一行有2个整数，物品种数n和背包装载体积v。 （2）2行到i+1行每行3个整数，为第i种物品的数量m、体积w、价值s。. 【输出文件】（hallows.out） 输出文件hallows.out仅包含一个整数，即为能拿到的最大的物品价值总和。 【输入样例】 2 10 3 4 3 2 2 5 【输出样例】 13 【注释】 选第一种一个，第二种两个。 结果为3*1+5*2=13 【数据规模】 对于30%的数据 1&lt;=v&lt;=500 1&lt;=n&lt;=2000 1&lt;=m&lt;=10 1&lt;=w&lt;=20 1&lt;=s&lt;=100 对于100%的数据 1&lt;=v&lt;=500 1&lt;=n&lt;=2000 1&lt;=m&lt;=5000 1&lt;=w&lt;=20 1&lt;=s&lt;=100 金明的预算方案**(budget)** 【问题描述】 金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间金明自己专用的很宽敞的房间。更让他高兴的是，妈妈昨天对他说：“你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过N元钱就行”。今天一早，金明就开始做预算了，他把想买的物品分为两类：主件与附件，附件是从属于某个主件的，下表就是一些主件与附件的例子： 主件 附件 电脑 打印机，扫描仪 书柜 图书 书桌 台灯，文具 工作椅 无 如果要买归类为附件的物品，必须先买该附件所属的主件。每个主件可以有0个、1个或2个附件。附件不再有从属于自己的附件。金明想买的东西很多，肯定会超过妈妈限定的N元。于是，他把每件物品规定了一个重要度，分为5等：用整数1**5表示，第5等最重要。他还从因特网上查到了每件物品的价格（都是10元的整数倍）。他希望在不超过N元（可以等于N元）的前提下，使每件物品的价格与重要度的乘积的总和最大。 设第j件物品的价格为v[j]，重要度为w[j]，共选中了k件物品，编号依次为j1，j2，……，jk，则所求的总和为： v[j1]*w[j1]+v[j2]*w[j2]+ …+v[jk]*w[jk]。（其中*为乘号） 请你帮助金明设计一个满足要求的购物单。 【输入文件】budget.in 输入文件的第1行，为两个正整数，用一个空格隔开： N m （其中N（&lt;32000）表示总钱数，m（&lt;60）为希望购买物品的个数。） 从第2行到第m+1行，第j行给出了编号为j-1的物品的基本数据，每行有3个非负整数 v p q （其中v表示该物品的价格（v&lt;10000），p表示该物品的重要度（1**5），q表示该物品是主件还是附件。如果q=0，表示该物品为主件，如果q&gt;0，表示该物品为附件，q是所属主件的编号） 【输出文件】budget.out 输出文件只有一个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值（&lt;200000）。 【输入样例】 1000 5 800 2 0 400 5 1 300 5 1 400 3 0 500 2 0 【输出样例】 2200"},{"title":"能量项链（区间型DP）解题日志","date":"2018-08-07T03:12:42.000Z","url":"/2018/08/07/%E8%83%BD%E9%87%8F%E9%A1%B9%E9%93%BE%E3%80%90%E5%8C%BA%E9%97%B4%E5%9E%8Bdp%E3%80%91%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/","categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"能量项链(energy) 【问题描述】 在Mars星球上，每个Mars人都随身佩带着一串能量项链。在项链上有n颗能量珠。能量珠是一颗有头标记与尾标记的珠子，这些标记对应着某个正整数。并且，对于相邻的两颗珠子，前一颗珠子的尾标记一定等于后一颗珠子的头标记。因为只有这样，通过吸盘（吸盘是Mars人吸收能量的一种器官）的作用，这两颗珠子才能聚合成一颗珠子，同时释放出可以被吸盘吸收的能量。如果前一颗能量珠的头标记为m，尾标记为r，后一颗能量珠的头标记为r，尾标记为n，则聚合后释放的能量为M*r*n（Mars单位），新产生的珠子的头标记为m，尾标记为n。 需要时，Mars人就用吸盘夹住相邻的两颗珠子，通过聚合得到能量，直到项链上只剩下一颗珠子为止。显然，不同的聚合顺序得到的总能量是不同的，请你设计一个聚合顺序，使一串项链释放出的总能量最大。 例如：设n=4，4颗珠子的头标记与尾标记依次为(2，3) (3，5) (5，10) (10，2)。我们用记号⊕表示两颗珠子的聚合操作，(j⊕k)表示第j，k两颗珠子聚合后所释放的能量。则第4、1两颗珠子聚合后释放的能量为：(4⊕1)=10×2×3=60。这一串项链可以得到最优值的一个聚合顺序所释放的总能量为((4⊕1)⊕2)⊕3）=10×2×3+10×3×5+10×5×10=710。 【输入格式】 第一行是一个正整数n（4≤n≤100），表示项链上珠子的个数。第二行是n个用空格隔开的正整数，所有的数均不超过1000。第i个数为第i颗珠子的头标记（1≤i≤n），当i＜n＜span时，第i颗珠子的尾标记应该等于第i+1颗珠子的头标记。第n颗珠子的尾标记应该等于第1颗珠子的头标记；至于珠子的顺序，你可以这样确定：将项链放到桌面上，不要出现交叉，随意指定第一颗珠子，然后按顺时针方向确定其他珠子的顺序。 【输出格式】 只有个正整数E（E≤2.1×109），为一个最优聚合顺序所释放的总能量。 【输入样例】 4 2 3 5 10 【输出样例】 710 【代码日志】 #include&lt;bits/stdc++.h&gt;using namespace std;int hehe[105],n;int dp[105][105];int opt[105][105];int main(){freopen(“energy.in”,”r”,stdin);freopen(“energy.out”,”w”,stdout); cin&gt;&gt;n;for(int i=0;i&lt;n;i++){cin&gt;&gt;hehe[i];}for(int k=2;k&lt;=n;k++){//将原先的n颗珠子合并成一颗珠子for(int i=0;i&lt;n;i++){int tail=(i+k-1)%n;dp[i][tail]=0;for(int j=i;j&lt;=i+k-2;j++){int jj=j%n,ssum=hehe[i]*hehe[(jj+1)%n]*hehe[(tail+1)%n];if(dp[i][tail]&lt;dp[i][jj]+dp[(jj+1)%n][tail]+ssum){dp[i][tail]=dp[i][jj]+dp[(jj+1)%n][tail]+ssum;opt[i][tail]=jj;}}//cout&lt;&lt;”\\t\\tBEST (k =”&lt;&lt;k&lt;&lt;”) : (“&lt;&lt;i&lt;&lt;”..”&lt;&lt;opt[i][tail]&lt;&lt;”)[“&lt;&lt;dp[i][opt[i][tail]]&lt;&lt;”] + (“&lt;&lt;opt[i][tail]+1&lt;&lt;”..”&lt;&lt;tail&lt;&lt;”)[“&lt;&lt;dp[opt[i][tail]+1][tail]&lt;&lt;”] = (“&lt;&lt;i&lt;&lt;”..”&lt;&lt;tail&lt;&lt;”)[“&lt;&lt;dp[i][tail]&lt;&lt;”]“&lt;&lt;endl;}}int ans=0;for(int i=0;i&lt;n;i++){if(ans&lt;dp[i][(n+i-1)%n]){ans=dp[i][(n+i-1)%n];}}cout&lt;&lt;ans&lt;&lt;endl;return 0;}"},{"title":"石子归并（区间型dp） 代码日志","date":"2018-08-07T03:07:49.000Z","url":"/2018/08/07/%E7%9F%B3%E5%AD%90%E5%BD%92%E5%B9%B6%E3%80%90%E5%8C%BA%E9%97%B4%E5%9E%8Bdp%E3%80%91-%E4%BB%A3%E7%A0%81%E6%97%A5%E5%BF%97/","categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"石子归并（merge） 【问题描述】 在一个操场按次序从左到右摆放着n堆石子(n≤100)，现要将石子有次序地合并成一堆。规定每次只能选取相邻的两堆合并成新的一堆，并将新的一堆的石子数，记为该次合并的得分，求最小的得分总和。 【输入格式】 第一行为石子堆数n； 第二行为每堆的石子数，每两个数之间用一个空格分隔。 【输出格式】 最小的得分总和。 【输入样例】 6 3 4 6 5 4 2 【输出样例】 61 样例说明： 3 4 6 5 4 2 7 6 5 4 2 13 5 4 2 13 5 6 13 11 24 7+13+6+11+24=61 【代码日志】（然鹅我觉得我的决策比样例解释更好） #include&lt;bits/stdc++.h&gt;using namespace std;int n,s[105],sum[105];int dp[105][105];int opt[105][105];//dp[i][j]将第i颗到第k颗石头合并的最大分值//sum[i]将前i颗石头合并的数值//推方程//dp[i][j]=max(dp[i][k]+dp[k+1][j])(i&lt;=k&lt;=j-1)int main(){freopen(“merge.in”,”r”,stdin);freopen(“merge.out”,”w”,stdout);cin&gt;&gt;n;sum[0]=0;for(int i=1;i&lt;=n;i++){cin&gt;&gt;s[i];sum[i]=sum[i-1]+s[i];dp[i][i]=0;}for(int k=2;k&lt;=n;k++){//k指将原来分别为i堆的石子合并为一堆for(int i=1;i&lt;=n-k+1;i++){dp[i][i+k-1]=0;int ssum = sum[i+k-1] - sum[i-1];for(int j=i;j&lt;=i+k-2;j++){//cout&lt;&lt;”\\t(“&lt;&lt;i&lt;&lt;”..”&lt;&lt;j&lt;&lt;”)[“&lt;&lt;dp[i][j]&lt;&lt;”] + (“&lt;&lt;j+1&lt;&lt;”..”&lt;&lt;i+k-1&lt;&lt;”)[“&lt;&lt;dp[j+1][i+k-1]&lt;&lt;”] = (“&lt;&lt;i&lt;&lt;”..”&lt;&lt;i+k-1&lt;&lt;”)[“&lt;&lt;dp[i][i+k-1]&lt;&lt;”]“&lt;&lt;endl;if(dp[i][i+k-1]&lt;dp[i][j]+dp[j+1][i+k-1]+ssum){dp[i][i+k-1]=dp[i][j]+dp[j+1][i+k-1]+ssum;opt[i][i+k-1]=j;}}//下一行输出决策，若想验证请去掉注释符号//cout&lt;&lt;”\\t\\tBEST (k =”&lt;&lt;k&lt;&lt;”) : (“&lt;&lt;i&lt;&lt;”..”&lt;&lt;opt[i][i+k-1]&lt;&lt;”)[“&lt;&lt;dp[i][opt[i][i+k-1]]&lt;&lt;”] + (“&lt;&lt;opt[i][i+k-1]+1&lt;&lt;”..”&lt;&lt;i+k-1&lt;&lt;”)[“&lt;&lt;dp[opt[i][i+k-1]+1][i+k-1]&lt;&lt;”] = (“&lt;&lt;i&lt;&lt;”..”&lt;&lt;i+k-1&lt;&lt;”)[“&lt;&lt;dp[i][i+k-1]&lt;&lt;”]“&lt;&lt;endl;}}cout&lt;&lt;dp[1][n]&lt;&lt;endl;return 0;}"},{"title":"区间型DP【仅题目】","date":"2018-08-07T03:06:40.000Z","url":"/2018/08/07/%E5%8C%BA%E9%97%B4%E5%9E%8Bdp%EF%BC%88%E4%BB%85%E9%A2%98%E7%9B%AE%EF%BC%89/","categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"]],"content":"石子归并（merge） 【问题描述】 在一个操场按次序从左到右摆放着n堆石子(n≤100)，现要将石子有次序地合并成一堆。规定每次只能选取相邻的两堆合并成新的一堆，并将新的一堆的石子数，记为该次合并的得分，求最小的得分总和。 【输入格式】 第一行为石子堆数n； 第二行为每堆的石子数，每两个数之间用一个空格分隔。 【输出格式】 最小的得分总和。 【输入样例】 6 3 4 6 5 4 2 【输出样例】 61 样例说明： 3 4 6 5 4 2 7 6 5 4 2 13 5 4 2 13 5 6 13 11 24 7+13+6+11+24=61 能量项链(energy) 【问题描述】 在Mars星球上，每个Mars人都随身佩带着一串能量项链。在项链上有n颗能量珠。能量珠是一颗有头标记与尾标记的珠子，这些标记对应着某个正整数。并且，对于相邻的两颗珠子，前一颗珠子的尾标记一定等于后一颗珠子的头标记。因为只有这样，通过吸盘（吸盘是Mars人吸收能量的一种器官）的作用，这两颗珠子才能聚合成一颗珠子，同时释放出可以被吸盘吸收的能量。如果前一颗能量珠的头标记为m，尾标记为r，后一颗能量珠的头标记为r，尾标记为n，则聚合后释放的能量为M*r*n（Mars单位），新产生的珠子的头标记为m，尾标记为n。 需要时，Mars人就用吸盘夹住相邻的两颗珠子，通过聚合得到能量，直到项链上只剩下一颗珠子为止。显然，不同的聚合顺序得到的总能量是不同的，请你设计一个聚合顺序，使一串项链释放出的总能量最大。 例如：设n=4，4颗珠子的头标记与尾标记依次为(2，3) (3，5) (5，10) (10，2)。我们用记号⊕表示两颗珠子的聚合操作，(j⊕k)表示第j，k两颗珠子聚合后所释放的能量。则第4、1两颗珠子聚合后释放的能量为：(4⊕1)=10×2×3=60。这一串项链可以得到最优值的一个聚合顺序所释放的总能量为((4⊕1)⊕2)⊕3）=10×2×3+10×3×5+10×5×10=710。 【输入格式】 第一行是一个正整数n（4≤n≤100），表示项链上珠子的个数。第二行是n个用空格隔开的正整数，所有的数均不超过1000。第i个数为第i颗珠子的头标记（1≤i≤n），当i＜n＜span时，第i颗珠子的尾标记应该等于第i+1颗珠子的头标记。第n颗珠子的尾标记应该等于第1颗珠子的头标记；至于珠子的顺序，你可以这样确定：将项链放到桌面上，不要出现交叉，随意指定第一颗珠子，然后按顺时针方向确定其他珠子的顺序。 【输出格式】 只有个正整数E（E≤2.1×109），为一个最优聚合顺序所释放的总能量。 【输入样例】 4 2 3 5 10 【输出样例】 710 【代码日志】"},{"title":"又上锁妖塔（动态规划练习） 解题日志","date":"2018-08-06T03:39:42.000Z","url":"/2018/08/06/plog-dp-yaotower/","categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"又上锁妖塔(tower.in/tower.out) [题目描述]小D在X星买完了想要的东西，在飞往下一个目的地的途中，正无聊的他转头看了看身边的小A，发现小A正在玩&lt;仙剑&gt;，可是小A很奇怪，他一直在锁妖塔的周围转来转去，可是就是不进去，于是小D问他：“你在干什么?怎么不上去?”小A说：“我在想怎么从锁妖塔外面爬上去”(倒…) 锁妖塔的建造很特别，塔总共有n层，但是高度却不相同，这造成了小A爬过每层的时间也不同。小A会用仙术，每用一次可以让他向上跳一层或两层，但是每次跳跃后小A都将用完灵力，必须爬过至少一层才能再次跳跃(你可以认为小A需要跳两次一层才休息)，小A想用最短的时间爬到塔顶，可是他不能找到时间最短的方案，所以请你帮他找到一个时间最短的方案让他爬到塔顶，小A只关心时间，所以你只要告诉他最短时间是多少就可以了。你可以最后跳到塔外即超过塔高。 [输入格式]第一行一个数n (n&lt;=10000)，表示塔的层数。 接下来的n行每行一个数(&lt;=100)，表示从下往上每层的高度。 [输出格式]一个数，表示最短时间 [样例输入] 5 3 5 1 8 4 [样例输出] 1 [数据规模]对20%的数据，n&lt;=10 对40%的数据，n&lt;=100 对60%的数据，n&lt;=5000 对100%的数据，n&lt;=10000"},{"title":"维修栅栏（动态规划练习） 解题日志","date":"2018-08-06T03:39:36.000Z","url":"/2018/08/06/plog-dp-fence/","categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"维修栅栏 输入文件：fence.in 输出文件：fence.out 问题描述： 小z最近当上了农场主！不过，还没有来得及庆祝，一件棘手的问题就摆在了小z的面前。农场的栅栏，由于年久失修，出现了多处破损。栅栏是由n块木板组成的，每块木板可能已经损坏也可能没有损坏。小z知道，维修连续m个木板(这m个木板不一定都是损坏的)的费用是sqrt(m)。可是，怎样设计方案才能使总费用最低呢？小z想请你帮帮忙。 输入格式：输入文件的第一行包含一个整数n，表示栅栏的长度。 第二行包含n个由空格分开的整数(长整型范围内)。如果第i个数字是0，则表示第i块木板已经损坏，否则表示没有损坏。 输出格式：输出文件中仅包含一个实数，表示最小维修费用。注意：答案精确到小数点后3位。数据规模:30%的数据中，n&lt;=20。100%的数据中，n&lt;=2500。输入输出样例： 输入 输出 9 0 –1 0 1 2 3 0 –2 0 3.000 ** 【思路剖析】** f[i]表示第i个点时所付出的最小代价 f[i]=f[i-1]+1 or f[j-1]+√(i-j+1)"},{"title":"三角蛋糕(坐标规划类DP) 解题日志","date":"2018-08-06T03:11:54.000Z","url":"/2018/08/06/plog-dp-triangularcake/","tags":[["动态规划","/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"],["坐标","/tags/%E5%9D%90%E6%A0%87/"]],"categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"三角蛋糕**(trigon)** XP在机房里放了一块正三角形的大蛋糕，但是第二天他发现蛋糕被老鼠咬坏了。 XP不想让蛋糕白白的被浪费，于是他把蛋糕分割成了一个个的小正三角形（如上图所示）。黑色的小正三角形表示老鼠把那一块咬坏了。XP想要切出一块最大的没被老鼠咬坏正三角形的蛋糕，可是最大的三角形有多大呢? 输入数据 第一行，一个整数N，表示XP把蛋糕纵向划分为N行。 接下来的N行，第i行包括了(n-i)*2+1个有效字符。“-”表示这块蛋糕是好的，“#”表示这块蛋糕被咬坏了。为了保持三角形的形状，输入文件中会出现空格。 输出数据 一行一个整数，表示最大的三角形包括的小三角形数。 样例 输入:**trigon.in ** 5 #-##—-# —–#- —#- -#- - 输出:**trigon.out ** 9 数据范围 对于30%的数据，满足n≤5 对于所有的测试数据，满足n≤100。 【思路剖析】 #include using namespace std;bool t[105][105];int n;bool head[105][105];//确定朝上还是朝下,0下1上int dp[105][105];int main(){ cin&gt;&gt;n; for(int i=5;i&gt;0;i–){ bool h=false; for(int j=1;j&lt;=(n-i)*2+1;j++){ cin&gt;&gt; h=!h; } }}"},{"title":"传纸条（坐标规划型DP） 解题日志","date":"2018-08-06T03:08:36.000Z","url":"/2018/08/06/plog-dp-paper/","tags":[["动态规划","/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"],["NOIP","/tags/NOIP/"]],"categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"传纸条(message) 【问题描述】 小渊和小轩是好朋友也是同班同学，他们在一起总有谈不完的话题。一次素质拓展活动中，班上同学安排做成一个m行n列的矩阵，而小渊和小轩被安排在矩阵对角线的两端，因此，他们就无法直接交谈了。幸运的是，他们可以通过传纸条来进行交流。纸条要经由许多同学传到对方手里，小渊坐在矩阵的左上角，坐标(1,1)，小轩坐在矩阵的右下角，坐标(m,n)。从小渊传到小轩的纸条只可以向下或者向右传递，从小轩传给小渊的纸条只可以向上或者向左传递。 在活动进行中，小渊希望给小轩传递一张纸条，同时希望小轩给他回复。班里每个同学都可以帮他们传递，但只会帮他们一次，也就是说如果此人在小渊递给小轩纸条的时候帮忙，那么在小轩递给小渊的时候就不会再帮忙。反之亦然。 还有一件事情需要注意，全班每个同学愿意帮忙的好感度有高有低（注意：小渊和小轩的好心程度没有定义，输入时用0表示），可以用一个0-100的自然数来表示，数越大表示越好心。小渊和小轩希望尽可能找好心程度高的同学来帮忙传纸条，即找到来回两条传递路径，使得这两条路径上同学的好心程度只和最大。现在，请你帮助小渊和小轩找到这样的两条路径。 【输入】 输入文件message.in的第一行有2个用空格隔开的整数m和n，表示班里有m行n列（1&lt;=m,n&lt;=50）。 接下来的m行是一个m*n的矩阵，矩阵中第i行j列的整数表示坐在第i行j列的学生的好心程度。每行的n个整数之间用空格隔开。 【输出】 输出文件message.out共一行，包含一个整数，表示来回两条路上参与传递纸条的学生的好心程度之和的最大值。 【输入输出样例】 message.in message.out 3 3 0 3 9 2 8 5 5 7 0 34 【限制】 30%的数据满足：1&lt;=m,n&lt;=10 100%的数据满足：1&lt;=m,n&lt;=50 【解题思路】 【代码日志】 传纸条 版本2(电脑卡了) 传纸条 版本1(WA)"},{"title":"EXCHANGE（动态规划练习） 解题日志","date":"2018-08-06T02:48:34.000Z","url":"/2018/08/06/plog-dp-exchange/","categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"EXCHANGE(exchange) 问题描述: Dave偶然获得了未来几天的美元(dollars)与马克(marks)之间的兑换率。例如Dave开始有100marks，请编写个程序帮助Dave找出最好的买卖marks 或 dollars的方案，使Dave最后一天有最多的marks。 输入格式： 输入文件的第一行有个自然数N, 1 ≤ N ≤ 100,表示Dave知道未来兑换率的天数。 下面N行每行有两个被空格分隔的自然数B和S， 100 ≤ B ≤ S ≤ 1000。第(i＋1)行表示的和是第 i天的兑换率，表示这一天： 100个marks 可以买B个dollars，和S个dollars可以买100个marks。 输出格式： 只一行一个实数，表示最多可获得的marks，精确到小数后2位。 输入输出样例： exchange.in 3 393 398 394 401 386 386 exchange.out 102.07 exchange.in 5 300 300 310 320 320 330 330 330 300 320 exchange.out 103.12 exchange.in 8 218 219 228 231 227 235 205 213 230 232 239 239 251 258 205 213 exchange.out 126.14 *样例3***的解释 (**此处不用输出) 第1天： 100.0000 马克换成 228.0000 美元 第4天： 228.0000 美元换成 107.0422 马克 第7天： 107.0422 马克换成 268.6760美元 第8天： 268.6760 美元换成 126.1389 马克 【思路剖析】 第一种：f[i][j][0..1]为到第i天为止，在第i天，使用第j种方法（1=马克到美元 2=美元到马克 3=不换）的最大收益，第三维表示手上是哪种钱。 第二种：f[i][0]为第i天，马克到美元，f[i][1]为第i天，美元到马克，f[i][0]=f[1..i-1][1] 【代码日志】 &lt; pre class=”lang:default decode:true “ title=”EXCHANGE 版本1 WA（一定要看清楚题目！）” &gt;#include&lt;bits/stdc++.h&gt; using namespace std; //———题目变量 int n,m100_d[105],d100_m[105]; //———自用变量 float dp[105][4]; //0=马克到美元，手上拿着美元 1=美元到马克，手上拿着马克 //2=不换，手上拿着马克 3=不换，手上拿着美元 //———主程序 int main(){ cin&gt;&gt;n; for(int i=1;i&lt;=n;i++){ cin&gt;&gt;m100_d[i]&gt;&gt;d100_m[i]; for(int j=0;j&lt;4;j++){ dp[i][j]=-1; } } for(int j=0;j&lt;4;j++){ dp[0][j]=-1; } dp[0][2]=100; for(int i=1;i&lt;=n;i++){ cout&lt;&lt;”dp[“&lt;&lt;i-1&lt;&lt;”][0] = “&lt;&lt;dp[i-1][0]&lt;&lt;endl; if(dp[i-1][0]!=-1){ //手上拿着美金 就是这里 误认为是100美元换S马克 if(dp[i][1]&lt;dp[i-1][0]/100_d100_m[i])dp[i][1]=dp[i-1][0]/100_d100_m[i]; if(dp[i][3]&lt;dp[i-1][0])dp[i][3]=dp[i-1][0]; } if(dp[i-1][1]!=-1){ //手上拿着马克 if(dp[i][0]&lt;dp[i-1][1]/100_m100_d[i])dp[i][0]=dp[i-1][1]/100_m100_d[i]; if(dp[i][2]&lt;dp[i-1][1])dp[i][2]=dp[i-1][1]; } if(dp[i-1][2]!=-1){ //手上拿着马克 if(dp[i][0]&lt;dp[i-1][2]/100_m100_d[i])dp[i][0]=dp[i-1][2]/100_m100_d[i]; if(dp[i][2]&lt;dp[i-1][2])dp[i][2]=dp[i-1][2]; } if(dp[i-1][3]!=-1){ //手上拿着美金 就是这里 误认为是100美元换S马克 if(dp[i][1]&lt;dp[i-1][3]/100_d100_m[i])dp[i][1]=dp[i-1][3]/100_d100_m[i]; if(dp[i][3]&lt;dp[i-1][3])dp[i][3]=dp[i-1][3]; } } float ans=-1; if(ans&lt;dp[n][1]){ ans=dp[n][1]; } if(ans&lt;dp[n][2]){ ans=dp[n][2]; } cout&lt;&lt;ans&lt;&lt;endl; return 0; } &lt; pre class=”lang:default decode:true “ title=”版本2(看上去总算对一点了)” &gt;#include&lt;bits/stdc++.h&gt; using namespace std; //———题目变量 int n,m100_d[105],d100_m[105]; //———自用变量 float dp[105][4]; //0=马克到美元，手上拿着美元 1=美元到马克，手上拿着马克 //2=不换，手上拿着马克 3=不换，手上拿着美元 //———主程序 int main(){ cin&gt;&gt;n; for(int i=1;i&lt;=n;i++){ cin&gt;&gt;m100_d[i]&gt;&gt;d100_m[i]; for(int j=0;j&lt;4;j++){ dp[i][j]=-1; } } for(int j=0;j&lt;4;j++){ dp[0][j]=-1; } dp[0][2]=100; for(int i=1;i&lt;=n;i++){ cout&lt;&lt;”dp[“&lt;&lt;i-1&lt;&lt;”][0] = “&lt;&lt;dp[i-1][0]&lt;&lt;endl; if(dp[i-1][0]!=-1){ //手上拿着美金 if(dp[i][1]&lt;dp[i-1][0]_100/d100_m[i])dp[i][1]=dp[i-1][0]_100/d100_m[i]; if(dp[i][3]&lt;dp[i-1][0])dp[i][3]=dp[i-1][0]; } if(dp[i-1][1]!=-1){ //手上拿着马克 if(dp[i][0]&lt;dp[i-1][1]/100_m100_d[i])dp[i][0]=dp[i-1][1]/100_m100_d[i]; if(dp[i][2]&lt;dp[i-1][1])dp[i][2]=dp[i-1][1]; } if(dp[i-1][2]!=-1){ //手上拿着马克 if(dp[i][0]&lt;dp[i-1][2]/100_m100_d[i])dp[i][0]=dp[i-1][2]/100_m100_d[i]; if(dp[i][2]&lt;dp[i-1][2])dp[i][2]=dp[i-1][2]; } if(dp[i-1][3]!=-1){ //手上拿着美金 if(dp[i][1]&lt;dp[i-1][3]_100/d100_m[i])dp[i][1]=dp[i-1][3]_100/d100_m[i]; if(dp[i][3]&lt;dp[i-1][3])dp[i][3]=dp[i-1][3]; } } float ans=-1; if(ans&lt;dp[n][1]){ ans=dp[n][1]; } if(ans&lt;dp[n][2]){ ans=dp[n][2]; } cout&lt;&lt;setiosflags(ios::fixed)&lt;&lt;setprecision(2)&lt;&lt;ans&lt;&lt;endl; return 0; }"},{"title":"坐标规划DP","date":"2018-08-06T02:17:51.000Z","url":"/2018/08/06/coordinate-dp/","tags":[["动态规划","/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"]],"categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"]],"content":"传纸条(message) 【问题描述】 小渊和小轩是好朋友也是同班同学，他们在一起总有谈不完的话题。一次素质拓展活动中，班上同学安排做成一个m行n列的矩阵，而小渊和小轩被安排在矩阵对角线的两端，因此，他们就无法直接交谈了。幸运的是，他们可以通过传纸条来进行交流。纸条要经由许多同学传到对方手里，小渊坐在矩阵的左上角，坐标(1,1)，小轩坐在矩阵的右下角，坐标(m,n)。从小渊传到小轩的纸条只可以向下或者向右传递，从小轩传给小渊的纸条只可以向上或者向左传递。 在活动进行中，小渊希望给小轩传递一张纸条，同时希望小轩给他回复。班里每个同学都可以帮他们传递，但只会帮他们一次，也就是说如果此人在小渊递给小轩纸条的时候帮忙，那么在小轩递给小渊的时候就不会再帮忙。反之亦然。 还有一件事情需要注意，全班每个同学愿意帮忙的好感度有高有低（注意：小渊和小轩的好心程度没有定义，输入时用0表示），可以用一个0-100的自然数来表示，数越大表示越好心。小渊和小轩希望尽可能找好心程度高的同学来帮忙传纸条，即找到来回两条传递路径，使得这两条路径上同学的好心程度只和最大。现在，请你帮助小渊和小轩找到这样的两条路径。 【输入】 输入文件message.in的第一行有2个用空格隔开的整数m和n，表示班里有m行n列（1&lt;=m,n&lt;=50）。 接下来的m行是一个m*n的矩阵，矩阵中第i行j列的整数表示坐在第i行j列的学生的好心程度。每行的n个整数之间用空格隔开。 【输出】 输出文件message.out共一行，包含一个整数，表示来回两条路上参与传递纸条的学生的好心程度之和的最大值。 【输入输出样例】 message.in message.out 3 3 0 3 9 2 8 5 5 7 0 34 【限制】 30%的数据满足：1&lt;=m,n&lt;=10 100%的数据满足：1&lt;=m,n&lt;=50 三角蛋糕**(trigon)** XP在机房里放了一块正三角形的大蛋糕，但是第二天他发现蛋糕被老鼠咬坏了。 XP不想让蛋糕白白的被浪费，于是他把蛋糕分割成了一个个的小正三角形（如上图所示）。黑色的小正三角形表示老鼠把那一块咬坏了。XP想要切出一块最大的没被老鼠咬坏正三角形的蛋糕，可是最大的三角形有多大呢? 输入数据 第一行，一个整数N，表示XP把蛋糕纵向划分为N行。 接下来的N行，第i行包括了(n-i)*2+1个有效字符。“-”表示这块蛋糕是好的，“#”表示这块蛋糕被咬坏了。为了保持三角形的形状，输入文件中会出现空格。 输出数据 一行一个整数，表示最大的三角形包括的小三角形数。 样例 输入:**trigon.in ** 5 #-##—-# —–#- —#- -#- - 输出:**trigon.out ** 9 数据范围 对于30%的数据，满足n≤5 对于所有的测试数据，满足n≤100。"},{"title":"后山特遣队简报 2018.7","date":"2018-08-05T05:56:30.000Z","url":"/2018/08/05/backmount-2018-7/","categories":[["后山特遣队","/categories/%E5%90%8E%E5%B1%B1%E7%89%B9%E9%81%A3%E9%98%9F/"]],"content":"最后一次育才夏(bu)令(ke)营一期很快就结束了，美妙而短暂的暑假已经过去了一半多，而后山特遣队仍旧保持一贯的活(leng)力(ji)。七月的31天就这么平静地过去。 现将后山特遣队截至发稿的有关变化整理如下： 由于东南人数庞大（一个班50多个人已成为标配）的小初一成功升级为新初二，他们将享受老初二的信息课程（因为浙江教育改革高中将用Python代替VB，所以信息课变成了Python课）。柏(bai)桦(ye)为了给ta们购置新电脑，饱含着2016代和2015代后山队员记忆的“东南机房第二大组的最后一排的四个电脑”，早在2017学年第二学期三台电脑就被换掉并刷机，剩下的那台（也就是有备份的那台电脑）因为种花兔的OJ计划被保留，种花兔也很小心，没有把它原有的数据毁坏，在2018年3月31日（后山OJ纪念日）开始运行以来一直没让它被糟蹋，柏桦也一直在默默地配合。然而，这台电脑也并没有逃过被处置的命运。【重点其实现在才开始】自2018年七月初起这台电脑便开始时不时的失去内网穿透连接，现在因为电脑的增加，在暑假期间失去了电源和互联网连接，因此后山特遣队OJ暑假期间暂停服务。种花兔虽已被告知这台电脑不会被清清除数据但他进不进得了机房未来仍然还是个问题（毕竟有 超姐和已经接替超哥成为学生处主任的延国老师 看着）。 后山特遣队OJ V2计划新增远程评测功能，目前已经与Python结合实现大部分功能。当然，版权问题还是要考虑一下的…… 目前因为第1条，种花兔正努力寻找没被墙的外国VPS搭建新一代的后山特遣队，当然希望大家多多支(da)持(shang)（毕竟免费的东西要持续运营除了靠广告挖矿内购也就只有DaShang了吧） 洛谷团队“浙江锦绣育才教育科技集团”的描述又更新了。 以下为洛谷团队“浙江锦绣育才教育科技集团”8月5日14时的快照： "},{"title":"挖地雷（动态规划练习） 解题日志","date":"2018-08-05T03:40:08.000Z","url":"/2018/08/05/plog-dp-mine/","tags":[["动态规划","/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"]],"categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"],["解题日志","/categories/%E8%A7%A3%E9%A2%98%E6%97%A5%E5%BF%97/"]],"content":"题面描述在一个地图上有N 个地窖（N&lt;=200）,每个地窖中埋有一定数量的地雷。同时，给出地窖之间的连接路径，并规定路径都是单向的,且从编号小的地窖通向编号大的地窖。某人可以从任一处开始挖地雷，然后沿着指出的连接往下挖（仅能选择一条路径），当无连接时挖地雷工作结束。设计一个挖地雷的方案，使他能挖到最多的地雷。 【输入格式】 N {地窖的个数} W1，W2，……WN {每个地窖中的地雷数} X1，Y1 {表示从X1可到Y1，保证xi&lt;yi} X2，Y2 …… 0 ，0 {表示输入结束} 【输出格式】 K1-K2-……-Kv {挖地雷的顺序} MAX {最多挖出的地雷数} 【输入样例】Mine.in 6 5 10 20 5 4 5 1 2 1 4 2 4 3 4 4 5 4 6 5 6 0 0 【输出样例】Mine.out 3-4-5-6 34 版本2(AC样例) &lt; pre class=”font-size:15 line-height:17 lang:c++ decode:true “ title=”挖地雷 版本2(AC样例)” &gt;#include&lt;bits/stdc++.h&gt; using namespace std; //———题目变量 int n,w[205],xi,yi; //———自用变量 //用stl也许并不是什么好主意 vector&lt; set &gt; dj;//dj[目标地窖编号]{通向目标地窖的地窖编号} vector dp;//动态规划用数组，表示i号地窖的最大地雷数 vector opt;//动态规划用数组，表示i号地窖的最大地雷数 stack optt; //———主程序 int main(){ //读入部分，没什么好废话的 cin&gt;&gt;n; dj.resize(n+5);//保持一点弹性的空间 opt.resize(n+5); dp.resize(n+5); for(int i=1;i&lt;=n;i++){ cin&gt;&gt;w[i]; //cout&lt;&lt;”w[“&lt;&lt;i&lt;&lt;”] = “&lt;&lt;w[i]&lt;&lt;endl; } while(true){ cin&gt;&gt;xi&gt;&gt;yi; if(xi==0 &amp;&amp; yi==0){ break; } dj[yi].insert(xi); //stl的set遍历方法 //调试代码 set::iterator j=dj[yi].begin(); } 版本1(WA) &lt; pre class=”font-size:16 line-height:18 lang:c++ decode:true” title=”挖地雷 版本1(WA)”&gt;#include&lt;bits/stdc++.h&gt; using namespace std; //———题目变量 int n,w[205],xi,yi; //———自用变量 //用stl也许并不是什么好主意 vector&lt; set &gt; dj;//dj[目标地窖编号]{通向目标地窖的地窖编号} vector dp;//动态规划用数组，表示i号地窖的最大地雷数 vector opt;//动态规划用数组，表示i号地窖的最大地雷数 //———主程序 int main(){ //读入部分，没什么好废话的 cin&gt;&gt;n; dj.resize(n+5);//保持一点弹性的空间 opt.resize(n+5); for(int i=1;i&lt;=n;i++){ cin&gt;&gt;w[i]; cout&lt;&lt;”w[“&lt;&lt;i&lt;&lt;”] = “&lt;&lt;w[i]&lt;&lt;endl; } while(true){ cin&gt;&gt;xi&gt;&gt;yi; if(xi==0 &amp;&amp; yi==0){ break; } dj[yi].insert(xi); //stl的set遍历方法 //调试代码 set::iterator j=dj[yi].begin(); cout&lt;&lt;”dj[“&lt;&lt;yi&lt;&lt;”]={“; while(j!=dj[yi].end()){ int item=_j; cout&lt;&lt;item&lt;&lt;” , “; j++; } cout&lt;&lt;”}”&lt;&lt;endl; } //——–核心部分 for(int i=1;i&lt;=n;i++){//从小到大遍历每个地窖 cout&lt;&lt;”i = “&lt;&lt;i&lt;&lt;endl; dp[i]=0; if(dj[i].size()!=0){//如果有地窖通向当前地窖 //stl的set遍历方法 set::iterator j=dj[i].begin(); while(j!=dj[i].end()){ int item=_j; if(w[item]&gt;dp[i]){ dp[i]=w[item]; } j++; } } dp[i]+=w[i]; cout&lt;&lt;”END”&lt;&lt;endl; } int ans=0; for(int i=1;i&lt;=n;i++){ if(dp[i]&gt;ans){ ans=dp[i]; } } cout&lt;&lt;ans&lt;&lt;endl; return 0; }"},{"title":"动态规划练习【仅题目】","date":"2018-08-05T02:58:41.000Z","url":"/2018/08/05/dp-practice/","categories":[["奇怪题目","/categories/%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE/"]],"content":"挖地雷（Mine）在一个地图上有N 个地窖（N&lt;=200）,每个地窖中埋有一定数量的地雷。同时，给出地窖之间的连接路径，并规定路径都是单向的,且从编号小的地窖通向编号大的地窖。某人可以从任一处开始挖地雷，然后沿着指出的连接往下挖（仅能选择一条路径），当无连接时挖地雷工作结束。设计一个挖地雷的方案，使他能挖到最多的地雷。 【输入格式】 N {地窖的个数} W1，W2，……WN {每个地窖中的地雷数} X1，Y1 {表示从X1可到Y1，保证xi&lt;yi} X2，Y2 …… 0 ，0 {表示输入结束} 【输出格式】 K1-K2-……-Kv {挖地雷的顺序} MAX {最多挖出的地雷数} 【输入样例】Mine.in 6 5 10 20 5 4 5 1 2 1 4 2 4 3 4 4 5 4 6 5 6 0 0 【输出样例】Mine.out 3-4-5-6 34 EXCHANGE(exchange) 问题描述: Dave偶然获得了未来几天的美元(dollars)与马克(marks)之间的兑换率。例如Dave开始有100marks，请编写个程序帮助Dave找出最好的买卖marks 或 dollars的方案，使Dave最后一天有最多的marks。 输入格式： 输入文件的第一行有个自然数N, 1 ≤ N ≤ 100,表示Dave知道未来兑换率的天数。 下面N行每行有两个被空格分隔的自然数B和S， 100 ≤ B ≤ S ≤ 1000。第(i＋1)行表示的和是第 i天的兑换率，表示这一天： 100个marks 可以买B个dollars，和S个dollars可以买100个marks。 输出格式： 只一行一个实数，表示最多可获得的marks，精确到小数后2位。 输入输出样例： exchange.in 3 393 398 394 401 386 386 exchange.out 102.07 exchange.in 5 300 300 310 320 320 330 330 330 300 320 exchange.out 103.12 exchange.in 8 218 219 228 231 227 235 205 213 230 232 239 239 251 258 205 213 exchange.out 126.14 *样例3***的解释 (**此处不用输出) 第1天： 100.0000 马克换成 228.0000 美元 第4天： 228.0000 美元换成 107.0422 马克 第7天： 107.0422 马克换成 268.6760美元 第8天： 268.6760 美元换成 126.1389 马克 又上锁妖塔(tower.in/tower.out) [题目描述]小D在X星买完了想要的东西，在飞往下一个目的地的途中，正无聊的他转头看了看身边的小A，发现小A正在玩&lt;仙剑&gt;，可是小A很奇怪，他一直在锁妖塔的周围转来转去，可是就是不进去，于是小D问他：“你在干什么?怎么不上去?”小A说：“我在想怎么从锁妖塔外面爬上去”(倒…) 锁妖塔的建造很特别，塔总共有n层，但是高度却不相同，这造成了小A爬过每层的时间也不同。小A会用仙术，每用一次可以让他向上跳一层或两层，但是每次跳跃后小A都将用完灵力，必须爬过至少一层才能再次跳跃(你可以认为小A需要跳两次一层才休息)，小A想用最短的时间爬到塔顶，可是他不能找到时间最短的方案，所以请你帮他找到一个时间最短的方案让他爬到塔顶，小A只关心时间，所以你只要告诉他最短时间是多少就可以了。你可以最后跳到塔外即超过塔高。 [输入格式]第一行一个数n (n&lt;=10000)，表示塔的层数。 接下来的n行每行一个数(&lt;=100)，表示从下往上每层的高度。 [输出格式]一个数，表示最短时间 [样例输入] 5 3 5 1 8 4 [样例输出] 1 [数据规模]对20%的数据，n&lt;=10 对40%的数据，n&lt;=100 对60%的数据，n&lt;=5000 对100%的数据，n&lt;=10000 维修栅栏 输入文件：fence.in 输出文件：fence.out 问题描述： 小z最近当上了农场主！不过，还没有来得及庆祝，一件棘手的问题就摆在了小z的面前。农场的栅栏，由于年久失修，出现了多处破损。栅栏是由n块木板组成的，每块木板可能已经损坏也可能没有损坏。小z知道，维修连续m个木板(这m个木板不一定都是损坏的)的费用是sqrt(m)。可是，怎样设计方案才能使总费用最低呢？小z想请你帮帮忙。 输入格式：输入文件的第一行包含一个整数n，表示栅栏的长度。 第二行包含n个由空格分开的整数(长整型范围内)。如果第i个数字是0，则表示第i块木板已经损坏，否则表示没有损坏。 输出格式：输出文件中仅包含一个实数，表示最小维修费用。注意：答案精确到小数点后3位。数据规模:30%的数据中，n&lt;=20。100%的数据中，n&lt;=2500。输入输出样例： 输入 输出 9 0 –1 0 1 2 3 0 –2 0 3.000 回文字(palin) 问题描述**:** 如果一个单词从前和从后读都是一样的，则称为回文字。如果一个单词不是回文字，则可以把它拆分成若干个回文字。编程求一个给定的字母序列，最多要分割成几部分，使每一部分都回文字。 输入格式： 输入文件有且只有一行，包含一个字符串。字符串由小写英文字母组成（a-z），长度不超过100。 输出格式： 输出文件只一行，为最少的回文字个数。 输入输出样例： 样例1 样例2 样例3 输入 anaban abaccbcb anavolimilana 输出 2 3 5 样例1说明：(不用输出) #1 a_naban #2 aba_cc_bcb #3 ana_v_o_limil_ana 抢金块 输入文件：gold.in 输出文件：gold.out 问题描述: 地面上有一些格子，每个格子上面都有金块，但不同格子上的金块有不同的价值，你一次可以跳S至T步 (2&lt;=S&lt;T&lt;=10) 如果S=2，T=4。你就可以跳2步、3步或4步，告诉你这些后，你从第一个格子起跳，必须跳到最后一个格子上，请你输出最多可以获得的金块的总价值。 输入格式： 第一行是格子个数, 第二行是S和T ，保证T大于S。 第三行是每个格子上的金块价值.。第一个为第一个格子上的价值，默认从第一个格子起跳，必须跳到最后一个格子上，也就是说第一个格子上的金块和最后一个格子的金块你就可以直接获得了。 输出格式： 输出最多可以获得的金块的总价值。 输入输出样例： 输入 输出 10 2 3 4 5 8 2 8 3 6 7 2 9 36 输出注解跳1、3、5、8、10 总价值：4+8+8+7+9=36 数据规模 格子数目&lt;1000 2&lt;=S&lt;T&lt;=10 每个金块的价值&lt;10000 花店橱窗布置（FLOWER） 提交文件名：****flower 问题描述： 某花店现有F束花，每一束花的品种都不一样，同时至少有同样数量的花瓶，被按顺序摆成一行，花瓶的位置是固定的，从左到右按1到V顺序编号，V是花瓶的数目。花束可以移动，并且每束花用1到F的整数标识。如果I &lt; J，则花束I必须放在花束J左边的花瓶中。例如，假设杜鹃花的标识数为1，秋海棠的标识数为2，康乃馨的标识数为3，所有花束在放入花瓶时必须保持其标识数的顺序，即杜鹃花必须放在秋海棠左边的花瓶中，秋海棠必须放在康乃馨左边的花瓶中。如果花瓶的数目大于花束的数目，则多余的花瓶必须空，即每个花瓶只能放一束花。 每个花瓶的形状和颜色也不相同，因此，当各个花瓶中放入不同的花束时，会产生不同的美学效果，并以美学值（一个整数）来表示，空置花瓶的美学值为0。在上述的例子中，花瓶与花束的不同搭配所具有的美学值，可以用如下的表格来表示： 花瓶1 花瓶2 花瓶3 花瓶4 花瓶5 杜鹃花 7 23 -5 -24 16 秋海棠 5 21 -4 10 23 康乃馨 -21 5 -4 -20 20 根据表格，杜鹃花放在花瓶2中，会显得非常好看，但若放在花瓶4中，则显得很难看。 问题求解： 为了取得最佳的美学效果，必须在保持花束顺序的前提下，使花的摆放取得最大的美学值，如果具有最大美学值的摆放方式不止一种，则输出任何一种方案即可。 输入文件（flower.in）： 输入文件的第一行是两个整数F和V，分别为花束数和花瓶数（1≤F≤100，F≤V≤100）。接下来是矩阵Aij,它有I行，每行J个整数，Aij表示花束I摆放在花瓶J中的美学值。 输出文件（flower.out）： 输出文件的第一行是一个整数，为最大的美学值；接下来有F行，每行两个数，为那束花放入那个花瓶的编号。 输入样例： 3 5 7 23 –5 –24 16 5 21 –4 10 23 -21 5 –4 –20 20 输出样例 53 2 4 5 垃圾陷阱 (well) 卡门——农夫约翰极其珍视的一条Holsteins奶牛——已经落了到“垃圾井”中。“垃圾井”是农夫们扔垃圾的地方，它的深度为D (2 &lt;= D &lt;= 100)英尺。 卡门想把垃圾堆起来，等到堆得与井同样高时，她就能逃出井外了。另外，卡门可以通过吃一些垃圾来维持自己的生命。 每个垃圾都可以用来吃或堆放，并且堆放垃圾不用花费卡门的时间。 假设卡门预先知道了每个垃圾扔下的时间t(0&lt;t&lt;=1000)，以及每个垃圾堆放的高度h(1&lt;=h&lt;=25)和吃进该垃圾能维持生命的时间f(1&lt;=f&lt;=30)，要求出卡门最早能逃出井外的时间，假设卡门当前体内有足够持续10小时的能量，如果卡门10小时内没有进食，卡门就将饿死。 输入 第一行为2个整数，D 和 G (1 &lt;= G &lt;= 100)，G为被投入井的垃圾的数量。 第二到第G+1行每行包括3个整数：T (0 &lt; T &lt;= 1000)，表示垃圾被投进井中的时间；F (1 &lt;= F &lt;= 30)，表示该垃圾能维持卡门生命的时间；和 H (1 &lt;= H &lt;= 25)，该垃圾能垫高的高度。 输出 如果卡门可以爬出陷阱，输出一个整表示最早什么时候可以爬出；否则输出卡门最长可以存活多长时间。 样例 well.in 20 4 5 4 9 9 3 2 12 6 10 13 1 1 well.out 13 **[**样例说明] 卡门堆放她收到的第一个垃圾：height=9； 卡门吃掉她收到的第二个垃圾，使她的生命从10小时延伸到13小时； 卡门堆放第3个垃圾，height=19； 卡门堆放第4个垃圾，height=20。"},{"title":"【NOIP2015普】初赛试卷分享","date":"2018-07-12T01:27:16.000Z","url":"/2018/07/12/noip2015pjcs/","categories":[["刷刷真题","/categories/%E5%88%B7%E5%88%B7%E7%9C%9F%E9%A2%98/"]],"content":"不要一分钱嘞！ 第二十一届全国青少年信息学奥林匹克联赛初赛 *普及组***C++**语言试题 竞赛时间：2015年10月11日****14:30-16:30 *一、单项选择题(共20题，每题1.5***分，共计30**分；每题有且仅有一个正确选项) 1．1MB等于( )。 A.10000字节 B.1024字节 - C.1000×1000字节 D.1024×1024字节 在PC机中，PENTIUM(奔腾)、酷睿、赛扬等 是指( )。 A.生产厂家名称 B.硬盘型号 C.CPU的型号 D.显示器的型号。 操作系统的作用是( )。 A.把源程序译成目标程序 B.便于进行数据管理 C.控制和管理系统资源 D.实现硬件之间的连接 在计算机内部用来传送、存贮、加工处理的数据或指令都是以( )。 A.二进制码 B.八进制码 C.十进制码 D.智能拼音码 下列说法正确的是( )。 A.CPU的主要任务是执行数据运算和程序控制 B.存储器具有记忆能力，其中信息任何时候都不会丢失 C.两个显示器屏幕尺寸相同，则它们的分辨率必定相同 D.个人用户只能使用Wifi的方式连接到Internet 二进制数00100100和00010100的和是( )。 A.00101000 B.01100111 C.01000100 D.00111000 与二进制小数0.1相等的十六进制数是( )。 A.0.8 B.0.4 C.0.2 D.0.1 所谓的“中断”是指( )。 A.操作系统随意停止一个程序的运行 B.当出现需要时，CPU暂时停止当前程序的执行转而执行处理新情况的过程 C.因停机而停止一个程序的运行 D.电脑死机 计算机病毒是( )。 A.通过计算机传播的危害人体健康的一种病毒 B.人为制造的能够侵入计算机系统并给计算机带来故障的程序或指令集合 C.一种由于计算机元器件老化而产生的对生态环境有害的物质 D.利用计算机的海量高速运算能力而研制出来的用于疾病预防的新型病毒 FTP可以用于( )。 A.远程传输文件 B.发送电子邮件 C.浏览网页 D.网上聊天 下面哪种软件不属于即时通信软件( )。 A.QQ B.MSN C.微信 D.P2P 6个顶点的连通图的最小生成树，其边数为( )。 A.6 B.5 C.7 D.4 链表不具备的特点是( )。 A.可随机访问任何一个元素 B.插入、删除操作不需要移动元素 C.无需事物估计存储空间大小 D.所需存储空间与存储元素个数成正比 线性表若采用链表存储结构，要求内存中可用存储单元地址( )。 必须连续 B.部分地址必须连续 C.一定不连续 D.连续不连续均可 今有一空栈S，对下列待进栈的数据元素序列a，b，c，d，e，f依次进行进栈，进栈，出栈，进栈， 进栈，出栈的操作，则此操作完成后，栈S的栈顶元素为 f B. c C. a D. b 前序遍历序列与中序遍历序列相同的二叉树为( )。 A.根结点无左子树 B.根结点无右子树 C.只有根结点的二叉树或非叶子结点只有左子树的二叉树 D.只有根结点的二叉树或非叶子结点只有右子树的二叉树 如果根的高度为1,具有61个结点的完全二叉树的高度为( )。 5 B. 6 C. 7 D. 8 下列选项中不属于视频文件格式的是( )。 TXT B. AVI C. MOV D. RMVB 设某算法的计算时间表示为递推关系式T(n) = T(n-1) + n (为正整数) 及T(0)=1，则该算法的时间复杂度为( )。 O(logn) B. O(nlogn) C. O(n) D. O(n2) 在NOI系列赛事中参赛选手必须使用累承办单位统一提供的设备。下列物品中不允许选手自带的是( )。 鼠标 B. 笔 C. 身份证 D. 准考证 二、问题求解(共2题，每题5分，共计10分；每题全部答对得5分，没有部分分) 重新排列1234使得每一个数字都不在原来的位置上，一共有 种排法。 一棵结点数为2015的二叉树最多有 个叶子结点。 三、阅读程序写结果**(共4题，每题8分，共计32分)** 1. #include using namespace std; int main() { int a, b, c; a = 1; b = 2; c = 3; if(a &gt; b) if(a &gt; c) cout &lt;&lt; a &lt;&lt; ‘ ‘; else cout &lt;&lt; b &lt;&lt; ‘ ‘; cout &lt;&lt; c &lt;&lt;endl; return 0; } 输出： . #include using namespace std; struct point { int x; int y; }; int main() { int a, b, c; struct EX { int a; int b; point c; }e; e.a = 1; e.b = 2; e.c.x = e.a + e.b; e.c.y = e.a * e.b; cout &lt;&lt;e.c.x &lt;&lt; ‘,’ &lt;&lt;e.c.y &lt;&lt;endl; return 0; } 输出： . #include #include using namespace std; int main() { string str; int i; int count; count = 0; getline(cin, str); for(i = 0; i &lt; str.length(); i++) if(str[i] &gt;= ‘a’ &amp;&amp; str[i] &lt;= ‘z’) count++; cout &lt;&lt; “It has “ &lt;&lt; count &lt;&lt; “ lowercases” &lt;&lt;endl; return 0; } 输入：NOI2016 will be held in Mian Yang. 输出： . 4. #include #include void fun(char *a, char *b) { a = b; (*a)++; } int main() { char c1, c2, *p1, *p2; c1 = ‘A’; c2 = ‘a’; p1 = &c1; p2 = &c2; fun(p1, p2); cout &lt;&lt; c1 &lt;&lt; c2 &lt;&lt;endl; return 0; } 输出： . 四、完善程序**(共2题，每题14分，共计28分)** (打印月历)输入月份m(1≤m≤12)，按一定格式打印2015年第m月的月历。(第三、四空2.5分， 其余3分) 例如，2015年1月的月历打印效果如下(第一列为周日)： S M T W T F S 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include #include const int dayNum[] = {-1, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; int m, offset, i; int main() { cin &gt;&gt; m; cout &lt;&lt; “S\\tM\\tT\\tW\\tT\\tF\\tS” &lt;&lt;endl; //‘\\t’为TAB制表符 ; （1） ； for(i = 1; i &lt; m; i++) offset = （2） ; for(i = 0; i &lt; offset; i++) cout &lt;&lt; ‘\\t’; for(i = 1; （3） ; i++) { cout &lt;&lt; （4） ； ; if(i == dayNum[m] （5） ) cout &lt;&lt;endl; else cout &lt;&lt; ‘\\t’; } return 0; } (中位数median) 给定n (n为奇数且小于1000) 个整数，整数的范围在0~m (0&lt;m&lt;2^31) 之间，请使用二分法求这n个整数的中位数。所谓中位数，是指将这n个数排序之后，排在正中间的数。(第五空2 分，其余3分) #include using namespace std; const int MAXN = 1000; int n, i, lbound, rbound, mid, m, count; int x[MAXN]; int main() { cin &gt;&gt;n &gt;&gt; m; for(i = 0; i &lt;n; i++) cin &gt;&gt; x[i]; lbound = 0; rbound = m; while( （1） ) { mid = (lbound + rbound) / 2; （2） ; for(i = 0; i &lt;n; i++) if( （3） ) （4） ; if(count &gt;n / 2) lbound = mid + 1; else （5） ; } cout &lt;&lt;rbound &lt;&lt;endl; return 0; }"}]